import{S as Ar,i as Tr,s as br,k as t,q as l,a as i,l as p,m as e,r as u,h as s,c as r,n as k,b as c,C as a,K as ql}from"./index.8762ca70.js";function xr(zi){let S,Up,Ja,O,Rp,Ka,Gn,Hp,Ya,Bn,jp,Qa,D,Cp,za,Fn,Op,Va,$n,Dp,Xa,h,Hs,Wp,Np,js,Mp,Gp,Cs,Bp,Fp,Os,$p,Jp,Ds,Kp,Za,Jn,Yp,nt,W,Qp,st,N,zp,at,Kn,Vp,tt,g,Yn,Ws,Xp,Zp,ne,Qn,Ns,se,ae,te,zn,Ms,pe,ee,oe,Vn,Gs,ce,le,pt,M,ue,et,Xn,ie,ot,G,re,ct,Zn,ke,lt,ns,fe,ut,B,de,it,q,me,Bs,ye,he,rt,F,we,kt,$,Vi=`<code class="language-javascript"><span class="token comment">// Fetch a list of users from a public API</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/users'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Check if the request was successful</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">HTTP error! Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// Parse the JSON response</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Do something with the data</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Users:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Handle any errors</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error fetching users:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ft,ss,ge,dt,d,J,ve,Fs,Ee,Pe,Ie,$s,_e,Ae,Js,Te,be,Ks,xe,Se,Ys,Le,qe,Qs,Ue,mt,K,Re,yt,U,He,zs,je,Ce,ht,Y,Xi=`<code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">HTTP error! Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Users:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error fetching users:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Call the function</span>
<span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,wt,as,Oe,gt,Q,De,vt,ts,We,Et,_,ps,Vs,Ne,Me,Ge,es,Xs,Be,Fe,$e,os,Zs,Je,Ke,Pt,cs,Ye,It,z,Qe,_t,V,ze,At,X,Zi=`<code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token parameter">userData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/users'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">HTTP error! Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> newUser <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Created user:'</span><span class="token punctuation">,</span> newUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newUser<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error creating user:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Call the function with user data</span>
<span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'John Doe'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'john@example.com'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'johndoe'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Tt,Z,Ve,bt,nn,nr=`<code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token parameter">userId<span class="token punctuation">,</span> userData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">https://jsonplaceholder.typicode.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'PUT'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">HTTP error! Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> updatedUser <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Updated user:'</span><span class="token punctuation">,</span> updatedUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> updatedUser<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error updating user:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Call the function with user ID and updated data</span>
<span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'John Smith'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'johnsmith@example.com'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,xt,sn,Xe,St,an,sr=`<code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">https://jsonplaceholder.typicode.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'DELETE'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">HTTP error! Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">User </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> deleted successfully</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error deleting user:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Call the function with user ID</span>
<span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Lt,tn,Ze,qt,ls,no,Ut,pn,ar=`<code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">searchUsers</span><span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Encode the query parameter to handle special characters</span>
    <span class="token keyword">const</span> encodedQuery <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">https://api.example.com/users?search=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>encodedQuery<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;limit=10</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">HTTP error! Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Search results:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error searching users:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Search for users with "john" in their name</span>
<span class="token function">searchUsers</span><span class="token punctuation">(</span><span class="token string">'john'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Rt,en,so,Ht,R,ao,na,to,po,jt,on,tr=`<code class="language-javascript"><span class="token comment">// First, include Axios in your project:</span>
<span class="token comment">// &lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js">&lt;/script></span>
<span class="token comment">// Or install via npm: npm install axios</span>

<span class="token comment">// GET request</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Users:'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error fetching users:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// POST request</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token parameter">userData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/users'</span><span class="token punctuation">,</span> userData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Created user:'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error creating user:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// PUT request</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token parameter">userId<span class="token punctuation">,</span> userData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">https://jsonplaceholder.typicode.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span> userData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Updated user:'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error updating user:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// DELETE request</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">https://jsonplaceholder.typicode.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">User </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> deleted successfully</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error deleting user:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ct,us,eo,Ot,w,sa,oo,co,aa,lo,uo,ta,io,ro,pa,ko,fo,ea,mo,Dt,cn,yo,Wt,is,ho,Nt,ln,wo,Mt,un,pr=`<code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getWeatherData</span><span class="token punctuation">(</span><span class="token parameter">city</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> apiKey <span class="token operator">=</span> <span class="token string">'your_api_key_here'</span><span class="token punctuation">;</span>

  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">https://api.weatherapi.com/v1/current.json?key=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>apiKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>city<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">HTTP error! Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Weather data:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error fetching weather data:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Gt,rn,go,Bt,kn,er=`<code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUserProfile</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://api.example.com/profile'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">'Authorization'</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">HTTP error! Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'User profile:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error fetching profile:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ft,fn,vo,$t,dn,Eo,Jt,rs,Po,Kt,A,mn,oa,Io,_o,L,ca,Ao,To,la,bo,xo,ua,So,Lo,yn,ia,qo,Uo,I,ra,Ro,Ho,ka,jo,Co,fa,Oo,Do,da,Wo,No,hn,ma,Mo,Go,wn,ya,Bo,Fo,ha,$o,Yt,gn,Jo,Qt,ks,Ko,zt,vn,or=`<code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Resource not found'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Authentication required'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Redirect to login page</span>
      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'/login'</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">HTTP error! Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error fetching data:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Show user-friendly error message</span>
    <span class="token function">displayErrorMessage</span><span class="token punctuation">(</span><span class="token string">'Failed to load data. Please try again later.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">displayErrorMessage</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> errorElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'error-message'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>errorElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    errorElement<span class="token punctuation">.</span>textContent <span class="token operator">=</span> message<span class="token punctuation">;</span>
    errorElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Vt,En,Yo,Xt,fs,Qo,Zt,Pn,cr=`<code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Simple Weather App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    <span class="token selector">body</span> <span class="token punctuation">&#123;</span>
      <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
      <span class="token property">max-width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.weather-card</span> <span class="token punctuation">&#123;</span>
      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ddd<span class="token punctuation">;</span>
      <span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
      <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.error</span> <span class="token punctuation">&#123;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">input, button</span> <span class="token punctuation">&#123;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
      <span class="token property">margin-right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Weather App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city-input<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter city name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search-button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Get Weather<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error-message<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>weather-card<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>weather-card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Temperature: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>temperature<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>°C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Condition: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>condition<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Humidity: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>humidity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>%<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Wind: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wind<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> km/h<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> apiKey <span class="token operator">=</span> <span class="token string">'your_api_key_here'</span><span class="token punctuation">;</span> <span class="token comment">// Replace with your actual API key</span>

    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'search-button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> getWeather<span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'city-input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keypress'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">'Enter'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">getWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> cityInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'city-input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> city <span class="token operator">=</span> cityInput<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>city<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">showError</span><span class="token punctuation">(</span><span class="token string">'Please enter a city name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">https://api.weatherapi.com/v1/current.json?key=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>apiKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">showError</span><span class="token punctuation">(</span><span class="token string">'City not found. Please check the spelling and try again.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">showError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">displayWeather</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error fetching weather:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">showError</span><span class="token punctuation">(</span><span class="token string">'Failed to fetch weather data. Please try again later.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">displayWeather</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Hide error message if it was previously shown</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'error-message'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>

      <span class="token comment">// Update the weather card with data</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'city-name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">.</span>location<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">.</span>location<span class="token punctuation">.</span>country<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'temperature'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> data<span class="token punctuation">.</span>current<span class="token punctuation">.</span>temp_c<span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'condition'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> data<span class="token punctuation">.</span>current<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'humidity'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> data<span class="token punctuation">.</span>current<span class="token punctuation">.</span>humidity<span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'wind'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> data<span class="token punctuation">.</span>current<span class="token punctuation">.</span>wind_kph<span class="token punctuation">;</span>

      <span class="token comment">// Show the weather card</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'weather-card'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">showError</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> errorElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'error-message'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      errorElement<span class="token punctuation">.</span>textContent <span class="token operator">=</span> message<span class="token punctuation">;</span>
      errorElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'weather-card'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code>`,np,T,zo,In,Vo,Xo,wa,Zo,nc,sp,_n,sc,ap,An,ac,tp,ds,tc,pp,Tn,ga,pc,ec,ep,bn,lr=`<code class="language-javascript"><span class="token comment">// Backend proxy example (Node.js with Express)</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/weather'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> city <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>city<span class="token punctuation">;</span>
    <span class="token keyword">const</span> apiKey <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">WEATHER_API_KEY</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">https://api.weatherapi.com/v1/current.json?key=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>apiKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>city<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'Failed to fetch weather data'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server running on port 3000'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,op,xn,oc,cp,ms,cc,lp,Sn,va,lc,uc,up,Ln,ur=`<code class="language-javascript"><span class="token comment">// Simple caching example</span>
<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchWithCache</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> expiryTimeMs <span class="token operator">=</span> <span class="token number">60000</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Check if we have cached data and it's still valid</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>url<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> cache<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">></span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> expiryTimeMs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Using cached data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// If no cache or expired, fetch new data</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Fetching fresh data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Save to cache</span>
  cache<span class="token punctuation">[</span>url<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">timestamp</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> data
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ip,qn,ic,rp,ys,rc,kp,Un,Ea,kc,fc,fp,Rn,ir=`<code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> allUsers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> hasMorePages <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>hasMorePages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">https://api.example.com/users?page=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>page<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;limit=100</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    allUsers <span class="token operator">=</span> allUsers<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Check if there are more pages</span>
    hasMorePages <span class="token operator">=</span> data<span class="token punctuation">.</span>hasNextPage<span class="token punctuation">;</span>
    page<span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token comment">// Optional: add a delay to avoid hitting rate limits</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasMorePages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> allUsers<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,dp,Hn,dc,mp,f,Pa,hs,Ia,mc,yc,hc,_a,ws,Aa,wc,gc,vc,Ta,gs,ba,Ec,Pc,Ic,xa,vs,Sa,_c,Ac,Tc,La,Es,qa,bc,xc,Sc,Ua,Ps,Ra,Lc,qc,Uc,Ha,Is,ja,Rc,Hc,jc,Ca,_s,Oa,Cc,Oc,yp,jn,Dc,hp,As,Wc,wp,Ts,Nc,gp,m,Da,Mc,Gc,Wa,Bc,Fc,Cn,$c,Na,Jc,Kc,Yc,Ma,Qc,zc,Ga,Vc,Xc,Ba,Zc,vp,bs,nl,Ep,On,sl,Pp,v,Fa,Dn,al,tl,$a,Wn,pl,el,xs,Nn,ol,cl,ll,Ss,Mn,ul,il;return{c(){S=t("h1"),Up=l("Understanding API Requests for Beginners: A Practical Guide"),Ja=i(),O=t("h2"),Rp=l("Introduction"),Ka=i(),Gn=t("p"),Hp=l("In modern web development, APIs (Application Programming Interfaces) are essential for connecting your application to external services, databases, or other parts of your own application. Whether you’re building a weather app that needs forecast data, a social media dashboard that displays posts, or an e-commerce site that processes payments, you’ll need to understand how to work with APIs."),Ya=i(),Bn=t("p"),jp=l("This guide will break down API concepts in a beginner-friendly way, with practical examples you can start using right away."),Qa=i(),D=t("h2"),Cp=l("What is an API?"),za=i(),Fn=t("p"),Op=l("An API is like a messenger that takes your request, tells a system what you want to do, and then returns the system’s response back to you. It’s a set of rules that allows different software applications to communicate with each other."),Va=i(),$n=t("p"),Dp=l("Think of an API as a waiter in a restaurant:"),Xa=i(),h=t("ol"),Hs=t("li"),Wp=l("You (the client) look at the menu and decide what you want"),Np=i(),js=t("li"),Mp=l("You tell the waiter (the API) your order"),Gp=i(),Cs=t("li"),Bp=l("The waiter takes your order to the kitchen (the server)"),Fp=i(),Os=t("li"),$p=l("The kitchen prepares your meal"),Jp=i(),Ds=t("li"),Kp=l("The waiter brings back your food (the response)"),Za=i(),Jn=t("p"),Yp=l("In web development, APIs typically operate over HTTP, and the data is usually formatted as JSON (JavaScript Object Notation)."),nt=i(),W=t("h2"),Qp=l("Types of APIs You’ll Encounter"),st=i(),N=t("h3"),zp=l("RESTful APIs"),at=i(),Kn=t("p"),Vp=l("REST (Representational State Transfer) is the most common architecture for web APIs. RESTful APIs use standard HTTP methods:"),tt=i(),g=t("ul"),Yn=t("li"),Ws=t("strong"),Xp=l("GET"),Zp=l(": Retrieve data (like getting a list of users)"),ne=i(),Qn=t("li"),Ns=t("strong"),se=l("POST"),ae=l(": Create data (like creating a new user)"),te=i(),zn=t("li"),Ms=t("strong"),pe=l("PUT/PATCH"),ee=l(": Update data (like updating a user’s information)"),oe=i(),Vn=t("li"),Gs=t("strong"),ce=l("DELETE"),le=l(": Remove data (like deleting a user)"),pt=i(),M=t("h3"),ue=l("GraphQL APIs"),et=i(),Xn=t("p"),ie=l("GraphQL is a newer approach that allows clients to request exactly the data they need in a single request, reducing over-fetching or under-fetching of data."),ot=i(),G=t("h3"),re=l("SOAP APIs"),ct=i(),Zn=t("p"),ke=l("SOAP (Simple Object Access Protocol) is an older, more rigid protocol that uses XML for message format."),lt=i(),ns=t("p"),fe=l("For this guide, we’ll focus on RESTful APIs since they’re the most common and beginner-friendly."),ut=i(),B=t("h2"),de=l("Making Your First API Request"),it=i(),q=t("p"),me=l("Let’s start with a simple example: fetching data from a public API. We’ll use the JavaScript "),Bs=t("code"),ye=l("fetch()"),he=l(" function, which is built into modern browsers."),rt=i(),F=t("h3"),we=l("Using fetch() for GET Requests"),kt=i(),$=t("pre"),ft=i(),ss=t("p"),ge=l("Let’s break down what’s happening:"),dt=i(),d=t("ol"),J=t("li"),ve=l("We call "),Fs=t("code"),Ee=l("fetch()"),Pe=l(" with the URL of the API endpoint"),Ie=i(),$s=t("li"),_e=l("The API processes our request and returns a response"),Ae=i(),Js=t("li"),Te=l("We check if the response was successful (status code 200-299)"),be=i(),Ks=t("li"),xe=l("We parse the JSON data from the response"),Se=i(),Ys=t("li"),Le=l("We log the data to the console"),qe=i(),Qs=t("li"),Ue=l("If any errors occur, we catch and log them"),mt=i(),K=t("h3"),Re=l("Using async/await for Cleaner Code"),yt=i(),U=t("p"),He=l("The same request can be written using "),zs=t("code"),je=l("async/await"),Ce=l(" for more readable code:"),ht=i(),Y=t("pre"),wt=i(),as=t("p"),Oe=l("This approach is often preferred because it looks more like synchronous code, making it easier to read and understand."),gt=i(),Q=t("h2"),De=l("Understanding API Endpoints"),vt=i(),ts=t("p"),We=l("An API endpoint is a specific URL that represents an object or collection of objects. For example:"),Et=i(),_=t("ul"),ps=t("li"),Vs=t("code"),Ne=l("https://api.example.com/users"),Me=l(" might return all users"),Ge=i(),es=t("li"),Xs=t("code"),Be=l("https://api.example.com/users/123"),Fe=l(" might return the user with ID 123"),$e=i(),os=t("li"),Zs=t("code"),Je=l("https://api.example.com/users/123/posts"),Ke=l(" might return all posts by user 123"),Pt=i(),cs=t("p"),Ye=l("Most APIs have documentation that lists all available endpoints and explains what data they expect and return."),It=i(),z=t("h2"),Qe=l("Making Different Types of Requests"),_t=i(),V=t("h3"),ze=l("POST Request (Creating Data)"),At=i(),X=t("pre"),Tt=i(),Z=t("h3"),Ve=l("PUT Request (Updating Data)"),bt=i(),nn=t("pre"),xt=i(),sn=t("h3"),Xe=l("DELETE Request (Removing Data)"),St=i(),an=t("pre"),Lt=i(),tn=t("h2"),Ze=l("Working with Query Parameters"),qt=i(),ls=t("p"),no=l("Many APIs allow you to filter, sort, or paginate results using query parameters in the URL:"),Ut=i(),pn=t("pre"),Rt=i(),en=t("h2"),so=l("Using Axios: A Popular Alternative to Fetch"),Ht=i(),R=t("p"),ao=l("While "),na=t("code"),to=l("fetch()"),po=l(" is built into browsers, many developers prefer using Axios, a library that simplifies API requests and provides additional features:"),jt=i(),on=t("pre"),Ct=i(),us=t("p"),eo=l("Benefits of Axios over fetch:"),Ot=i(),w=t("ul"),sa=t("li"),oo=l("Automatic JSON parsing"),co=i(),aa=t("li"),lo=l("Better error handling"),uo=i(),ta=t("li"),io=l("Request cancellation"),ro=i(),pa=t("li"),ko=l("Timeout configuration"),fo=i(),ea=t("li"),mo=l("Works in both browser and Node.js environments"),Dt=i(),cn=t("h2"),yo=l("Understanding API Authentication"),Wt=i(),is=t("p"),ho=l("Many APIs require authentication to verify who’s making the request. Here are common authentication methods:"),Nt=i(),ln=t("h3"),wo=l("API Keys"),Mt=i(),un=t("pre"),Gt=i(),rn=t("h3"),go=l("Bearer Tokens (OAuth, JWT)"),Bt=i(),kn=t("pre"),Ft=i(),fn=t("h2"),vo=l("Handling API Responses"),$t=i(),dn=t("h3"),Eo=l("Status Codes"),Jt=i(),rs=t("p"),Po=l("Understanding HTTP status codes is crucial when working with APIs:"),Kt=i(),A=t("ul"),mn=t("li"),oa=t("strong"),Io=l("2xx (Success)"),_o=l(": The request was successful"),L=t("ul"),ca=t("li"),Ao=l("200: OK"),To=i(),la=t("li"),bo=l("201: Created"),xo=i(),ua=t("li"),So=l("204: No Content"),Lo=i(),yn=t("li"),ia=t("strong"),qo=l("4xx (Client Error)"),Uo=l(": The request contains bad syntax or cannot be fulfilled"),I=t("ul"),ra=t("li"),Ro=l("400: Bad Request"),Ho=i(),ka=t("li"),jo=l("401: Unauthorized"),Co=i(),fa=t("li"),Oo=l("403: Forbidden"),Do=i(),da=t("li"),Wo=l("404: Not Found"),No=i(),hn=t("li"),ma=t("strong"),Mo=l("5xx (Server Error)"),Go=l(": The server failed to fulfill a valid request"),wn=t("ul"),ya=t("li"),Bo=l("500: Internal Server Error"),Fo=i(),ha=t("li"),$o=l("503: Service Unavailable"),Yt=i(),gn=t("h3"),Jo=l("Error Handling"),Qt=i(),ks=t("p"),Ko=l("Proper error handling improves user experience:"),zt=i(),vn=t("pre"),Vt=i(),En=t("h2"),Yo=l("Practical Example: Building a Weather App"),Xt=i(),fs=t("p"),Qo=l("Let’s put everything together in a practical example - a simple weather app:"),Zt=i(),Pn=t("pre"),np=i(),T=t("p"),zo=l("To use this example, you’ll need to sign up for a free API key from "),In=t("a"),Vo=l("WeatherAPI.com"),Xo=l(" and replace "),wa=t("code"),Zo=l("'your_api_key_here'"),nc=l(" with your actual key."),sp=i(),_n=t("h2"),sc=l("Common API Challenges and Solutions"),ap=i(),An=t("h3"),ac=l("Challenge 1: CORS Issues"),tp=i(),ds=t("p"),tc=l("Cross-Origin Resource Sharing (CORS) errors occur when your frontend code tries to request data from an API hosted on a different domain."),pp=i(),Tn=t("p"),ga=t("strong"),pc=l("Solution"),ec=l(": Use APIs that support CORS, or create a backend proxy to make the request for you."),ep=i(),bn=t("pre"),op=i(),xn=t("h3"),oc=l("Challenge 2: Rate Limiting"),cp=i(),ms=t("p"),cc=l("Many APIs limit how many requests you can make in a certain timeframe."),lp=i(),Sn=t("p"),va=t("strong"),lc=l("Solution"),uc=l(": Implement caching and throttling."),up=i(),Ln=t("pre"),ip=i(),qn=t("h3"),ic=l("Challenge 3: Large Data Sets"),rp=i(),ys=t("p"),rc=l("Some APIs return large amounts of data that can be slow to process."),kp=i(),Un=t("p"),Ea=t("strong"),kc=l("Solution"),fc=l(": Use pagination and request only what you need."),fp=i(),Rn=t("pre"),dp=i(),Hn=t("h2"),dc=l("Best Practices for Working with APIs"),mp=i(),f=t("ol"),Pa=t("li"),hs=t("p"),Ia=t("strong"),mc=l("Read the documentation"),yc=l(": Every API is different, so always read the documentation first."),hc=i(),_a=t("li"),ws=t("p"),Aa=t("strong"),wc=l("Use try/catch blocks"),gc=l(": Always handle potential errors in your API calls."),vc=i(),Ta=t("li"),gs=t("p"),ba=t("strong"),Ec=l("Validate user input"),Pc=l(": Never trust user input; validate it before sending to an API."),Ic=i(),xa=t("li"),vs=t("p"),Sa=t("strong"),_c=l("Hide API keys"),Ac=l(": Never expose API keys in frontend code. Use environment variables and backend proxies."),Tc=i(),La=t("li"),Es=t("p"),qa=t("strong"),bc=l("Implement caching"),xc=l(": Reduce API calls by caching responses when appropriate."),Sc=i(),Ua=t("li"),Ps=t("p"),Ra=t("strong"),Lc=l("Use loading states"),qc=l(": Show loading indicators while waiting for API responses."),Uc=i(),Ha=t("li"),Is=t("p"),ja=t("strong"),Rc=l("Handle offline scenarios"),Hc=l(": Implement offline fallbacks when possible."),jc=i(),Ca=t("li"),_s=t("p"),Oa=t("strong"),Cc=l("Monitor API usage"),Oc=l(": Keep track of your API usage to avoid hitting rate limits."),yp=i(),jn=t("h2"),Dc=l("Conclusion"),hp=i(),As=t("p"),Wc=l("APIs are the backbone of modern web applications, allowing you to leverage external services and data sources. By understanding how to make different types of requests, handle responses, and implement proper error handling, you’ll be well-equipped to build robust applications that communicate effectively with APIs."),wp=i(),Ts=t("p"),Nc=l("Remember these key points:"),gp=i(),m=t("ul"),Da=t("li"),Mc=l("APIs allow different applications to communicate with each other"),Gc=i(),Wa=t("li"),Bc=l("RESTful APIs use standard HTTP methods (GET, POST, PUT, DELETE)"),Fc=i(),Cn=t("li"),$c=l("The "),Na=t("code"),Jc=l("fetch()"),Kc=l(" API and Axios are common tools for making API requests"),Yc=i(),Ma=t("li"),Qc=l("Always handle errors and edge cases in your API calls"),zc=i(),Ga=t("li"),Vc=l("Implement authentication when required by the API"),Xc=i(),Ba=t("li"),Zc=l("Use best practices like caching and input validation"),vp=i(),bs=t("p"),nl=l("With these fundamentals, you’re ready to start integrating APIs into your web applications and unlocking a world of possibilities."),Ep=i(),On=t("h2"),sl=l("Further Resources"),Pp=i(),v=t("ul"),Fa=t("li"),Dn=t("a"),al=l("MDN Web Docs: Using Fetch"),tl=i(),$a=t("li"),Wn=t("a"),pl=l("Axios Documentation"),el=i(),xs=t("li"),Nn=t("a"),ol=l("JSON Placeholder"),cl=l(" - Free fake API for testing"),ll=i(),Ss=t("li"),Mn=t("a"),ul=l("Public APIs"),il=l(" - A collection of free APIs for various purposes"),this.h()},l(n){S=p(n,"H1",{id:!0});var o=e(S);Up=u(o,"Understanding API Requests for Beginners: A Practical Guide"),o.forEach(s),Ja=r(n),O=p(n,"H2",{id:!0});var Ul=e(O);Rp=u(Ul,"Introduction"),Ul.forEach(s),Ka=r(n),Gn=p(n,"P",{});var Rl=e(Gn);Hp=u(Rl,"In modern web development, APIs (Application Programming Interfaces) are essential for connecting your application to external services, databases, or other parts of your own application. Whether you’re building a weather app that needs forecast data, a social media dashboard that displays posts, or an e-commerce site that processes payments, you’ll need to understand how to work with APIs."),Rl.forEach(s),Ya=r(n),Bn=p(n,"P",{});var Hl=e(Bn);jp=u(Hl,"This guide will break down API concepts in a beginner-friendly way, with practical examples you can start using right away."),Hl.forEach(s),Qa=r(n),D=p(n,"H2",{id:!0});var jl=e(D);Cp=u(jl,"What is an API?"),jl.forEach(s),za=r(n),Fn=p(n,"P",{});var Cl=e(Fn);Op=u(Cl,"An API is like a messenger that takes your request, tells a system what you want to do, and then returns the system’s response back to you. It’s a set of rules that allows different software applications to communicate with each other."),Cl.forEach(s),Va=r(n),$n=p(n,"P",{});var Ol=e($n);Dp=u(Ol,"Think of an API as a waiter in a restaurant:"),Ol.forEach(s),Xa=r(n),h=p(n,"OL",{});var b=e(h);Hs=p(b,"LI",{});var Dl=e(Hs);Wp=u(Dl,"You (the client) look at the menu and decide what you want"),Dl.forEach(s),Np=r(b),js=p(b,"LI",{});var Wl=e(js);Mp=u(Wl,"You tell the waiter (the API) your order"),Wl.forEach(s),Gp=r(b),Cs=p(b,"LI",{});var Nl=e(Cs);Bp=u(Nl,"The waiter takes your order to the kitchen (the server)"),Nl.forEach(s),Fp=r(b),Os=p(b,"LI",{});var Ml=e(Os);$p=u(Ml,"The kitchen prepares your meal"),Ml.forEach(s),Jp=r(b),Ds=p(b,"LI",{});var Gl=e(Ds);Kp=u(Gl,"The waiter brings back your food (the response)"),Gl.forEach(s),b.forEach(s),Za=r(n),Jn=p(n,"P",{});var Bl=e(Jn);Yp=u(Bl,"In web development, APIs typically operate over HTTP, and the data is usually formatted as JSON (JavaScript Object Notation)."),Bl.forEach(s),nt=r(n),W=p(n,"H2",{id:!0});var Fl=e(W);Qp=u(Fl,"Types of APIs You’ll Encounter"),Fl.forEach(s),st=r(n),N=p(n,"H3",{id:!0});var $l=e(N);zp=u($l,"RESTful APIs"),$l.forEach(s),at=r(n),Kn=p(n,"P",{});var Jl=e(Kn);Vp=u(Jl,"REST (Representational State Transfer) is the most common architecture for web APIs. RESTful APIs use standard HTTP methods:"),Jl.forEach(s),tt=r(n),g=p(n,"UL",{});var H=e(g);Yn=p(H,"LI",{});var rl=e(Yn);Ws=p(rl,"STRONG",{});var Kl=e(Ws);Xp=u(Kl,"GET"),Kl.forEach(s),Zp=u(rl,": Retrieve data (like getting a list of users)"),rl.forEach(s),ne=r(H),Qn=p(H,"LI",{});var kl=e(Qn);Ns=p(kl,"STRONG",{});var Yl=e(Ns);se=u(Yl,"POST"),Yl.forEach(s),ae=u(kl,": Create data (like creating a new user)"),kl.forEach(s),te=r(H),zn=p(H,"LI",{});var fl=e(zn);Ms=p(fl,"STRONG",{});var Ql=e(Ms);pe=u(Ql,"PUT/PATCH"),Ql.forEach(s),ee=u(fl,": Update data (like updating a user’s information)"),fl.forEach(s),oe=r(H),Vn=p(H,"LI",{});var dl=e(Vn);Gs=p(dl,"STRONG",{});var zl=e(Gs);ce=u(zl,"DELETE"),zl.forEach(s),le=u(dl,": Remove data (like deleting a user)"),dl.forEach(s),H.forEach(s),pt=r(n),M=p(n,"H3",{id:!0});var Vl=e(M);ue=u(Vl,"GraphQL APIs"),Vl.forEach(s),et=r(n),Xn=p(n,"P",{});var Xl=e(Xn);ie=u(Xl,"GraphQL is a newer approach that allows clients to request exactly the data they need in a single request, reducing over-fetching or under-fetching of data."),Xl.forEach(s),ot=r(n),G=p(n,"H3",{id:!0});var Zl=e(G);re=u(Zl,"SOAP APIs"),Zl.forEach(s),ct=r(n),Zn=p(n,"P",{});var nu=e(Zn);ke=u(nu,"SOAP (Simple Object Access Protocol) is an older, more rigid protocol that uses XML for message format."),nu.forEach(s),lt=r(n),ns=p(n,"P",{});var su=e(ns);fe=u(su,"For this guide, we’ll focus on RESTful APIs since they’re the most common and beginner-friendly."),su.forEach(s),ut=r(n),B=p(n,"H2",{id:!0});var au=e(B);de=u(au,"Making Your First API Request"),au.forEach(s),it=r(n),q=p(n,"P",{});var Ip=e(q);me=u(Ip,"Let’s start with a simple example: fetching data from a public API. We’ll use the JavaScript "),Bs=p(Ip,"CODE",{});var tu=e(Bs);ye=u(tu,"fetch()"),tu.forEach(s),he=u(Ip," function, which is built into modern browsers."),Ip.forEach(s),rt=r(n),F=p(n,"H3",{id:!0});var pu=e(F);we=u(pu,"Using fetch() for GET Requests"),pu.forEach(s),kt=r(n),$=p(n,"PRE",{class:!0});var rr=e($);rr.forEach(s),ft=r(n),ss=p(n,"P",{});var eu=e(ss);ge=u(eu,"Let’s break down what’s happening:"),eu.forEach(s),dt=r(n),d=p(n,"OL",{});var E=e(d);J=p(E,"LI",{});var _p=e(J);ve=u(_p,"We call "),Fs=p(_p,"CODE",{});var ou=e(Fs);Ee=u(ou,"fetch()"),ou.forEach(s),Pe=u(_p," with the URL of the API endpoint"),_p.forEach(s),Ie=r(E),$s=p(E,"LI",{});var cu=e($s);_e=u(cu,"The API processes our request and returns a response"),cu.forEach(s),Ae=r(E),Js=p(E,"LI",{});var lu=e(Js);Te=u(lu,"We check if the response was successful (status code 200-299)"),lu.forEach(s),be=r(E),Ks=p(E,"LI",{});var uu=e(Ks);xe=u(uu,"We parse the JSON data from the response"),uu.forEach(s),Se=r(E),Ys=p(E,"LI",{});var iu=e(Ys);Le=u(iu,"We log the data to the console"),iu.forEach(s),qe=r(E),Qs=p(E,"LI",{});var ru=e(Qs);Ue=u(ru,"If any errors occur, we catch and log them"),ru.forEach(s),E.forEach(s),mt=r(n),K=p(n,"H3",{id:!0});var ku=e(K);Re=u(ku,"Using async/await for Cleaner Code"),ku.forEach(s),yt=r(n),U=p(n,"P",{});var Ap=e(U);He=u(Ap,"The same request can be written using "),zs=p(Ap,"CODE",{});var fu=e(zs);je=u(fu,"async/await"),fu.forEach(s),Ce=u(Ap," for more readable code:"),Ap.forEach(s),ht=r(n),Y=p(n,"PRE",{class:!0});var kr=e(Y);kr.forEach(s),wt=r(n),as=p(n,"P",{});var du=e(as);Oe=u(du,"This approach is often preferred because it looks more like synchronous code, making it easier to read and understand."),du.forEach(s),gt=r(n),Q=p(n,"H2",{id:!0});var mu=e(Q);De=u(mu,"Understanding API Endpoints"),mu.forEach(s),vt=r(n),ts=p(n,"P",{});var yu=e(ts);We=u(yu,"An API endpoint is a specific URL that represents an object or collection of objects. For example:"),yu.forEach(s),Et=r(n),_=p(n,"UL",{});var Ls=e(_);ps=p(Ls,"LI",{});var ml=e(ps);Vs=p(ml,"CODE",{});var hu=e(Vs);Ne=u(hu,"https://api.example.com/users"),hu.forEach(s),Me=u(ml," might return all users"),ml.forEach(s),Ge=r(Ls),es=p(Ls,"LI",{});var yl=e(es);Xs=p(yl,"CODE",{});var wu=e(Xs);Be=u(wu,"https://api.example.com/users/123"),wu.forEach(s),Fe=u(yl," might return the user with ID 123"),yl.forEach(s),$e=r(Ls),os=p(Ls,"LI",{});var hl=e(os);Zs=p(hl,"CODE",{});var gu=e(Zs);Je=u(gu,"https://api.example.com/users/123/posts"),gu.forEach(s),Ke=u(hl," might return all posts by user 123"),hl.forEach(s),Ls.forEach(s),Pt=r(n),cs=p(n,"P",{});var vu=e(cs);Ye=u(vu,"Most APIs have documentation that lists all available endpoints and explains what data they expect and return."),vu.forEach(s),It=r(n),z=p(n,"H2",{id:!0});var Eu=e(z);Qe=u(Eu,"Making Different Types of Requests"),Eu.forEach(s),_t=r(n),V=p(n,"H3",{id:!0});var Pu=e(V);ze=u(Pu,"POST Request (Creating Data)"),Pu.forEach(s),At=r(n),X=p(n,"PRE",{class:!0});var fr=e(X);fr.forEach(s),Tt=r(n),Z=p(n,"H3",{id:!0});var Iu=e(Z);Ve=u(Iu,"PUT Request (Updating Data)"),Iu.forEach(s),bt=r(n),nn=p(n,"PRE",{class:!0});var dr=e(nn);dr.forEach(s),xt=r(n),sn=p(n,"H3",{id:!0});var _u=e(sn);Xe=u(_u,"DELETE Request (Removing Data)"),_u.forEach(s),St=r(n),an=p(n,"PRE",{class:!0});var mr=e(an);mr.forEach(s),Lt=r(n),tn=p(n,"H2",{id:!0});var Au=e(tn);Ze=u(Au,"Working with Query Parameters"),Au.forEach(s),qt=r(n),ls=p(n,"P",{});var Tu=e(ls);no=u(Tu,"Many APIs allow you to filter, sort, or paginate results using query parameters in the URL:"),Tu.forEach(s),Ut=r(n),pn=p(n,"PRE",{class:!0});var yr=e(pn);yr.forEach(s),Rt=r(n),en=p(n,"H2",{id:!0});var bu=e(en);so=u(bu,"Using Axios: A Popular Alternative to Fetch"),bu.forEach(s),Ht=r(n),R=p(n,"P",{});var Tp=e(R);ao=u(Tp,"While "),na=p(Tp,"CODE",{});var xu=e(na);to=u(xu,"fetch()"),xu.forEach(s),po=u(Tp," is built into browsers, many developers prefer using Axios, a library that simplifies API requests and provides additional features:"),Tp.forEach(s),jt=r(n),on=p(n,"PRE",{class:!0});var hr=e(on);hr.forEach(s),Ct=r(n),us=p(n,"P",{});var Su=e(us);eo=u(Su,"Benefits of Axios over fetch:"),Su.forEach(s),Ot=r(n),w=p(n,"UL",{});var x=e(w);sa=p(x,"LI",{});var Lu=e(sa);oo=u(Lu,"Automatic JSON parsing"),Lu.forEach(s),co=r(x),aa=p(x,"LI",{});var qu=e(aa);lo=u(qu,"Better error handling"),qu.forEach(s),uo=r(x),ta=p(x,"LI",{});var Uu=e(ta);io=u(Uu,"Request cancellation"),Uu.forEach(s),ro=r(x),pa=p(x,"LI",{});var Ru=e(pa);ko=u(Ru,"Timeout configuration"),Ru.forEach(s),fo=r(x),ea=p(x,"LI",{});var Hu=e(ea);mo=u(Hu,"Works in both browser and Node.js environments"),Hu.forEach(s),x.forEach(s),Dt=r(n),cn=p(n,"H2",{id:!0});var ju=e(cn);yo=u(ju,"Understanding API Authentication"),ju.forEach(s),Wt=r(n),is=p(n,"P",{});var Cu=e(is);ho=u(Cu,"Many APIs require authentication to verify who’s making the request. Here are common authentication methods:"),Cu.forEach(s),Nt=r(n),ln=p(n,"H3",{id:!0});var Ou=e(ln);wo=u(Ou,"API Keys"),Ou.forEach(s),Mt=r(n),un=p(n,"PRE",{class:!0});var wr=e(un);wr.forEach(s),Gt=r(n),rn=p(n,"H3",{id:!0});var Du=e(rn);go=u(Du,"Bearer Tokens (OAuth, JWT)"),Du.forEach(s),Bt=r(n),kn=p(n,"PRE",{class:!0});var gr=e(kn);gr.forEach(s),Ft=r(n),fn=p(n,"H2",{id:!0});var Wu=e(fn);vo=u(Wu,"Handling API Responses"),Wu.forEach(s),$t=r(n),dn=p(n,"H3",{id:!0});var Nu=e(dn);Eo=u(Nu,"Status Codes"),Nu.forEach(s),Jt=r(n),rs=p(n,"P",{});var Mu=e(rs);Po=u(Mu,"Understanding HTTP status codes is crucial when working with APIs:"),Mu.forEach(s),Kt=r(n),A=p(n,"UL",{});var qs=e(A);mn=p(qs,"LI",{});var bp=e(mn);oa=p(bp,"STRONG",{});var Gu=e(oa);Io=u(Gu,"2xx (Success)"),Gu.forEach(s),_o=u(bp,": The request was successful"),L=p(bp,"UL",{});var Us=e(L);ca=p(Us,"LI",{});var Bu=e(ca);Ao=u(Bu,"200: OK"),Bu.forEach(s),To=r(Us),la=p(Us,"LI",{});var Fu=e(la);bo=u(Fu,"201: Created"),Fu.forEach(s),xo=r(Us),ua=p(Us,"LI",{});var $u=e(ua);So=u($u,"204: No Content"),$u.forEach(s),Us.forEach(s),bp.forEach(s),Lo=r(qs),yn=p(qs,"LI",{});var xp=e(yn);ia=p(xp,"STRONG",{});var Ju=e(ia);qo=u(Ju,"4xx (Client Error)"),Ju.forEach(s),Uo=u(xp,": The request contains bad syntax or cannot be fulfilled"),I=p(xp,"UL",{});var j=e(I);ra=p(j,"LI",{});var Ku=e(ra);Ro=u(Ku,"400: Bad Request"),Ku.forEach(s),Ho=r(j),ka=p(j,"LI",{});var Yu=e(ka);jo=u(Yu,"401: Unauthorized"),Yu.forEach(s),Co=r(j),fa=p(j,"LI",{});var Qu=e(fa);Oo=u(Qu,"403: Forbidden"),Qu.forEach(s),Do=r(j),da=p(j,"LI",{});var zu=e(da);Wo=u(zu,"404: Not Found"),zu.forEach(s),j.forEach(s),xp.forEach(s),No=r(qs),hn=p(qs,"LI",{});var Sp=e(hn);ma=p(Sp,"STRONG",{});var Vu=e(ma);Mo=u(Vu,"5xx (Server Error)"),Vu.forEach(s),Go=u(Sp,": The server failed to fulfill a valid request"),wn=p(Sp,"UL",{});var Lp=e(wn);ya=p(Lp,"LI",{});var Xu=e(ya);Bo=u(Xu,"500: Internal Server Error"),Xu.forEach(s),Fo=r(Lp),ha=p(Lp,"LI",{});var Zu=e(ha);$o=u(Zu,"503: Service Unavailable"),Zu.forEach(s),Lp.forEach(s),Sp.forEach(s),qs.forEach(s),Yt=r(n),gn=p(n,"H3",{id:!0});var ni=e(gn);Jo=u(ni,"Error Handling"),ni.forEach(s),Qt=r(n),ks=p(n,"P",{});var si=e(ks);Ko=u(si,"Proper error handling improves user experience:"),si.forEach(s),zt=r(n),vn=p(n,"PRE",{class:!0});var vr=e(vn);vr.forEach(s),Vt=r(n),En=p(n,"H2",{id:!0});var ai=e(En);Yo=u(ai,"Practical Example: Building a Weather App"),ai.forEach(s),Xt=r(n),fs=p(n,"P",{});var ti=e(fs);Qo=u(ti,"Let’s put everything together in a practical example - a simple weather app:"),ti.forEach(s),Zt=r(n),Pn=p(n,"PRE",{class:!0});var Er=e(Pn);Er.forEach(s),np=r(n),T=p(n,"P",{});var Rs=e(T);zo=u(Rs,"To use this example, you’ll need to sign up for a free API key from "),In=p(Rs,"A",{href:!0,rel:!0});var pi=e(In);Vo=u(pi,"WeatherAPI.com"),pi.forEach(s),Xo=u(Rs," and replace "),wa=p(Rs,"CODE",{});var ei=e(wa);Zo=u(ei,"'your_api_key_here'"),ei.forEach(s),nc=u(Rs," with your actual key."),Rs.forEach(s),sp=r(n),_n=p(n,"H2",{id:!0});var oi=e(_n);sc=u(oi,"Common API Challenges and Solutions"),oi.forEach(s),ap=r(n),An=p(n,"H3",{id:!0});var ci=e(An);ac=u(ci,"Challenge 1: CORS Issues"),ci.forEach(s),tp=r(n),ds=p(n,"P",{});var li=e(ds);tc=u(li,"Cross-Origin Resource Sharing (CORS) errors occur when your frontend code tries to request data from an API hosted on a different domain."),li.forEach(s),pp=r(n),Tn=p(n,"P",{});var wl=e(Tn);ga=p(wl,"STRONG",{});var ui=e(ga);pc=u(ui,"Solution"),ui.forEach(s),ec=u(wl,": Use APIs that support CORS, or create a backend proxy to make the request for you."),wl.forEach(s),ep=r(n),bn=p(n,"PRE",{class:!0});var Pr=e(bn);Pr.forEach(s),op=r(n),xn=p(n,"H3",{id:!0});var ii=e(xn);oc=u(ii,"Challenge 2: Rate Limiting"),ii.forEach(s),cp=r(n),ms=p(n,"P",{});var ri=e(ms);cc=u(ri,"Many APIs limit how many requests you can make in a certain timeframe."),ri.forEach(s),lp=r(n),Sn=p(n,"P",{});var gl=e(Sn);va=p(gl,"STRONG",{});var ki=e(va);lc=u(ki,"Solution"),ki.forEach(s),uc=u(gl,": Implement caching and throttling."),gl.forEach(s),up=r(n),Ln=p(n,"PRE",{class:!0});var Ir=e(Ln);Ir.forEach(s),ip=r(n),qn=p(n,"H3",{id:!0});var fi=e(qn);ic=u(fi,"Challenge 3: Large Data Sets"),fi.forEach(s),rp=r(n),ys=p(n,"P",{});var di=e(ys);rc=u(di,"Some APIs return large amounts of data that can be slow to process."),di.forEach(s),kp=r(n),Un=p(n,"P",{});var vl=e(Un);Ea=p(vl,"STRONG",{});var mi=e(Ea);kc=u(mi,"Solution"),mi.forEach(s),fc=u(vl,": Use pagination and request only what you need."),vl.forEach(s),fp=r(n),Rn=p(n,"PRE",{class:!0});var _r=e(Rn);_r.forEach(s),dp=r(n),Hn=p(n,"H2",{id:!0});var yi=e(Hn);dc=u(yi,"Best Practices for Working with APIs"),yi.forEach(s),mp=r(n),f=p(n,"OL",{});var y=e(f);Pa=p(y,"LI",{});var hi=e(Pa);hs=p(hi,"P",{});var El=e(hs);Ia=p(El,"STRONG",{});var wi=e(Ia);mc=u(wi,"Read the documentation"),wi.forEach(s),yc=u(El,": Every API is different, so always read the documentation first."),El.forEach(s),hi.forEach(s),hc=r(y),_a=p(y,"LI",{});var gi=e(_a);ws=p(gi,"P",{});var Pl=e(ws);Aa=p(Pl,"STRONG",{});var vi=e(Aa);wc=u(vi,"Use try/catch blocks"),vi.forEach(s),gc=u(Pl,": Always handle potential errors in your API calls."),Pl.forEach(s),gi.forEach(s),vc=r(y),Ta=p(y,"LI",{});var Ei=e(Ta);gs=p(Ei,"P",{});var Il=e(gs);ba=p(Il,"STRONG",{});var Pi=e(ba);Ec=u(Pi,"Validate user input"),Pi.forEach(s),Pc=u(Il,": Never trust user input; validate it before sending to an API."),Il.forEach(s),Ei.forEach(s),Ic=r(y),xa=p(y,"LI",{});var Ii=e(xa);vs=p(Ii,"P",{});var _l=e(vs);Sa=p(_l,"STRONG",{});var _i=e(Sa);_c=u(_i,"Hide API keys"),_i.forEach(s),Ac=u(_l,": Never expose API keys in frontend code. Use environment variables and backend proxies."),_l.forEach(s),Ii.forEach(s),Tc=r(y),La=p(y,"LI",{});var Ai=e(La);Es=p(Ai,"P",{});var Al=e(Es);qa=p(Al,"STRONG",{});var Ti=e(qa);bc=u(Ti,"Implement caching"),Ti.forEach(s),xc=u(Al,": Reduce API calls by caching responses when appropriate."),Al.forEach(s),Ai.forEach(s),Sc=r(y),Ua=p(y,"LI",{});var bi=e(Ua);Ps=p(bi,"P",{});var Tl=e(Ps);Ra=p(Tl,"STRONG",{});var xi=e(Ra);Lc=u(xi,"Use loading states"),xi.forEach(s),qc=u(Tl,": Show loading indicators while waiting for API responses."),Tl.forEach(s),bi.forEach(s),Uc=r(y),Ha=p(y,"LI",{});var Si=e(Ha);Is=p(Si,"P",{});var bl=e(Is);ja=p(bl,"STRONG",{});var Li=e(ja);Rc=u(Li,"Handle offline scenarios"),Li.forEach(s),Hc=u(bl,": Implement offline fallbacks when possible."),bl.forEach(s),Si.forEach(s),jc=r(y),Ca=p(y,"LI",{});var qi=e(Ca);_s=p(qi,"P",{});var xl=e(_s);Oa=p(xl,"STRONG",{});var Ui=e(Oa);Cc=u(Ui,"Monitor API usage"),Ui.forEach(s),Oc=u(xl,": Keep track of your API usage to avoid hitting rate limits."),xl.forEach(s),qi.forEach(s),y.forEach(s),yp=r(n),jn=p(n,"H2",{id:!0});var Ri=e(jn);Dc=u(Ri,"Conclusion"),Ri.forEach(s),hp=r(n),As=p(n,"P",{});var Hi=e(As);Wc=u(Hi,"APIs are the backbone of modern web applications, allowing you to leverage external services and data sources. By understanding how to make different types of requests, handle responses, and implement proper error handling, you’ll be well-equipped to build robust applications that communicate effectively with APIs."),Hi.forEach(s),wp=r(n),Ts=p(n,"P",{});var ji=e(Ts);Nc=u(ji,"Remember these key points:"),ji.forEach(s),gp=r(n),m=p(n,"UL",{});var P=e(m);Da=p(P,"LI",{});var Ci=e(Da);Mc=u(Ci,"APIs allow different applications to communicate with each other"),Ci.forEach(s),Gc=r(P),Wa=p(P,"LI",{});var Oi=e(Wa);Bc=u(Oi,"RESTful APIs use standard HTTP methods (GET, POST, PUT, DELETE)"),Oi.forEach(s),Fc=r(P),Cn=p(P,"LI",{});var qp=e(Cn);$c=u(qp,"The "),Na=p(qp,"CODE",{});var Di=e(Na);Jc=u(Di,"fetch()"),Di.forEach(s),Kc=u(qp," API and Axios are common tools for making API requests"),qp.forEach(s),Yc=r(P),Ma=p(P,"LI",{});var Wi=e(Ma);Qc=u(Wi,"Always handle errors and edge cases in your API calls"),Wi.forEach(s),zc=r(P),Ga=p(P,"LI",{});var Ni=e(Ga);Vc=u(Ni,"Implement authentication when required by the API"),Ni.forEach(s),Xc=r(P),Ba=p(P,"LI",{});var Mi=e(Ba);Zc=u(Mi,"Use best practices like caching and input validation"),Mi.forEach(s),P.forEach(s),vp=r(n),bs=p(n,"P",{});var Gi=e(bs);nl=u(Gi,"With these fundamentals, you’re ready to start integrating APIs into your web applications and unlocking a world of possibilities."),Gi.forEach(s),Ep=r(n),On=p(n,"H2",{id:!0});var Bi=e(On);sl=u(Bi,"Further Resources"),Bi.forEach(s),Pp=r(n),v=p(n,"UL",{});var C=e(v);Fa=p(C,"LI",{});var Fi=e(Fa);Dn=p(Fi,"A",{href:!0,rel:!0});var $i=e(Dn);al=u($i,"MDN Web Docs: Using Fetch"),$i.forEach(s),Fi.forEach(s),tl=r(C),$a=p(C,"LI",{});var Ji=e($a);Wn=p(Ji,"A",{href:!0,rel:!0});var Ki=e(Wn);pl=u(Ki,"Axios Documentation"),Ki.forEach(s),Ji.forEach(s),el=r(C),xs=p(C,"LI",{});var Sl=e(xs);Nn=p(Sl,"A",{href:!0,rel:!0});var Yi=e(Nn);ol=u(Yi,"JSON Placeholder"),Yi.forEach(s),cl=u(Sl," - Free fake API for testing"),Sl.forEach(s),ll=r(C),Ss=p(C,"LI",{});var Ll=e(Ss);Mn=p(Ll,"A",{href:!0,rel:!0});var Qi=e(Mn);ul=u(Qi,"Public APIs"),Qi.forEach(s),il=u(Ll," - A collection of free APIs for various purposes"),Ll.forEach(s),C.forEach(s),this.h()},h(){k(S,"id","understanding-api-requests-for-beginners-a-practical-guide"),k(O,"id","introduction"),k(D,"id","what-is-an-api"),k(W,"id","types-of-apis-youll-encounter"),k(N,"id","restful-apis"),k(M,"id","graphql-apis"),k(G,"id","soap-apis"),k(B,"id","making-your-first-api-request"),k(F,"id","using-fetch-for-get-requests"),k($,"class","language-javascript"),k(K,"id","using-asyncawait-for-cleaner-code"),k(Y,"class","language-javascript"),k(Q,"id","understanding-api-endpoints"),k(z,"id","making-different-types-of-requests"),k(V,"id","post-request-creating-data"),k(X,"class","language-javascript"),k(Z,"id","put-request-updating-data"),k(nn,"class","language-javascript"),k(sn,"id","delete-request-removing-data"),k(an,"class","language-javascript"),k(tn,"id","working-with-query-parameters"),k(pn,"class","language-javascript"),k(en,"id","using-axios-a-popular-alternative-to-fetch"),k(on,"class","language-javascript"),k(cn,"id","understanding-api-authentication"),k(ln,"id","api-keys"),k(un,"class","language-javascript"),k(rn,"id","bearer-tokens-oauth-jwt"),k(kn,"class","language-javascript"),k(fn,"id","handling-api-responses"),k(dn,"id","status-codes"),k(gn,"id","error-handling"),k(vn,"class","language-javascript"),k(En,"id","practical-example-building-a-weather-app"),k(Pn,"class","language-html"),k(In,"href","https://www.weatherapi.com/"),k(In,"rel","nofollow"),k(_n,"id","common-api-challenges-and-solutions"),k(An,"id","challenge-1-cors-issues"),k(bn,"class","language-javascript"),k(xn,"id","challenge-2-rate-limiting"),k(Ln,"class","language-javascript"),k(qn,"id","challenge-3-large-data-sets"),k(Rn,"class","language-javascript"),k(Hn,"id","best-practices-for-working-with-apis"),k(jn,"id","conclusion"),k(On,"id","further-resources"),k(Dn,"href","https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"),k(Dn,"rel","nofollow"),k(Wn,"href","https://axios-http.com/docs/intro"),k(Wn,"rel","nofollow"),k(Nn,"href","https://jsonplaceholder.typicode.com/"),k(Nn,"rel","nofollow"),k(Mn,"href","https://github.com/public-apis/public-apis"),k(Mn,"rel","nofollow")},m(n,o){c(n,S,o),a(S,Up),c(n,Ja,o),c(n,O,o),a(O,Rp),c(n,Ka,o),c(n,Gn,o),a(Gn,Hp),c(n,Ya,o),c(n,Bn,o),a(Bn,jp),c(n,Qa,o),c(n,D,o),a(D,Cp),c(n,za,o),c(n,Fn,o),a(Fn,Op),c(n,Va,o),c(n,$n,o),a($n,Dp),c(n,Xa,o),c(n,h,o),a(h,Hs),a(Hs,Wp),a(h,Np),a(h,js),a(js,Mp),a(h,Gp),a(h,Cs),a(Cs,Bp),a(h,Fp),a(h,Os),a(Os,$p),a(h,Jp),a(h,Ds),a(Ds,Kp),c(n,Za,o),c(n,Jn,o),a(Jn,Yp),c(n,nt,o),c(n,W,o),a(W,Qp),c(n,st,o),c(n,N,o),a(N,zp),c(n,at,o),c(n,Kn,o),a(Kn,Vp),c(n,tt,o),c(n,g,o),a(g,Yn),a(Yn,Ws),a(Ws,Xp),a(Yn,Zp),a(g,ne),a(g,Qn),a(Qn,Ns),a(Ns,se),a(Qn,ae),a(g,te),a(g,zn),a(zn,Ms),a(Ms,pe),a(zn,ee),a(g,oe),a(g,Vn),a(Vn,Gs),a(Gs,ce),a(Vn,le),c(n,pt,o),c(n,M,o),a(M,ue),c(n,et,o),c(n,Xn,o),a(Xn,ie),c(n,ot,o),c(n,G,o),a(G,re),c(n,ct,o),c(n,Zn,o),a(Zn,ke),c(n,lt,o),c(n,ns,o),a(ns,fe),c(n,ut,o),c(n,B,o),a(B,de),c(n,it,o),c(n,q,o),a(q,me),a(q,Bs),a(Bs,ye),a(q,he),c(n,rt,o),c(n,F,o),a(F,we),c(n,kt,o),c(n,$,o),$.innerHTML=Vi,c(n,ft,o),c(n,ss,o),a(ss,ge),c(n,dt,o),c(n,d,o),a(d,J),a(J,ve),a(J,Fs),a(Fs,Ee),a(J,Pe),a(d,Ie),a(d,$s),a($s,_e),a(d,Ae),a(d,Js),a(Js,Te),a(d,be),a(d,Ks),a(Ks,xe),a(d,Se),a(d,Ys),a(Ys,Le),a(d,qe),a(d,Qs),a(Qs,Ue),c(n,mt,o),c(n,K,o),a(K,Re),c(n,yt,o),c(n,U,o),a(U,He),a(U,zs),a(zs,je),a(U,Ce),c(n,ht,o),c(n,Y,o),Y.innerHTML=Xi,c(n,wt,o),c(n,as,o),a(as,Oe),c(n,gt,o),c(n,Q,o),a(Q,De),c(n,vt,o),c(n,ts,o),a(ts,We),c(n,Et,o),c(n,_,o),a(_,ps),a(ps,Vs),a(Vs,Ne),a(ps,Me),a(_,Ge),a(_,es),a(es,Xs),a(Xs,Be),a(es,Fe),a(_,$e),a(_,os),a(os,Zs),a(Zs,Je),a(os,Ke),c(n,Pt,o),c(n,cs,o),a(cs,Ye),c(n,It,o),c(n,z,o),a(z,Qe),c(n,_t,o),c(n,V,o),a(V,ze),c(n,At,o),c(n,X,o),X.innerHTML=Zi,c(n,Tt,o),c(n,Z,o),a(Z,Ve),c(n,bt,o),c(n,nn,o),nn.innerHTML=nr,c(n,xt,o),c(n,sn,o),a(sn,Xe),c(n,St,o),c(n,an,o),an.innerHTML=sr,c(n,Lt,o),c(n,tn,o),a(tn,Ze),c(n,qt,o),c(n,ls,o),a(ls,no),c(n,Ut,o),c(n,pn,o),pn.innerHTML=ar,c(n,Rt,o),c(n,en,o),a(en,so),c(n,Ht,o),c(n,R,o),a(R,ao),a(R,na),a(na,to),a(R,po),c(n,jt,o),c(n,on,o),on.innerHTML=tr,c(n,Ct,o),c(n,us,o),a(us,eo),c(n,Ot,o),c(n,w,o),a(w,sa),a(sa,oo),a(w,co),a(w,aa),a(aa,lo),a(w,uo),a(w,ta),a(ta,io),a(w,ro),a(w,pa),a(pa,ko),a(w,fo),a(w,ea),a(ea,mo),c(n,Dt,o),c(n,cn,o),a(cn,yo),c(n,Wt,o),c(n,is,o),a(is,ho),c(n,Nt,o),c(n,ln,o),a(ln,wo),c(n,Mt,o),c(n,un,o),un.innerHTML=pr,c(n,Gt,o),c(n,rn,o),a(rn,go),c(n,Bt,o),c(n,kn,o),kn.innerHTML=er,c(n,Ft,o),c(n,fn,o),a(fn,vo),c(n,$t,o),c(n,dn,o),a(dn,Eo),c(n,Jt,o),c(n,rs,o),a(rs,Po),c(n,Kt,o),c(n,A,o),a(A,mn),a(mn,oa),a(oa,Io),a(mn,_o),a(mn,L),a(L,ca),a(ca,Ao),a(L,To),a(L,la),a(la,bo),a(L,xo),a(L,ua),a(ua,So),a(A,Lo),a(A,yn),a(yn,ia),a(ia,qo),a(yn,Uo),a(yn,I),a(I,ra),a(ra,Ro),a(I,Ho),a(I,ka),a(ka,jo),a(I,Co),a(I,fa),a(fa,Oo),a(I,Do),a(I,da),a(da,Wo),a(A,No),a(A,hn),a(hn,ma),a(ma,Mo),a(hn,Go),a(hn,wn),a(wn,ya),a(ya,Bo),a(wn,Fo),a(wn,ha),a(ha,$o),c(n,Yt,o),c(n,gn,o),a(gn,Jo),c(n,Qt,o),c(n,ks,o),a(ks,Ko),c(n,zt,o),c(n,vn,o),vn.innerHTML=or,c(n,Vt,o),c(n,En,o),a(En,Yo),c(n,Xt,o),c(n,fs,o),a(fs,Qo),c(n,Zt,o),c(n,Pn,o),Pn.innerHTML=cr,c(n,np,o),c(n,T,o),a(T,zo),a(T,In),a(In,Vo),a(T,Xo),a(T,wa),a(wa,Zo),a(T,nc),c(n,sp,o),c(n,_n,o),a(_n,sc),c(n,ap,o),c(n,An,o),a(An,ac),c(n,tp,o),c(n,ds,o),a(ds,tc),c(n,pp,o),c(n,Tn,o),a(Tn,ga),a(ga,pc),a(Tn,ec),c(n,ep,o),c(n,bn,o),bn.innerHTML=lr,c(n,op,o),c(n,xn,o),a(xn,oc),c(n,cp,o),c(n,ms,o),a(ms,cc),c(n,lp,o),c(n,Sn,o),a(Sn,va),a(va,lc),a(Sn,uc),c(n,up,o),c(n,Ln,o),Ln.innerHTML=ur,c(n,ip,o),c(n,qn,o),a(qn,ic),c(n,rp,o),c(n,ys,o),a(ys,rc),c(n,kp,o),c(n,Un,o),a(Un,Ea),a(Ea,kc),a(Un,fc),c(n,fp,o),c(n,Rn,o),Rn.innerHTML=ir,c(n,dp,o),c(n,Hn,o),a(Hn,dc),c(n,mp,o),c(n,f,o),a(f,Pa),a(Pa,hs),a(hs,Ia),a(Ia,mc),a(hs,yc),a(f,hc),a(f,_a),a(_a,ws),a(ws,Aa),a(Aa,wc),a(ws,gc),a(f,vc),a(f,Ta),a(Ta,gs),a(gs,ba),a(ba,Ec),a(gs,Pc),a(f,Ic),a(f,xa),a(xa,vs),a(vs,Sa),a(Sa,_c),a(vs,Ac),a(f,Tc),a(f,La),a(La,Es),a(Es,qa),a(qa,bc),a(Es,xc),a(f,Sc),a(f,Ua),a(Ua,Ps),a(Ps,Ra),a(Ra,Lc),a(Ps,qc),a(f,Uc),a(f,Ha),a(Ha,Is),a(Is,ja),a(ja,Rc),a(Is,Hc),a(f,jc),a(f,Ca),a(Ca,_s),a(_s,Oa),a(Oa,Cc),a(_s,Oc),c(n,yp,o),c(n,jn,o),a(jn,Dc),c(n,hp,o),c(n,As,o),a(As,Wc),c(n,wp,o),c(n,Ts,o),a(Ts,Nc),c(n,gp,o),c(n,m,o),a(m,Da),a(Da,Mc),a(m,Gc),a(m,Wa),a(Wa,Bc),a(m,Fc),a(m,Cn),a(Cn,$c),a(Cn,Na),a(Na,Jc),a(Cn,Kc),a(m,Yc),a(m,Ma),a(Ma,Qc),a(m,zc),a(m,Ga),a(Ga,Vc),a(m,Xc),a(m,Ba),a(Ba,Zc),c(n,vp,o),c(n,bs,o),a(bs,nl),c(n,Ep,o),c(n,On,o),a(On,sl),c(n,Pp,o),c(n,v,o),a(v,Fa),a(Fa,Dn),a(Dn,al),a(v,tl),a(v,$a),a($a,Wn),a(Wn,pl),a(v,el),a(v,xs),a(xs,Nn),a(Nn,ol),a(xs,cl),a(v,ll),a(v,Ss),a(Ss,Mn),a(Mn,ul),a(Ss,il)},p:ql,i:ql,o:ql,d(n){n&&s(S),n&&s(Ja),n&&s(O),n&&s(Ka),n&&s(Gn),n&&s(Ya),n&&s(Bn),n&&s(Qa),n&&s(D),n&&s(za),n&&s(Fn),n&&s(Va),n&&s($n),n&&s(Xa),n&&s(h),n&&s(Za),n&&s(Jn),n&&s(nt),n&&s(W),n&&s(st),n&&s(N),n&&s(at),n&&s(Kn),n&&s(tt),n&&s(g),n&&s(pt),n&&s(M),n&&s(et),n&&s(Xn),n&&s(ot),n&&s(G),n&&s(ct),n&&s(Zn),n&&s(lt),n&&s(ns),n&&s(ut),n&&s(B),n&&s(it),n&&s(q),n&&s(rt),n&&s(F),n&&s(kt),n&&s($),n&&s(ft),n&&s(ss),n&&s(dt),n&&s(d),n&&s(mt),n&&s(K),n&&s(yt),n&&s(U),n&&s(ht),n&&s(Y),n&&s(wt),n&&s(as),n&&s(gt),n&&s(Q),n&&s(vt),n&&s(ts),n&&s(Et),n&&s(_),n&&s(Pt),n&&s(cs),n&&s(It),n&&s(z),n&&s(_t),n&&s(V),n&&s(At),n&&s(X),n&&s(Tt),n&&s(Z),n&&s(bt),n&&s(nn),n&&s(xt),n&&s(sn),n&&s(St),n&&s(an),n&&s(Lt),n&&s(tn),n&&s(qt),n&&s(ls),n&&s(Ut),n&&s(pn),n&&s(Rt),n&&s(en),n&&s(Ht),n&&s(R),n&&s(jt),n&&s(on),n&&s(Ct),n&&s(us),n&&s(Ot),n&&s(w),n&&s(Dt),n&&s(cn),n&&s(Wt),n&&s(is),n&&s(Nt),n&&s(ln),n&&s(Mt),n&&s(un),n&&s(Gt),n&&s(rn),n&&s(Bt),n&&s(kn),n&&s(Ft),n&&s(fn),n&&s($t),n&&s(dn),n&&s(Jt),n&&s(rs),n&&s(Kt),n&&s(A),n&&s(Yt),n&&s(gn),n&&s(Qt),n&&s(ks),n&&s(zt),n&&s(vn),n&&s(Vt),n&&s(En),n&&s(Xt),n&&s(fs),n&&s(Zt),n&&s(Pn),n&&s(np),n&&s(T),n&&s(sp),n&&s(_n),n&&s(ap),n&&s(An),n&&s(tp),n&&s(ds),n&&s(pp),n&&s(Tn),n&&s(ep),n&&s(bn),n&&s(op),n&&s(xn),n&&s(cp),n&&s(ms),n&&s(lp),n&&s(Sn),n&&s(up),n&&s(Ln),n&&s(ip),n&&s(qn),n&&s(rp),n&&s(ys),n&&s(kp),n&&s(Un),n&&s(fp),n&&s(Rn),n&&s(dp),n&&s(Hn),n&&s(mp),n&&s(f),n&&s(yp),n&&s(jn),n&&s(hp),n&&s(As),n&&s(wp),n&&s(Ts),n&&s(gp),n&&s(m),n&&s(vp),n&&s(bs),n&&s(Ep),n&&s(On),n&&s(Pp),n&&s(v)}}}const Lr={title:"Understanding API Requests for Beginners: A Practical Guide",description:"Learn how to work with APIs in this beginner-friendly guide. Discover what APIs are, how to make requests using fetch and axios, handle responses, and solve common API challenges with practical examples in JavaScript.",date:"2024-03-05T00:00:00.000Z",published:!0};class qr extends Ar{constructor(S){super(),Tr(this,S,null,xr,br,{})}}export{qr as default,Lr as metadata};
