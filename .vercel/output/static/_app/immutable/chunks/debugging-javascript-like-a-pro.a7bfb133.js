import{S as pu,i as lu,s as cu,k as o,q as c,a as u,l as p,m as l,r as i,h as s,c as r,n as k,b as e,C as a,K as _l}from"./index.8762ca70.js";function iu(Pi){let x,le,_a,B,ce,ga,Hn,ie,Sa,A,ue,La,On,re,xa,U,ke,Ta,jn,fe,Ia,M,Ci=`<code class="language-javascript"><span class="token comment">// ❌ Syntax Error Example</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Missing closing parenthesis</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x is 5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Pa,F,de,Ca,Rn,me,Da,q,Di=`<code class="language-javascript"><span class="token comment">// ❌ Reference Error Example</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>undefinedVariable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Variable doesn't exist</span></code>`,Ha,J,ve,Oa,Bn,ye,ja,N,Hi=`<code class="language-javascript"><span class="token comment">// ❌ Type Error Example</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span>
name<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: name.push is not a function (strings don't have a push method)</span></code>`,Ra,W,he,Ba,An,be,Aa,G,Oi=`<code class="language-javascript"><span class="token comment">// ❌ Logic Error Example</span>
<span class="token keyword">function</span> <span class="token function">calculateTotal</span><span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> quantity</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> price <span class="token operator">+</span> quantity<span class="token punctuation">;</span> <span class="token comment">// Should be price * quantity</span>
<span class="token punctuation">&#125;</span></code>`,Ua,V,Ee,Ma,_,we,Ls,_e,ge,xs,Se,Le,Fa,$,Ts,xe,qa,Un,Te,Ja,z,ji=`<code class="language-javascript"><span class="token keyword">function</span> <span class="token function">calculateDiscount</span><span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> discountPercent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Price:"</span><span class="token punctuation">,</span> price<span class="token punctuation">,</span> <span class="token string">"Discount:"</span><span class="token punctuation">,</span> discountPercent<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> discount <span class="token operator">=</span> price <span class="token operator">*</span> <span class="token punctuation">(</span>discountPercent <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Calculated discount:"</span><span class="token punctuation">,</span> discount<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> price <span class="token operator">-</span> discount<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Na,X,Is,Ie,Wa,Mn,Pe,Ga,K,Ri=`<code class="language-javascript"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"Admin"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"User"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Charlie"</span><span class="token punctuation">,</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">"User"</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Displays a nicely formatted table with columns for each property</span></code>`,Va,Z,Ps,Ce,$a,Fn,De,za,Q,Bi=`<code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myElement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Shows all properties and methods of the DOM element</span></code>`,Xa,T,Cs,He,Oe,Ds,je,Ka,qn,Re,Za,Y,Ai=`<code class="language-javascript"><span class="token keyword">function</span> <span class="token function">processUser</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Processing user: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Checking permissions..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Permission checking code</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Updating profile..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Profile update code</span>

  console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Qa,I,Hs,Be,Ae,Os,Ue,Ya,Jn,Me,nt,nn,Ui=`<code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"Array processing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> largeArray <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> processed <span class="token operator">=</span> largeArray<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"Array processing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Outputs: "Array processing: 45ms" (or however long it took)</span></code>`,st,sn,Fe,at,Nn,qe,tt,an,Je,et,Wn,Ne,ot,m,js,We,Ge,Rs,Ve,$e,Bs,ze,Xe,As,Ke,pt,tn,Ze,lt,Gn,Qe,ct,en,Mi=`<code class="language-javascript"><span class="token keyword">function</span> <span class="token function">calculateTotal</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Set a breakpoint on the next line to inspect each item</span>
    total <span class="token operator">+=</span> item<span class="token punctuation">.</span>price <span class="token operator">*</span> item<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,it,on,Ye,ut,Vn,no,rt,v,$n,Us,so,ao,to,zn,Ms,eo,oo,po,Xn,Fs,lo,co,io,Kn,qs,uo,ro,kt,pn,ko,ft,Zn,fo,dt,g,Js,mo,vo,Ns,yo,ho,E,bo,Ws,Eo,wo,Gs,_o,go,Vs,So,Lo,mt,ln,xo,vt,Qn,To,yt,cn,Io,ht,Yn,Po,bt,un,Co,Et,ns,Do,wt,rn,Fi=`<code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchUserData</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Fetching user data..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">/api/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">HTTP error! Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"User data received:"</span><span class="token punctuation">,</span> userData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> userData<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error fetching user data:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,_t,kn,Ho,gt,ss,Oo,St,P,$s,jo,Ro,zs,Bo,Lt,fn,Ao,xt,as,Uo,Tt,S,Xs,Mo,Fo,Ks,qo,Jo,ts,No,w,Zs,Wo,Go,Qs,Vo,$o,Ys,zo,Xo,na,Ko,It,dn,Zo,Pt,mn,Qo,Ct,es,Yo,Dt,vn,qi=`<code class="language-javascript"><span class="token comment">// ❌ Problem</span>
<span class="token keyword">function</span> <span class="token function">displayUserName</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// If user is undefined, this will crash</span>

<span class="token comment">// ✅ Solution: Add a check</span>
<span class="token keyword">function</span> <span class="token function">displayUserName</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"User data is missing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Even better: Use optional chaining (ES2020)</span>
<span class="token keyword">function</span> <span class="token function">displayUserName</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> user<span class="token operator">?.</span>name <span class="token operator">||</span> <span class="token string">"Guest"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ht,yn,np,Ot,os,sp,jt,hn,Ji=`<code class="language-javascript"><span class="token comment">// ❌ Problem</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"submit-button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> submitForm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// If the script runs before the button exists in the DOM, this will fail</span>

<span class="token comment">// ✅ Solution 1: Move script to end of body</span>
<span class="token comment">// &lt;script src="app.js">&lt;/script> at the end of the body tag</span>

<span class="token comment">// ✅ Solution 2: Use DOMContentLoaded</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"submit-button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> submitForm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ✅ Solution 3: Use event delegation</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token string">"submit-button"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">submitForm</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Rt,bn,ap,Bt,ps,tp,At,En,Ni=`<code class="language-javascript"><span class="token comment">// ❌ Problem: All buttons show the same number</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  button<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Button </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
  button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Button </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> clicked</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Always logs "Button 5 clicked"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ✅ Solution 1: Use let instead of var (block scope)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Now each iteration has its own 'i'</span>
  <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  button<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Button </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
  button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Button </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> clicked</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Works correctly</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ✅ Solution 2: Use a closure (for older browsers)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  button<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Button </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
  button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">buttonIndex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Button </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>buttonIndex<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> clicked</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ut,wn,ep,Mt,ls,op,Ft,f,cs,sa,pp,lp,cp,is,aa,ip,up,rp,us,ta,kp,fp,dp,rs,ea,mp,vp,yp,ks,oa,hp,bp,Ep,fs,pa,wp,_p,qt,_n,gp,Jt,gn,Sp,Nt,ds,Lp,Wt,y,la,xp,Tp,ca,Ip,Pp,ia,Cp,Dp,ua,Hp,Gt,Sn,Op,Vt,ms,jp,$t,C,vs,ra,Rp,Bp,Ap,ys,ka,Up,Mp,zt,Ln,Wi=`<code class="language-javascript"><span class="token comment">// Install ESLint</span>
<span class="token comment">// npm install eslint --save-dev</span>

<span class="token comment">// TypeScript example</span>
<span class="token keyword">function</span> <span class="token function">calculateTotal</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">price</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> number<span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    total <span class="token operator">+=</span> item<span class="token punctuation">.</span>price <span class="token operator">*</span> item<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Xt,xn,Fp,Kt,hs,qp,Zt,bs,Jp,Qt,d,Tn,Np,fa,Wp,Gp,Vp,da,$p,zp,ma,Xp,Kp,va,Zp,Qp,ya,Yp,nl,ha,sl,Yt,Es,al,ne,In,tl,se,L,ba,Pn,el,ol,Ea,Cn,pl,ll,wa,Dn,cl;return{c(){x=o("h1"),le=c("Debugging JavaScript Like a Pro: Essential Techniques for Beginners"),_a=u(),B=o("h2"),ce=c("Introduction"),ga=u(),Hn=o("p"),ie=c("If you’re new to JavaScript, you’ve probably already experienced the frustration of code that doesn’t work as expected. Debugging is the process of finding and fixing these issues, and it’s a skill that separates beginners from experienced developers. In this guide, I’ll share practical debugging techniques that will help you solve problems faster and with less stress."),Sa=u(),A=o("h2"),ue=c("Understanding JavaScript Errors"),La=u(),On=o("p"),re=c("Before we dive into debugging techniques, it’s important to understand the common types of errors you’ll encounter:"),xa=u(),U=o("h3"),ke=c("1. Syntax Errors"),Ta=u(),jn=o("p"),fe=c("These occur when your code violates JavaScript’s grammar rules. The good news is that syntax errors prevent your code from running at all, so they’re usually caught immediately."),Ia=u(),M=o("pre"),Pa=u(),F=o("h3"),de=c("2. Reference Errors"),Ca=u(),Rn=o("p"),me=c("These happen when you try to use a variable that doesn’t exist or is out of scope."),Da=u(),q=o("pre"),Ha=u(),J=o("h3"),ve=c("3. Type Errors"),Oa=u(),Bn=o("p"),ye=c("These occur when you try to perform an operation on a value of the wrong type."),ja=u(),N=o("pre"),Ra=u(),W=o("h3"),he=c("4. Logic Errors"),Ba=u(),An=o("p"),be=c("The most challenging errors to find - your code runs without throwing errors, but it doesn’t behave as expected."),Aa=u(),G=o("pre"),Ua=u(),V=o("h2"),Ee=c("Essential Console Methods for Debugging"),Ma=u(),_=o("p"),we=c("The "),Ls=o("code"),_e=c("console"),ge=c(" object provides several methods beyond just "),xs=o("code"),Se=c("console.log()"),Le=c(" that can make debugging much easier:"),Fa=u(),$=o("h3"),Ts=o("code"),xe=c("console.log()"),qa=u(),Un=o("p"),Te=c("The most basic tool, but incredibly useful. Use it to check values at different points in your code:"),Ja=u(),z=o("pre"),Na=u(),X=o("h3"),Is=o("code"),Ie=c("console.table()"),Wa=u(),Mn=o("p"),Pe=c("Perfect for visualizing arrays and objects:"),Ga=u(),K=o("pre"),Va=u(),Z=o("h3"),Ps=o("code"),Ce=c("console.dir()"),$a=u(),Fn=o("p"),De=c("Shows all properties of an object in an interactive list:"),za=u(),Q=o("pre"),Xa=u(),T=o("h3"),Cs=o("code"),He=c("console.group()"),Oe=c(" and "),Ds=o("code"),je=c("console.groupEnd()"),Ka=u(),qn=o("p"),Re=c("Organize related logs into collapsible groups:"),Za=u(),Y=o("pre"),Qa=u(),I=o("h3"),Hs=o("code"),Be=c("console.time()"),Ae=c(" and "),Os=o("code"),Ue=c("console.timeEnd()"),Ya=u(),Jn=o("p"),Me=c("Measure how long operations take:"),nt=u(),nn=o("pre"),st=u(),sn=o("h2"),Fe=c("Using Browser Developer Tools"),at=u(),Nn=o("p"),qe=c("Modern browsers come with powerful developer tools that are essential for debugging:"),tt=u(),an=o("h3"),Je=c("The Sources Panel"),et=u(),Wn=o("p"),Ne=c("This is where you’ll spend most of your debugging time:"),ot=u(),m=o("ol"),js=o("li"),We=c("Open your browser’s dev tools (F12 or right-click → Inspect)"),Ge=u(),Rs=o("li"),Ve=c("Go to the Sources panel"),$e=u(),Bs=o("li"),ze=c("Find your JavaScript file in the file navigator"),Xe=u(),As=o("li"),Ke=c("Set breakpoints by clicking on line numbers"),pt=u(),tn=o("h3"),Ze=c("Setting Breakpoints"),lt=u(),Gn=o("p"),Qe=c("Breakpoints pause code execution at specific lines, allowing you to inspect the state at that moment:"),ct=u(),en=o("pre"),it=u(),on=o("h3"),Ye=c("Stepping Through Code"),ut=u(),Vn=o("p"),no=c("Once execution is paused at a breakpoint, you can:"),rt=u(),v=o("ul"),$n=o("li"),Us=o("strong"),so=c("Step Over"),ao=c(" (F10): Execute the current line and move to the next one"),to=u(),zn=o("li"),Ms=o("strong"),eo=c("Step Into"),oo=c(" (F11): If the current line contains a function call, jump into that function"),po=u(),Xn=o("li"),Fs=o("strong"),lo=c("Step Out"),co=c(" (Shift+F11): Complete the execution of the current function and return to the caller"),io=u(),Kn=o("li"),qs=o("strong"),uo=c("Continue"),ro=c(" (F8): Resume execution until the next breakpoint"),kt=u(),pn=o("h3"),ko=c("Watch Expressions"),ft=u(),Zn=o("p"),fo=c("Add expressions to the Watch panel to monitor their values as you step through code:"),dt=u(),g=o("ol"),Js=o("li"),mo=c("In the Sources panel, find the “Watch” section"),vo=u(),Ns=o("li"),yo=c("Click the + button"),ho=u(),E=o("li"),bo=c("Enter any valid JavaScript expression (e.g., "),Ws=o("code"),Eo=c("total"),wo=c(", "),Gs=o("code"),_o=c("items.length"),go=c(", "),Vs=o("code"),So=c("item.price * item.quantity"),Lo=c(")"),mt=u(),ln=o("h3"),xo=c("The Call Stack"),vt=u(),Qn=o("p"),To=c("The call stack shows the path of function calls that led to the current point of execution. This helps you understand how your code reached a particular state."),yt=u(),cn=o("h2"),Io=c("Debugging Asynchronous Code"),ht=u(),Yn=o("p"),Po=c("Asynchronous code (like Promises, async/await, and callbacks) adds complexity to debugging:"),bt=u(),un=o("h3"),Co=c("Async/Await"),Et=u(),ns=o("p"),Do=c("Using async/await makes debugging asynchronous code much easier:"),wt=u(),rn=o("pre"),_t=u(),kn=o("h3"),Ho=c("Async Breakpoints"),gt=u(),ss=o("p"),Oo=c("In Chrome DevTools, you can set special breakpoints for async operations:"),St=u(),P=o("ol"),$s=o("li"),jo=c("In the Sources panel, find the “Event Listener Breakpoints” section"),Ro=u(),zs=o("li"),Bo=c("Expand “XHR/fetch” and check “Fetch” to pause when fetch requests occur"),Lt=u(),fn=o("h3"),Ao=c("The Network Panel"),xt=u(),as=o("p"),Uo=c("For debugging API calls and other network requests:"),Tt=u(),S=o("ol"),Xs=o("li"),Mo=c("Open the Network panel in DevTools"),Fo=u(),Ks=o("li"),qo=c("Filter by type (XHR, JS, CSS, etc.)"),Jo=u(),ts=o("li"),No=c("Click on a request to see details including:"),w=o("ul"),Zs=o("li"),Wo=c("Headers"),Go=u(),Qs=o("li"),Vo=c("Request payload"),$o=u(),Ys=o("li"),zo=c("Response data"),Xo=u(),na=o("li"),Ko=c("Timing information"),It=u(),dn=o("h2"),Zo=c("Common Debugging Scenarios and Solutions"),Pt=u(),mn=o("h3"),Qo=c("Problem 1: “Cannot read property ‘x’ of undefined”"),Ct=u(),es=o("p"),Yo=c("This common error occurs when you try to access a property on an undefined value:"),Dt=u(),vn=o("pre"),Ht=u(),yn=o("h3"),np=c("Problem 2: Event Listeners Not Working"),Ot=u(),os=o("p"),sp=c("A common issue is adding event listeners to elements that don’t exist yet:"),jt=u(),hn=o("pre"),Rt=u(),bn=o("h3"),ap=c("Problem 3: Unexpected Loop Behavior"),Bt=u(),ps=o("p"),tp=c("Loops can be tricky to debug, especially with closures:"),At=u(),En=o("pre"),Ut=u(),wn=o("h2"),ep=c("Debugging Workflow: A Step-by-Step Approach"),Mt=u(),ls=o("p"),op=c("When you encounter a bug, follow these steps:"),Ft=u(),f=o("ol"),cs=o("li"),sa=o("strong"),pp=c("Reproduce the bug"),lp=c(": Make sure you can consistently trigger the issue"),cp=u(),is=o("li"),aa=o("strong"),ip=c("Isolate the problem"),up=c(": Narrow down where the bug is occurring"),rp=u(),us=o("li"),ta=o("strong"),kp=c("Inspect the state"),fp=c(": Use console.log or breakpoints to examine variables"),dp=u(),rs=o("li"),ea=o("strong"),mp=c("Form a hypothesis"),vp=c(": Based on the evidence, guess what’s causing the issue"),yp=u(),ks=o("li"),oa=o("strong"),hp=c("Test your fix"),bp=c(": Make a change and see if it resolves the problem"),Ep=u(),fs=o("li"),pa=o("strong"),wp=c("Verify the solution"),_p=c(": Make sure your fix doesn’t introduce new bugs"),qt=u(),_n=o("h2"),gp=c("Debugging Tools Beyond the Browser"),Jt=u(),gn=o("h3"),Sp=c("VS Code Debugger"),Nt=u(),ds=o("p"),Lp=c("VS Code has an excellent JavaScript debugger:"),Wt=u(),y=o("ol"),la=o("li"),xp=c("Click the Debug icon in the sidebar"),Tp=u(),ca=o("li"),Ip=c("Create a launch.json file (VS Code will help with this)"),Pp=u(),ia=o("li"),Cp=c("Set breakpoints by clicking in the gutter next to line numbers"),Dp=u(),ua=o("li"),Hp=c("Start debugging with F5"),Gt=u(),Sn=o("h3"),Op=c("Linters and Type Checking"),Vt=u(),ms=o("p"),jp=c("Prevent bugs before they happen:"),$t=u(),C=o("ul"),vs=o("li"),ra=o("strong"),Rp=c("ESLint"),Bp=c(": Catches potential issues and enforces code style"),Ap=u(),ys=o("li"),ka=o("strong"),Up=c("TypeScript"),Mp=c(": Adds static typing to JavaScript, catching type errors at compile time"),zt=u(),Ln=o("pre"),Xt=u(),xn=o("h2"),Fp=c("Conclusion"),Kt=u(),hs=o("p"),qp=c("Debugging is an essential skill that improves with practice. By understanding common error types, mastering console methods, and learning to use browser developer tools effectively, you’ll be able to solve problems more efficiently."),Zt=u(),bs=o("p"),Jp=c("Remember these key points:"),Qt=u(),d=o("ul"),Tn=o("li"),Np=c("Use "),fa=o("code"),Wp=c("console.log()"),Gp=c(" and other console methods strategically"),Vp=u(),da=o("li"),$p=c("Set breakpoints to pause execution and inspect state"),zp=u(),ma=o("li"),Xp=c("Learn to read error messages carefully"),Kp=u(),va=o("li"),Zp=c("Add checks for undefined or null values"),Qp=u(),ya=o("li"),Yp=c("Use async/await to make asynchronous code easier to debug"),nl=u(),ha=o("li"),sl=c("Follow a systematic debugging workflow"),Yt=u(),Es=o("p"),al=c("With these techniques in your toolkit, you’ll spend less time frustrated by bugs and more time building great JavaScript applications."),ne=u(),In=o("h2"),tl=c("Further Resources"),se=u(),L=o("ul"),ba=o("li"),Pn=o("a"),el=c("Chrome DevTools Documentation"),ol=u(),Ea=o("li"),Cn=o("a"),pl=c("MDN: JavaScript Debugging"),ll=u(),wa=o("li"),Dn=o("a"),cl=c("JavaScript Errors and How to Fix Them"),this.h()},l(n){x=p(n,"H1",{id:!0});var t=l(x);le=i(t,"Debugging JavaScript Like a Pro: Essential Techniques for Beginners"),t.forEach(s),_a=r(n),B=p(n,"H2",{id:!0});var gl=l(B);ce=i(gl,"Introduction"),gl.forEach(s),ga=r(n),Hn=p(n,"P",{});var Sl=l(Hn);ie=i(Sl,"If you’re new to JavaScript, you’ve probably already experienced the frustration of code that doesn’t work as expected. Debugging is the process of finding and fixing these issues, and it’s a skill that separates beginners from experienced developers. In this guide, I’ll share practical debugging techniques that will help you solve problems faster and with less stress."),Sl.forEach(s),Sa=r(n),A=p(n,"H2",{id:!0});var Ll=l(A);ue=i(Ll,"Understanding JavaScript Errors"),Ll.forEach(s),La=r(n),On=p(n,"P",{});var xl=l(On);re=i(xl,"Before we dive into debugging techniques, it’s important to understand the common types of errors you’ll encounter:"),xl.forEach(s),xa=r(n),U=p(n,"H3",{id:!0});var Tl=l(U);ke=i(Tl,"1. Syntax Errors"),Tl.forEach(s),Ta=r(n),jn=p(n,"P",{});var Il=l(jn);fe=i(Il,"These occur when your code violates JavaScript’s grammar rules. The good news is that syntax errors prevent your code from running at all, so they’re usually caught immediately."),Il.forEach(s),Ia=r(n),M=p(n,"PRE",{class:!0});var Gi=l(M);Gi.forEach(s),Pa=r(n),F=p(n,"H3",{id:!0});var Pl=l(F);de=i(Pl,"2. Reference Errors"),Pl.forEach(s),Ca=r(n),Rn=p(n,"P",{});var Cl=l(Rn);me=i(Cl,"These happen when you try to use a variable that doesn’t exist or is out of scope."),Cl.forEach(s),Da=r(n),q=p(n,"PRE",{class:!0});var Vi=l(q);Vi.forEach(s),Ha=r(n),J=p(n,"H3",{id:!0});var Dl=l(J);ve=i(Dl,"3. Type Errors"),Dl.forEach(s),Oa=r(n),Bn=p(n,"P",{});var Hl=l(Bn);ye=i(Hl,"These occur when you try to perform an operation on a value of the wrong type."),Hl.forEach(s),ja=r(n),N=p(n,"PRE",{class:!0});var $i=l(N);$i.forEach(s),Ra=r(n),W=p(n,"H3",{id:!0});var Ol=l(W);he=i(Ol,"4. Logic Errors"),Ol.forEach(s),Ba=r(n),An=p(n,"P",{});var jl=l(An);be=i(jl,"The most challenging errors to find - your code runs without throwing errors, but it doesn’t behave as expected."),jl.forEach(s),Aa=r(n),G=p(n,"PRE",{class:!0});var zi=l(G);zi.forEach(s),Ua=r(n),V=p(n,"H2",{id:!0});var Rl=l(V);Ee=i(Rl,"Essential Console Methods for Debugging"),Rl.forEach(s),Ma=r(n),_=p(n,"P",{});var ws=l(_);we=i(ws,"The "),Ls=p(ws,"CODE",{});var Bl=l(Ls);_e=i(Bl,"console"),Bl.forEach(s),ge=i(ws," object provides several methods beyond just "),xs=p(ws,"CODE",{});var Al=l(xs);Se=i(Al,"console.log()"),Al.forEach(s),Le=i(ws," that can make debugging much easier:"),ws.forEach(s),Fa=r(n),$=p(n,"H3",{id:!0});var Ul=l($);Ts=p(Ul,"CODE",{});var Ml=l(Ts);xe=i(Ml,"console.log()"),Ml.forEach(s),Ul.forEach(s),qa=r(n),Un=p(n,"P",{});var Fl=l(Un);Te=i(Fl,"The most basic tool, but incredibly useful. Use it to check values at different points in your code:"),Fl.forEach(s),Ja=r(n),z=p(n,"PRE",{class:!0});var Xi=l(z);Xi.forEach(s),Na=r(n),X=p(n,"H3",{id:!0});var ql=l(X);Is=p(ql,"CODE",{});var Jl=l(Is);Ie=i(Jl,"console.table()"),Jl.forEach(s),ql.forEach(s),Wa=r(n),Mn=p(n,"P",{});var Nl=l(Mn);Pe=i(Nl,"Perfect for visualizing arrays and objects:"),Nl.forEach(s),Ga=r(n),K=p(n,"PRE",{class:!0});var Ki=l(K);Ki.forEach(s),Va=r(n),Z=p(n,"H3",{id:!0});var Wl=l(Z);Ps=p(Wl,"CODE",{});var Gl=l(Ps);Ce=i(Gl,"console.dir()"),Gl.forEach(s),Wl.forEach(s),$a=r(n),Fn=p(n,"P",{});var Vl=l(Fn);De=i(Vl,"Shows all properties of an object in an interactive list:"),Vl.forEach(s),za=r(n),Q=p(n,"PRE",{class:!0});var Zi=l(Q);Zi.forEach(s),Xa=r(n),T=p(n,"H3",{id:!0});var ae=l(T);Cs=p(ae,"CODE",{});var $l=l(Cs);He=i($l,"console.group()"),$l.forEach(s),Oe=i(ae," and "),Ds=p(ae,"CODE",{});var zl=l(Ds);je=i(zl,"console.groupEnd()"),zl.forEach(s),ae.forEach(s),Ka=r(n),qn=p(n,"P",{});var Xl=l(qn);Re=i(Xl,"Organize related logs into collapsible groups:"),Xl.forEach(s),Za=r(n),Y=p(n,"PRE",{class:!0});var Qi=l(Y);Qi.forEach(s),Qa=r(n),I=p(n,"H3",{id:!0});var te=l(I);Hs=p(te,"CODE",{});var Kl=l(Hs);Be=i(Kl,"console.time()"),Kl.forEach(s),Ae=i(te," and "),Os=p(te,"CODE",{});var Zl=l(Os);Ue=i(Zl,"console.timeEnd()"),Zl.forEach(s),te.forEach(s),Ya=r(n),Jn=p(n,"P",{});var Ql=l(Jn);Me=i(Ql,"Measure how long operations take:"),Ql.forEach(s),nt=r(n),nn=p(n,"PRE",{class:!0});var Yi=l(nn);Yi.forEach(s),st=r(n),sn=p(n,"H2",{id:!0});var Yl=l(sn);Fe=i(Yl,"Using Browser Developer Tools"),Yl.forEach(s),at=r(n),Nn=p(n,"P",{});var nc=l(Nn);qe=i(nc,"Modern browsers come with powerful developer tools that are essential for debugging:"),nc.forEach(s),tt=r(n),an=p(n,"H3",{id:!0});var sc=l(an);Je=i(sc,"The Sources Panel"),sc.forEach(s),et=r(n),Wn=p(n,"P",{});var ac=l(Wn);Ne=i(ac,"This is where you’ll spend most of your debugging time:"),ac.forEach(s),ot=r(n),m=p(n,"OL",{});var D=l(m);js=p(D,"LI",{});var tc=l(js);We=i(tc,"Open your browser’s dev tools (F12 or right-click → Inspect)"),tc.forEach(s),Ge=r(D),Rs=p(D,"LI",{});var ec=l(Rs);Ve=i(ec,"Go to the Sources panel"),ec.forEach(s),$e=r(D),Bs=p(D,"LI",{});var oc=l(Bs);ze=i(oc,"Find your JavaScript file in the file navigator"),oc.forEach(s),Xe=r(D),As=p(D,"LI",{});var pc=l(As);Ke=i(pc,"Set breakpoints by clicking on line numbers"),pc.forEach(s),D.forEach(s),pt=r(n),tn=p(n,"H3",{id:!0});var lc=l(tn);Ze=i(lc,"Setting Breakpoints"),lc.forEach(s),lt=r(n),Gn=p(n,"P",{});var cc=l(Gn);Qe=i(cc,"Breakpoints pause code execution at specific lines, allowing you to inspect the state at that moment:"),cc.forEach(s),ct=r(n),en=p(n,"PRE",{class:!0});var nu=l(en);nu.forEach(s),it=r(n),on=p(n,"H3",{id:!0});var ic=l(on);Ye=i(ic,"Stepping Through Code"),ic.forEach(s),ut=r(n),Vn=p(n,"P",{});var uc=l(Vn);no=i(uc,"Once execution is paused at a breakpoint, you can:"),uc.forEach(s),rt=r(n),v=p(n,"UL",{});var H=l(v);$n=p(H,"LI",{});var il=l($n);Us=p(il,"STRONG",{});var rc=l(Us);so=i(rc,"Step Over"),rc.forEach(s),ao=i(il," (F10): Execute the current line and move to the next one"),il.forEach(s),to=r(H),zn=p(H,"LI",{});var ul=l(zn);Ms=p(ul,"STRONG",{});var kc=l(Ms);eo=i(kc,"Step Into"),kc.forEach(s),oo=i(ul," (F11): If the current line contains a function call, jump into that function"),ul.forEach(s),po=r(H),Xn=p(H,"LI",{});var rl=l(Xn);Fs=p(rl,"STRONG",{});var fc=l(Fs);lo=i(fc,"Step Out"),fc.forEach(s),co=i(rl," (Shift+F11): Complete the execution of the current function and return to the caller"),rl.forEach(s),io=r(H),Kn=p(H,"LI",{});var kl=l(Kn);qs=p(kl,"STRONG",{});var dc=l(qs);uo=i(dc,"Continue"),dc.forEach(s),ro=i(kl," (F8): Resume execution until the next breakpoint"),kl.forEach(s),H.forEach(s),kt=r(n),pn=p(n,"H3",{id:!0});var mc=l(pn);ko=i(mc,"Watch Expressions"),mc.forEach(s),ft=r(n),Zn=p(n,"P",{});var vc=l(Zn);fo=i(vc,"Add expressions to the Watch panel to monitor their values as you step through code:"),vc.forEach(s),dt=r(n),g=p(n,"OL",{});var _s=l(g);Js=p(_s,"LI",{});var yc=l(Js);mo=i(yc,"In the Sources panel, find the “Watch” section"),yc.forEach(s),vo=r(_s),Ns=p(_s,"LI",{});var hc=l(Ns);yo=i(hc,"Click the + button"),hc.forEach(s),ho=r(_s),E=p(_s,"LI",{});var O=l(E);bo=i(O,"Enter any valid JavaScript expression (e.g., "),Ws=p(O,"CODE",{});var bc=l(Ws);Eo=i(bc,"total"),bc.forEach(s),wo=i(O,", "),Gs=p(O,"CODE",{});var Ec=l(Gs);_o=i(Ec,"items.length"),Ec.forEach(s),go=i(O,", "),Vs=p(O,"CODE",{});var wc=l(Vs);So=i(wc,"item.price * item.quantity"),wc.forEach(s),Lo=i(O,")"),O.forEach(s),_s.forEach(s),mt=r(n),ln=p(n,"H3",{id:!0});var _c=l(ln);xo=i(_c,"The Call Stack"),_c.forEach(s),vt=r(n),Qn=p(n,"P",{});var gc=l(Qn);To=i(gc,"The call stack shows the path of function calls that led to the current point of execution. This helps you understand how your code reached a particular state."),gc.forEach(s),yt=r(n),cn=p(n,"H2",{id:!0});var Sc=l(cn);Io=i(Sc,"Debugging Asynchronous Code"),Sc.forEach(s),ht=r(n),Yn=p(n,"P",{});var Lc=l(Yn);Po=i(Lc,"Asynchronous code (like Promises, async/await, and callbacks) adds complexity to debugging:"),Lc.forEach(s),bt=r(n),un=p(n,"H3",{id:!0});var xc=l(un);Co=i(xc,"Async/Await"),xc.forEach(s),Et=r(n),ns=p(n,"P",{});var Tc=l(ns);Do=i(Tc,"Using async/await makes debugging asynchronous code much easier:"),Tc.forEach(s),wt=r(n),rn=p(n,"PRE",{class:!0});var su=l(rn);su.forEach(s),_t=r(n),kn=p(n,"H3",{id:!0});var Ic=l(kn);Ho=i(Ic,"Async Breakpoints"),Ic.forEach(s),gt=r(n),ss=p(n,"P",{});var Pc=l(ss);Oo=i(Pc,"In Chrome DevTools, you can set special breakpoints for async operations:"),Pc.forEach(s),St=r(n),P=p(n,"OL",{});var ee=l(P);$s=p(ee,"LI",{});var Cc=l($s);jo=i(Cc,"In the Sources panel, find the “Event Listener Breakpoints” section"),Cc.forEach(s),Ro=r(ee),zs=p(ee,"LI",{});var Dc=l(zs);Bo=i(Dc,"Expand “XHR/fetch” and check “Fetch” to pause when fetch requests occur"),Dc.forEach(s),ee.forEach(s),Lt=r(n),fn=p(n,"H3",{id:!0});var Hc=l(fn);Ao=i(Hc,"The Network Panel"),Hc.forEach(s),xt=r(n),as=p(n,"P",{});var Oc=l(as);Uo=i(Oc,"For debugging API calls and other network requests:"),Oc.forEach(s),Tt=r(n),S=p(n,"OL",{});var gs=l(S);Xs=p(gs,"LI",{});var jc=l(Xs);Mo=i(jc,"Open the Network panel in DevTools"),jc.forEach(s),Fo=r(gs),Ks=p(gs,"LI",{});var Rc=l(Ks);qo=i(Rc,"Filter by type (XHR, JS, CSS, etc.)"),Rc.forEach(s),Jo=r(gs),ts=p(gs,"LI",{});var fl=l(ts);No=i(fl,"Click on a request to see details including:"),w=p(fl,"UL",{});var j=l(w);Zs=p(j,"LI",{});var Bc=l(Zs);Wo=i(Bc,"Headers"),Bc.forEach(s),Go=r(j),Qs=p(j,"LI",{});var Ac=l(Qs);Vo=i(Ac,"Request payload"),Ac.forEach(s),$o=r(j),Ys=p(j,"LI",{});var Uc=l(Ys);zo=i(Uc,"Response data"),Uc.forEach(s),Xo=r(j),na=p(j,"LI",{});var Mc=l(na);Ko=i(Mc,"Timing information"),Mc.forEach(s),j.forEach(s),fl.forEach(s),gs.forEach(s),It=r(n),dn=p(n,"H2",{id:!0});var Fc=l(dn);Zo=i(Fc,"Common Debugging Scenarios and Solutions"),Fc.forEach(s),Pt=r(n),mn=p(n,"H3",{id:!0});var qc=l(mn);Qo=i(qc,"Problem 1: “Cannot read property ‘x’ of undefined”"),qc.forEach(s),Ct=r(n),es=p(n,"P",{});var Jc=l(es);Yo=i(Jc,"This common error occurs when you try to access a property on an undefined value:"),Jc.forEach(s),Dt=r(n),vn=p(n,"PRE",{class:!0});var au=l(vn);au.forEach(s),Ht=r(n),yn=p(n,"H3",{id:!0});var Nc=l(yn);np=i(Nc,"Problem 2: Event Listeners Not Working"),Nc.forEach(s),Ot=r(n),os=p(n,"P",{});var Wc=l(os);sp=i(Wc,"A common issue is adding event listeners to elements that don’t exist yet:"),Wc.forEach(s),jt=r(n),hn=p(n,"PRE",{class:!0});var tu=l(hn);tu.forEach(s),Rt=r(n),bn=p(n,"H3",{id:!0});var Gc=l(bn);ap=i(Gc,"Problem 3: Unexpected Loop Behavior"),Gc.forEach(s),Bt=r(n),ps=p(n,"P",{});var Vc=l(ps);tp=i(Vc,"Loops can be tricky to debug, especially with closures:"),Vc.forEach(s),At=r(n),En=p(n,"PRE",{class:!0});var eu=l(En);eu.forEach(s),Ut=r(n),wn=p(n,"H2",{id:!0});var $c=l(wn);ep=i($c,"Debugging Workflow: A Step-by-Step Approach"),$c.forEach(s),Mt=r(n),ls=p(n,"P",{});var zc=l(ls);op=i(zc,"When you encounter a bug, follow these steps:"),zc.forEach(s),Ft=r(n),f=p(n,"OL",{});var h=l(f);cs=p(h,"LI",{});var dl=l(cs);sa=p(dl,"STRONG",{});var Xc=l(sa);pp=i(Xc,"Reproduce the bug"),Xc.forEach(s),lp=i(dl,": Make sure you can consistently trigger the issue"),dl.forEach(s),cp=r(h),is=p(h,"LI",{});var ml=l(is);aa=p(ml,"STRONG",{});var Kc=l(aa);ip=i(Kc,"Isolate the problem"),Kc.forEach(s),up=i(ml,": Narrow down where the bug is occurring"),ml.forEach(s),rp=r(h),us=p(h,"LI",{});var vl=l(us);ta=p(vl,"STRONG",{});var Zc=l(ta);kp=i(Zc,"Inspect the state"),Zc.forEach(s),fp=i(vl,": Use console.log or breakpoints to examine variables"),vl.forEach(s),dp=r(h),rs=p(h,"LI",{});var yl=l(rs);ea=p(yl,"STRONG",{});var Qc=l(ea);mp=i(Qc,"Form a hypothesis"),Qc.forEach(s),vp=i(yl,": Based on the evidence, guess what’s causing the issue"),yl.forEach(s),yp=r(h),ks=p(h,"LI",{});var hl=l(ks);oa=p(hl,"STRONG",{});var Yc=l(oa);hp=i(Yc,"Test your fix"),Yc.forEach(s),bp=i(hl,": Make a change and see if it resolves the problem"),hl.forEach(s),Ep=r(h),fs=p(h,"LI",{});var bl=l(fs);pa=p(bl,"STRONG",{});var ni=l(pa);wp=i(ni,"Verify the solution"),ni.forEach(s),_p=i(bl,": Make sure your fix doesn’t introduce new bugs"),bl.forEach(s),h.forEach(s),qt=r(n),_n=p(n,"H2",{id:!0});var si=l(_n);gp=i(si,"Debugging Tools Beyond the Browser"),si.forEach(s),Jt=r(n),gn=p(n,"H3",{id:!0});var ai=l(gn);Sp=i(ai,"VS Code Debugger"),ai.forEach(s),Nt=r(n),ds=p(n,"P",{});var ti=l(ds);Lp=i(ti,"VS Code has an excellent JavaScript debugger:"),ti.forEach(s),Wt=r(n),y=p(n,"OL",{});var R=l(y);la=p(R,"LI",{});var ei=l(la);xp=i(ei,"Click the Debug icon in the sidebar"),ei.forEach(s),Tp=r(R),ca=p(R,"LI",{});var oi=l(ca);Ip=i(oi,"Create a launch.json file (VS Code will help with this)"),oi.forEach(s),Pp=r(R),ia=p(R,"LI",{});var pi=l(ia);Cp=i(pi,"Set breakpoints by clicking in the gutter next to line numbers"),pi.forEach(s),Dp=r(R),ua=p(R,"LI",{});var li=l(ua);Hp=i(li,"Start debugging with F5"),li.forEach(s),R.forEach(s),Gt=r(n),Sn=p(n,"H3",{id:!0});var ci=l(Sn);Op=i(ci,"Linters and Type Checking"),ci.forEach(s),Vt=r(n),ms=p(n,"P",{});var ii=l(ms);jp=i(ii,"Prevent bugs before they happen:"),ii.forEach(s),$t=r(n),C=p(n,"UL",{});var oe=l(C);vs=p(oe,"LI",{});var El=l(vs);ra=p(El,"STRONG",{});var ui=l(ra);Rp=i(ui,"ESLint"),ui.forEach(s),Bp=i(El,": Catches potential issues and enforces code style"),El.forEach(s),Ap=r(oe),ys=p(oe,"LI",{});var wl=l(ys);ka=p(wl,"STRONG",{});var ri=l(ka);Up=i(ri,"TypeScript"),ri.forEach(s),Mp=i(wl,": Adds static typing to JavaScript, catching type errors at compile time"),wl.forEach(s),oe.forEach(s),zt=r(n),Ln=p(n,"PRE",{class:!0});var ou=l(Ln);ou.forEach(s),Xt=r(n),xn=p(n,"H2",{id:!0});var ki=l(xn);Fp=i(ki,"Conclusion"),ki.forEach(s),Kt=r(n),hs=p(n,"P",{});var fi=l(hs);qp=i(fi,"Debugging is an essential skill that improves with practice. By understanding common error types, mastering console methods, and learning to use browser developer tools effectively, you’ll be able to solve problems more efficiently."),fi.forEach(s),Zt=r(n),bs=p(n,"P",{});var di=l(bs);Jp=i(di,"Remember these key points:"),di.forEach(s),Qt=r(n),d=p(n,"UL",{});var b=l(d);Tn=p(b,"LI",{});var pe=l(Tn);Np=i(pe,"Use "),fa=p(pe,"CODE",{});var mi=l(fa);Wp=i(mi,"console.log()"),mi.forEach(s),Gp=i(pe," and other console methods strategically"),pe.forEach(s),Vp=r(b),da=p(b,"LI",{});var vi=l(da);$p=i(vi,"Set breakpoints to pause execution and inspect state"),vi.forEach(s),zp=r(b),ma=p(b,"LI",{});var yi=l(ma);Xp=i(yi,"Learn to read error messages carefully"),yi.forEach(s),Kp=r(b),va=p(b,"LI",{});var hi=l(va);Zp=i(hi,"Add checks for undefined or null values"),hi.forEach(s),Qp=r(b),ya=p(b,"LI",{});var bi=l(ya);Yp=i(bi,"Use async/await to make asynchronous code easier to debug"),bi.forEach(s),nl=r(b),ha=p(b,"LI",{});var Ei=l(ha);sl=i(Ei,"Follow a systematic debugging workflow"),Ei.forEach(s),b.forEach(s),Yt=r(n),Es=p(n,"P",{});var wi=l(Es);al=i(wi,"With these techniques in your toolkit, you’ll spend less time frustrated by bugs and more time building great JavaScript applications."),wi.forEach(s),ne=r(n),In=p(n,"H2",{id:!0});var _i=l(In);tl=i(_i,"Further Resources"),_i.forEach(s),se=r(n),L=p(n,"UL",{});var Ss=l(L);ba=p(Ss,"LI",{});var gi=l(ba);Pn=p(gi,"A",{href:!0,rel:!0});var Si=l(Pn);el=i(Si,"Chrome DevTools Documentation"),Si.forEach(s),gi.forEach(s),ol=r(Ss),Ea=p(Ss,"LI",{});var Li=l(Ea);Cn=p(Li,"A",{href:!0,rel:!0});var xi=l(Cn);pl=i(xi,"MDN: JavaScript Debugging"),xi.forEach(s),Li.forEach(s),ll=r(Ss),wa=p(Ss,"LI",{});var Ti=l(wa);Dn=p(Ti,"A",{href:!0,rel:!0});var Ii=l(Dn);cl=i(Ii,"JavaScript Errors and How to Fix Them"),Ii.forEach(s),Ti.forEach(s),Ss.forEach(s),this.h()},h(){k(x,"id","debugging-javascript-like-a-pro-essential-techniques-for-beginners"),k(B,"id","introduction"),k(A,"id","understanding-javascript-errors"),k(U,"id","1-syntax-errors"),k(M,"class","language-javascript"),k(F,"id","2-reference-errors"),k(q,"class","language-javascript"),k(J,"id","3-type-errors"),k(N,"class","language-javascript"),k(W,"id","4-logic-errors"),k(G,"class","language-javascript"),k(V,"id","essential-console-methods-for-debugging"),k($,"id","consolelog"),k(z,"class","language-javascript"),k(X,"id","consoletable"),k(K,"class","language-javascript"),k(Z,"id","consoledir"),k(Q,"class","language-javascript"),k(T,"id","consolegroup-and-consolegroupend"),k(Y,"class","language-javascript"),k(I,"id","consoletime-and-consoletimeend"),k(nn,"class","language-javascript"),k(sn,"id","using-browser-developer-tools"),k(an,"id","the-sources-panel"),k(tn,"id","setting-breakpoints"),k(en,"class","language-javascript"),k(on,"id","stepping-through-code"),k(pn,"id","watch-expressions"),k(ln,"id","the-call-stack"),k(cn,"id","debugging-asynchronous-code"),k(un,"id","asyncawait"),k(rn,"class","language-javascript"),k(kn,"id","async-breakpoints"),k(fn,"id","the-network-panel"),k(dn,"id","common-debugging-scenarios-and-solutions"),k(mn,"id","problem-1-cannot-read-property-x-of-undefined"),k(vn,"class","language-javascript"),k(yn,"id","problem-2-event-listeners-not-working"),k(hn,"class","language-javascript"),k(bn,"id","problem-3-unexpected-loop-behavior"),k(En,"class","language-javascript"),k(wn,"id","debugging-workflow-a-step-by-step-approach"),k(_n,"id","debugging-tools-beyond-the-browser"),k(gn,"id","vs-code-debugger"),k(Sn,"id","linters-and-type-checking"),k(Ln,"class","language-javascript"),k(xn,"id","conclusion"),k(In,"id","further-resources"),k(Pn,"href","https://developers.google.com/web/tools/chrome-devtools/"),k(Pn,"rel","nofollow"),k(Cn,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Debugging"),k(Cn,"rel","nofollow"),k(Dn,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors"),k(Dn,"rel","nofollow")},m(n,t){e(n,x,t),a(x,le),e(n,_a,t),e(n,B,t),a(B,ce),e(n,ga,t),e(n,Hn,t),a(Hn,ie),e(n,Sa,t),e(n,A,t),a(A,ue),e(n,La,t),e(n,On,t),a(On,re),e(n,xa,t),e(n,U,t),a(U,ke),e(n,Ta,t),e(n,jn,t),a(jn,fe),e(n,Ia,t),e(n,M,t),M.innerHTML=Ci,e(n,Pa,t),e(n,F,t),a(F,de),e(n,Ca,t),e(n,Rn,t),a(Rn,me),e(n,Da,t),e(n,q,t),q.innerHTML=Di,e(n,Ha,t),e(n,J,t),a(J,ve),e(n,Oa,t),e(n,Bn,t),a(Bn,ye),e(n,ja,t),e(n,N,t),N.innerHTML=Hi,e(n,Ra,t),e(n,W,t),a(W,he),e(n,Ba,t),e(n,An,t),a(An,be),e(n,Aa,t),e(n,G,t),G.innerHTML=Oi,e(n,Ua,t),e(n,V,t),a(V,Ee),e(n,Ma,t),e(n,_,t),a(_,we),a(_,Ls),a(Ls,_e),a(_,ge),a(_,xs),a(xs,Se),a(_,Le),e(n,Fa,t),e(n,$,t),a($,Ts),a(Ts,xe),e(n,qa,t),e(n,Un,t),a(Un,Te),e(n,Ja,t),e(n,z,t),z.innerHTML=ji,e(n,Na,t),e(n,X,t),a(X,Is),a(Is,Ie),e(n,Wa,t),e(n,Mn,t),a(Mn,Pe),e(n,Ga,t),e(n,K,t),K.innerHTML=Ri,e(n,Va,t),e(n,Z,t),a(Z,Ps),a(Ps,Ce),e(n,$a,t),e(n,Fn,t),a(Fn,De),e(n,za,t),e(n,Q,t),Q.innerHTML=Bi,e(n,Xa,t),e(n,T,t),a(T,Cs),a(Cs,He),a(T,Oe),a(T,Ds),a(Ds,je),e(n,Ka,t),e(n,qn,t),a(qn,Re),e(n,Za,t),e(n,Y,t),Y.innerHTML=Ai,e(n,Qa,t),e(n,I,t),a(I,Hs),a(Hs,Be),a(I,Ae),a(I,Os),a(Os,Ue),e(n,Ya,t),e(n,Jn,t),a(Jn,Me),e(n,nt,t),e(n,nn,t),nn.innerHTML=Ui,e(n,st,t),e(n,sn,t),a(sn,Fe),e(n,at,t),e(n,Nn,t),a(Nn,qe),e(n,tt,t),e(n,an,t),a(an,Je),e(n,et,t),e(n,Wn,t),a(Wn,Ne),e(n,ot,t),e(n,m,t),a(m,js),a(js,We),a(m,Ge),a(m,Rs),a(Rs,Ve),a(m,$e),a(m,Bs),a(Bs,ze),a(m,Xe),a(m,As),a(As,Ke),e(n,pt,t),e(n,tn,t),a(tn,Ze),e(n,lt,t),e(n,Gn,t),a(Gn,Qe),e(n,ct,t),e(n,en,t),en.innerHTML=Mi,e(n,it,t),e(n,on,t),a(on,Ye),e(n,ut,t),e(n,Vn,t),a(Vn,no),e(n,rt,t),e(n,v,t),a(v,$n),a($n,Us),a(Us,so),a($n,ao),a(v,to),a(v,zn),a(zn,Ms),a(Ms,eo),a(zn,oo),a(v,po),a(v,Xn),a(Xn,Fs),a(Fs,lo),a(Xn,co),a(v,io),a(v,Kn),a(Kn,qs),a(qs,uo),a(Kn,ro),e(n,kt,t),e(n,pn,t),a(pn,ko),e(n,ft,t),e(n,Zn,t),a(Zn,fo),e(n,dt,t),e(n,g,t),a(g,Js),a(Js,mo),a(g,vo),a(g,Ns),a(Ns,yo),a(g,ho),a(g,E),a(E,bo),a(E,Ws),a(Ws,Eo),a(E,wo),a(E,Gs),a(Gs,_o),a(E,go),a(E,Vs),a(Vs,So),a(E,Lo),e(n,mt,t),e(n,ln,t),a(ln,xo),e(n,vt,t),e(n,Qn,t),a(Qn,To),e(n,yt,t),e(n,cn,t),a(cn,Io),e(n,ht,t),e(n,Yn,t),a(Yn,Po),e(n,bt,t),e(n,un,t),a(un,Co),e(n,Et,t),e(n,ns,t),a(ns,Do),e(n,wt,t),e(n,rn,t),rn.innerHTML=Fi,e(n,_t,t),e(n,kn,t),a(kn,Ho),e(n,gt,t),e(n,ss,t),a(ss,Oo),e(n,St,t),e(n,P,t),a(P,$s),a($s,jo),a(P,Ro),a(P,zs),a(zs,Bo),e(n,Lt,t),e(n,fn,t),a(fn,Ao),e(n,xt,t),e(n,as,t),a(as,Uo),e(n,Tt,t),e(n,S,t),a(S,Xs),a(Xs,Mo),a(S,Fo),a(S,Ks),a(Ks,qo),a(S,Jo),a(S,ts),a(ts,No),a(ts,w),a(w,Zs),a(Zs,Wo),a(w,Go),a(w,Qs),a(Qs,Vo),a(w,$o),a(w,Ys),a(Ys,zo),a(w,Xo),a(w,na),a(na,Ko),e(n,It,t),e(n,dn,t),a(dn,Zo),e(n,Pt,t),e(n,mn,t),a(mn,Qo),e(n,Ct,t),e(n,es,t),a(es,Yo),e(n,Dt,t),e(n,vn,t),vn.innerHTML=qi,e(n,Ht,t),e(n,yn,t),a(yn,np),e(n,Ot,t),e(n,os,t),a(os,sp),e(n,jt,t),e(n,hn,t),hn.innerHTML=Ji,e(n,Rt,t),e(n,bn,t),a(bn,ap),e(n,Bt,t),e(n,ps,t),a(ps,tp),e(n,At,t),e(n,En,t),En.innerHTML=Ni,e(n,Ut,t),e(n,wn,t),a(wn,ep),e(n,Mt,t),e(n,ls,t),a(ls,op),e(n,Ft,t),e(n,f,t),a(f,cs),a(cs,sa),a(sa,pp),a(cs,lp),a(f,cp),a(f,is),a(is,aa),a(aa,ip),a(is,up),a(f,rp),a(f,us),a(us,ta),a(ta,kp),a(us,fp),a(f,dp),a(f,rs),a(rs,ea),a(ea,mp),a(rs,vp),a(f,yp),a(f,ks),a(ks,oa),a(oa,hp),a(ks,bp),a(f,Ep),a(f,fs),a(fs,pa),a(pa,wp),a(fs,_p),e(n,qt,t),e(n,_n,t),a(_n,gp),e(n,Jt,t),e(n,gn,t),a(gn,Sp),e(n,Nt,t),e(n,ds,t),a(ds,Lp),e(n,Wt,t),e(n,y,t),a(y,la),a(la,xp),a(y,Tp),a(y,ca),a(ca,Ip),a(y,Pp),a(y,ia),a(ia,Cp),a(y,Dp),a(y,ua),a(ua,Hp),e(n,Gt,t),e(n,Sn,t),a(Sn,Op),e(n,Vt,t),e(n,ms,t),a(ms,jp),e(n,$t,t),e(n,C,t),a(C,vs),a(vs,ra),a(ra,Rp),a(vs,Bp),a(C,Ap),a(C,ys),a(ys,ka),a(ka,Up),a(ys,Mp),e(n,zt,t),e(n,Ln,t),Ln.innerHTML=Wi,e(n,Xt,t),e(n,xn,t),a(xn,Fp),e(n,Kt,t),e(n,hs,t),a(hs,qp),e(n,Zt,t),e(n,bs,t),a(bs,Jp),e(n,Qt,t),e(n,d,t),a(d,Tn),a(Tn,Np),a(Tn,fa),a(fa,Wp),a(Tn,Gp),a(d,Vp),a(d,da),a(da,$p),a(d,zp),a(d,ma),a(ma,Xp),a(d,Kp),a(d,va),a(va,Zp),a(d,Qp),a(d,ya),a(ya,Yp),a(d,nl),a(d,ha),a(ha,sl),e(n,Yt,t),e(n,Es,t),a(Es,al),e(n,ne,t),e(n,In,t),a(In,tl),e(n,se,t),e(n,L,t),a(L,ba),a(ba,Pn),a(Pn,el),a(L,ol),a(L,Ea),a(Ea,Cn),a(Cn,pl),a(L,ll),a(L,wa),a(wa,Dn),a(Dn,cl)},p:_l,i:_l,o:_l,d(n){n&&s(x),n&&s(_a),n&&s(B),n&&s(ga),n&&s(Hn),n&&s(Sa),n&&s(A),n&&s(La),n&&s(On),n&&s(xa),n&&s(U),n&&s(Ta),n&&s(jn),n&&s(Ia),n&&s(M),n&&s(Pa),n&&s(F),n&&s(Ca),n&&s(Rn),n&&s(Da),n&&s(q),n&&s(Ha),n&&s(J),n&&s(Oa),n&&s(Bn),n&&s(ja),n&&s(N),n&&s(Ra),n&&s(W),n&&s(Ba),n&&s(An),n&&s(Aa),n&&s(G),n&&s(Ua),n&&s(V),n&&s(Ma),n&&s(_),n&&s(Fa),n&&s($),n&&s(qa),n&&s(Un),n&&s(Ja),n&&s(z),n&&s(Na),n&&s(X),n&&s(Wa),n&&s(Mn),n&&s(Ga),n&&s(K),n&&s(Va),n&&s(Z),n&&s($a),n&&s(Fn),n&&s(za),n&&s(Q),n&&s(Xa),n&&s(T),n&&s(Ka),n&&s(qn),n&&s(Za),n&&s(Y),n&&s(Qa),n&&s(I),n&&s(Ya),n&&s(Jn),n&&s(nt),n&&s(nn),n&&s(st),n&&s(sn),n&&s(at),n&&s(Nn),n&&s(tt),n&&s(an),n&&s(et),n&&s(Wn),n&&s(ot),n&&s(m),n&&s(pt),n&&s(tn),n&&s(lt),n&&s(Gn),n&&s(ct),n&&s(en),n&&s(it),n&&s(on),n&&s(ut),n&&s(Vn),n&&s(rt),n&&s(v),n&&s(kt),n&&s(pn),n&&s(ft),n&&s(Zn),n&&s(dt),n&&s(g),n&&s(mt),n&&s(ln),n&&s(vt),n&&s(Qn),n&&s(yt),n&&s(cn),n&&s(ht),n&&s(Yn),n&&s(bt),n&&s(un),n&&s(Et),n&&s(ns),n&&s(wt),n&&s(rn),n&&s(_t),n&&s(kn),n&&s(gt),n&&s(ss),n&&s(St),n&&s(P),n&&s(Lt),n&&s(fn),n&&s(xt),n&&s(as),n&&s(Tt),n&&s(S),n&&s(It),n&&s(dn),n&&s(Pt),n&&s(mn),n&&s(Ct),n&&s(es),n&&s(Dt),n&&s(vn),n&&s(Ht),n&&s(yn),n&&s(Ot),n&&s(os),n&&s(jt),n&&s(hn),n&&s(Rt),n&&s(bn),n&&s(Bt),n&&s(ps),n&&s(At),n&&s(En),n&&s(Ut),n&&s(wn),n&&s(Mt),n&&s(ls),n&&s(Ft),n&&s(f),n&&s(qt),n&&s(_n),n&&s(Jt),n&&s(gn),n&&s(Nt),n&&s(ds),n&&s(Wt),n&&s(y),n&&s(Gt),n&&s(Sn),n&&s(Vt),n&&s(ms),n&&s($t),n&&s(C),n&&s(zt),n&&s(Ln),n&&s(Xt),n&&s(xn),n&&s(Kt),n&&s(hs),n&&s(Zt),n&&s(bs),n&&s(Qt),n&&s(d),n&&s(Yt),n&&s(Es),n&&s(ne),n&&s(In),n&&s(se),n&&s(L)}}}const ru={title:"Debugging JavaScript Like a Pro: Essential Techniques for Beginners",description:"Learn practical JavaScript debugging techniques that will save you hours of frustration. This guide covers console methods, browser dev tools, common error types, and step-by-step strategies to find and fix bugs in your code.",date:"2023-12-10T00:00:00.000Z",published:!0};class ku extends pu{constructor(x){super(),lu(this,x,null,iu,cu,{})}}export{ku as default,ru as metadata};
