import{S as Da,i as Na,s as La,k as p,q as u,a as c,l as o,m as e,r as i,h as n,c as l,n as k,b as t,C as r,K as An}from"./index.8762ca70.js";function Ba(ra){let y,Zs,os,d,zs,es,$,Qs,cs,f,Xs,ls,m,sn,us,J,nn,is,w,ka=`<code class="language-typescript"><span class="token comment">// Instead of duplicating interface properties</span>
<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  role<span class="token operator">:</span> <span class="token string">'admin'</span> <span class="token operator">|</span> <span class="token string">'user'</span><span class="token punctuation">;</span>
  createdAt<span class="token operator">:</span> Date<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Use Partial for optional updates</span>
<span class="token keyword">function</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>userId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> updates<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Use Pick to select specific properties</span>
<span class="token keyword">type</span> <span class="token class-name">UserCredentials</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">'email'</span> <span class="token operator">|</span> <span class="token string">'id'</span><span class="token operator">></span><span class="token punctuation">;</span>

<span class="token comment">// Use Omit to exclude properties</span>
<span class="token keyword">type</span> <span class="token class-name">UserWithoutTimestamps</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">'createdAt'</span><span class="token operator">></span><span class="token punctuation">;</span>

<span class="token comment">// Use Record for dictionary-like objects</span>
<span class="token keyword">const</span> userRoleDescriptions<span class="token operator">:</span> Record<span class="token operator">&lt;</span>User<span class="token punctuation">[</span><span class="token string">'role'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  admin<span class="token operator">:</span> <span class="token string">'Full system access'</span><span class="token punctuation">,</span>
  user<span class="token operator">:</span> <span class="token string">'Limited access'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,rs,v,an,ks,Y,tn,ys,b,ya=`<code class="language-typescript"><span class="token comment">// Make all properties nullable</span>
<span class="token keyword">type</span> <span class="token class-name">Nullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// Make all properties in an object required and non-nullable</span>
<span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> NonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// Convert union type to intersection type</span>
<span class="token keyword">type</span> <span class="token class-name">UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span>
  <span class="token punctuation">(</span><span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span> <span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token keyword">extends</span>
  <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">I</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">I</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></code>`,ds,T,pn,fs,V,on,ms,g,en,ws,h,da=`<code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">&#123;</span>
  type<span class="token operator">:</span> <span class="token string">'bird'</span><span class="token punctuation">;</span>
  flies<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  laysEggs<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">&#123;</span>
  type<span class="token operator">:</span> <span class="token string">'fish'</span><span class="token punctuation">;</span>
  swims<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  laysEggs<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> <span class="token class-name">Animal</span> <span class="token operator">=</span> Bird <span class="token operator">|</span> Fish<span class="token punctuation">;</span>

<span class="token comment">// Type guard function</span>
<span class="token keyword">function</span> <span class="token function">isBird</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Animal<span class="token punctuation">)</span><span class="token operator">:</span> animal <span class="token keyword">is</span> Bird <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> animal<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'bird'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">makeAnimalSound</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Animal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBird</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// TypeScript knows animal is Bird here</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span>flies <span class="token operator">?</span> <span class="token string">'Tweet tweet'</span> <span class="token operator">:</span> <span class="token string">'Cluck cluck'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// TypeScript knows animal is Fish here</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Blub blub'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,vs,E,cn,bs,Z,ln,Ts,S,fa=`<code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Success</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  status<span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">;</span>
  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Error</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  status<span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">;</span>
  error<span class="token operator">:</span> <span class="token punctuation">&#123;</span> code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Loading</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  status<span class="token operator">:</span> <span class="token string">'loading'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">ApiResponse</span> <span class="token operator">=</span> Success <span class="token operator">|</span> Error <span class="token operator">|</span> Loading<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token operator">:</span> ApiResponse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token string">'success'</span><span class="token operator">:</span>
      <span class="token comment">// TypeScript knows response is Success here</span>
      <span class="token keyword">return</span> <span class="token function">processData</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">'error'</span><span class="token operator">:</span>
      <span class="token comment">// TypeScript knows response is Error here</span>
      <span class="token keyword">return</span> <span class="token function">showError</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">'loading'</span><span class="token operator">:</span>
      <span class="token comment">// TypeScript knows response is Loading here</span>
      <span class="token keyword">return</span> <span class="token function">showSpinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,gs,P,un,hs,_,rn,Es,z,kn,Ss,U,ma=`<code class="language-typescript"><span class="token comment">// Overload signatures</span>
<span class="token keyword">function</span> <span class="token function">getItem</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Item<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">getItem</span><span class="token punctuation">(</span>options<span class="token operator">:</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> includeDetails<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ItemWithDetails<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token comment">// Implementation signature</span>
<span class="token keyword">function</span> <span class="token function">getItem</span><span class="token punctuation">(</span>idOrOptions<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> includeDetails<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Item <span class="token operator">|</span> ItemWithDetails<span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> idOrOptions <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">fetchItem</span><span class="token punctuation">(</span>idOrOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">fetchItemWithDetails</span><span class="token punctuation">(</span>idOrOptions<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ps,x,yn,_s,Q,dn,Us,H,wa=`<code class="language-typescript"><span class="token comment">// T must have an id property of type string</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">findById</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>items<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=></span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// With default type parameter</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> state<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span>newState<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> state <span class="token operator">=</span> newState<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// String state by default</span>
<span class="token keyword">const</span> stringState <span class="token operator">=</span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Number state explicitly</span>
<span class="token keyword">const</span> numberState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,xs,I,fn,Hs,A,mn,Is,X,wn,As,R,va=`<code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">IsArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// Usage</span>
<span class="token keyword">type</span> <span class="token class-name">CheckString</span> <span class="token operator">=</span> IsArray<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token keyword">type</span> <span class="token class-name">CheckArray</span> <span class="token operator">=</span> IsArray<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// More useful example: Extract non-function properties</span>
<span class="token keyword">type</span> <span class="token class-name">NonFunctionPropertyNames<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">NonFunctionProperties<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> NonFunctionPropertyNames<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Only includes name and email, not the methods</span>
<span class="token keyword">type</span> <span class="token class-name">UserData</span> <span class="token operator">=</span> NonFunctionProperties<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">;</span></code>`,Rs,C,vn,Cs,ss,bn,Ms,M,ba=`<code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">HttpMethod</span> <span class="token operator">=</span> <span class="token string">'GET'</span> <span class="token operator">|</span> <span class="token string">'POST'</span> <span class="token operator">|</span> <span class="token string">'PUT'</span> <span class="token operator">|</span> <span class="token string">'DELETE'</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Endpoint</span> <span class="token operator">=</span> <span class="token string">'users'</span> <span class="token operator">|</span> <span class="token string">'posts'</span> <span class="token operator">|</span> <span class="token string">'comments'</span><span class="token punctuation">;</span>

<span class="token comment">// Creates types like 'GET /users', 'POST /posts', etc.</span>
<span class="token keyword">type</span> <span class="token class-name">ApiRoute</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>HttpMethod<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> /</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Endpoint<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>

<span class="token comment">// Usage</span>
<span class="token keyword">function</span> <span class="token function">fetchApi</span><span class="token punctuation">(</span>route<span class="token operator">:</span> ApiRoute<span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Implementation</span>
<span class="token punctuation">&#125;</span>

<span class="token function">fetchApi</span><span class="token punctuation">(</span><span class="token string">'GET /users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Valid</span>
<span class="token function">fetchApi</span><span class="token punctuation">(</span><span class="token string">'PATCH /users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: not a valid HttpMethod</span></code>`,js,j,Tn,Ds,D,gn,Ns,N,Ta=`<code class="language-typescript"><span class="token comment">// Define your API response structure</span>
<span class="token keyword">interface</span> <span class="token class-name">ApiResponse<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  error<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  status<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Generic fetch function with type safety</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">apiFetch</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ApiResponse<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> status <span class="token operator">=</span> response<span class="token punctuation">.</span>status<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        data<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        error<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Error </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>statusText<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span>
        status
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      data<span class="token punctuation">,</span>
      error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      status
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      data<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      error<span class="token operator">:</span> err <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> err<span class="token punctuation">.</span>message <span class="token operator">:</span> <span class="token string">'Unknown error'</span><span class="token punctuation">,</span>
      status<span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Usage</span>
<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUser</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">apiFetch</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">/api/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>error <span class="token operator">||</span> <span class="token operator">!</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// result.data is typed as User here</span>
  <span class="token keyword">return</span> result<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ls,L,hn,Bs,B,ga=`<code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">EventMap</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token string-property property">'user:login'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> userId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> timestamp<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token string-property property">'user:logout'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> userId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> timestamp<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token string-property property">'item:select'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> itemId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">TypedEventEmitter</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> listeners<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> EventMap<span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token operator">:</span> EventMap<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token generic-function"><span class="token function">on</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> EventMap<span class="token operator">></span></span></span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> <span class="token function-variable function">listener</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> EventMap<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token generic-function"><span class="token function">emit</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> EventMap<span class="token operator">></span></span></span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> data<span class="token operator">:</span> EventMap<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=></span> <span class="token function">listener</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Usage</span>
<span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypedEventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'user:login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> userId<span class="token punctuation">,</span> timestamp <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">User </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> logged in at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Type error: missing timestamp property</span>
<span class="token comment">// events.emit('user:login', &#123; userId: '123' &#125;);</span>

<span class="token comment">// Correct</span>
events<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'user:login'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> userId<span class="token operator">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span> timestamp<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Fs,F,En,qs,q,Sn,Os,ns,Pn,Ws,O,ha=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> User <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../types'</span><span class="token punctuation">;</span>

  <span class="token comment">// Typed props</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token literal-property property">user</span><span class="token operator">:</span> User<span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> isActive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token comment">// Typed events</span>
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createEventDispatcher <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'svelte'</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> createEventDispatcher<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">select</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> string <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token literal-property property">close</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">handleSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'select'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> user<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">class:</span>active=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>isActive<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleSelect<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Select<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,Ks,W,_n,Gs,as,Un,$s,K,Ea=`<code class="language-typescript"><span class="token comment">// pages/api/users/[id].ts</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> NextApiRequest<span class="token punctuation">,</span> NextApiResponse <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'next'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> User <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../../types'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span>
  req<span class="token operator">:</span> NextApiRequest<span class="token punctuation">,</span>
  res<span class="token operator">:</span> NextApiResponse<span class="token operator">&lt;</span>User <span class="token operator">|</span> <span class="token punctuation">&#123;</span> error<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>

  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserById</span><span class="token punctuation">(</span>id <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> error<span class="token operator">:</span> <span class="token string">'User not found'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// pages/users/[id].tsx</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> GetServerSideProps<span class="token punctuation">,</span> NextPage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'next'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> User <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../types'</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">UserPageProps</span> <span class="token punctuation">&#123;</span>
  user<span class="token operator">:</span> User<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> UserPage<span class="token operator">:</span> NextPage<span class="token operator">&lt;</span>UserPageProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> user <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>email<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> getServerSideProps<span class="token operator">:</span> GetServerSideProps<span class="token operator">&lt;</span>UserPageProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span> <span class="token operator">=</span> context<span class="token punctuation">.</span>params<span class="token operator">!</span><span class="token punctuation">;</span>

  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserById</span><span class="token punctuation">(</span>id <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> user <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> notFound<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> UserPage<span class="token punctuation">;</span></code>`,Js,G,xn,Ys,ts,Hn,Vs,ps,In;return{c(){y=p("h1"),Zs=u("TypeScript Tips for Writing Better, Safer Code"),os=c(),d=p("h2"),zs=u("Introduction"),es=c(),$=p("p"),Qs=u("TypeScript has become an essential tool in modern web development, offering type safety and improved developer experience on top of JavaScript. While many developers are familiar with the basics, TypeScript has a wealth of advanced features that can help you write more robust, maintainable code. In this article, I’ll share some practical TypeScript tips that I’ve found valuable in my own projects."),cs=c(),f=p("h2"),Xs=u("Beyond Basic Types"),ls=c(),m=p("h3"),sn=u("Leveraging Utility Types"),us=c(),J=p("p"),nn=u("TypeScript comes with built-in utility types that can save you time and make your code more expressive:"),is=c(),w=p("pre"),rs=c(),v=p("h3"),an=u("Creating Custom Utility Types"),ks=c(),Y=p("p"),tn=u("You can also create your own utility types for common patterns in your codebase:"),ys=c(),b=p("pre"),ds=c(),T=p("h2"),pn=u("Type Narrowing Techniques"),fs=c(),V=p("p"),on=u("Type narrowing is the process of refining types to more specific ones within conditional blocks. Here are some effective techniques:"),ms=c(),g=p("h3"),en=u("User-Defined Type Guards"),ws=c(),h=p("pre"),vs=c(),E=p("h3"),cn=u("Discriminated Unions"),bs=c(),Z=p("p"),ln=u("Discriminated unions are a pattern where you include a common property with literal types to differentiate between union members:"),Ts=c(),S=p("pre"),gs=c(),P=p("h2"),un=u("Working with Functions"),hs=c(),_=p("h3"),rn=u("Function Overloads"),Es=c(),z=p("p"),kn=u("Function overloads allow you to define multiple function signatures for different parameter types:"),Ss=c(),U=p("pre"),Ps=c(),x=p("h3"),yn=u("Generic Constraints and Defaults"),_s=c(),Q=p("p"),dn=u("Use generic constraints to limit the types that can be used with your generic functions:"),Us=c(),H=p("pre"),xs=c(),I=p("h2"),fn=u("Advanced Type Patterns"),Hs=c(),A=p("h3"),mn=u("Conditional Types"),Is=c(),X=p("p"),wn=u("Conditional types allow you to create types that depend on conditions:"),As=c(),R=p("pre"),Rs=c(),C=p("h3"),vn=u("Template Literal Types"),Cs=c(),ss=p("p"),bn=u("Template literal types allow you to create new string types by concatenating other types:"),Ms=c(),M=p("pre"),js=c(),j=p("h2"),Tn=u("Practical Patterns for Real-World TypeScript"),Ds=c(),D=p("h3"),gn=u("Safe API Response Handling"),Ns=c(),N=p("pre"),Ls=c(),L=p("h3"),hn=u("Type-Safe Event Handling"),Bs=c(),B=p("pre"),Fs=c(),F=p("h2"),En=u("TypeScript in Svelte and Next.js Projects"),qs=c(),q=p("h3"),Sn=u("TypeScript with Svelte"),Os=c(),ns=p("p"),Pn=u("Svelte has excellent TypeScript support. Here’s how to type your props and events:"),Ws=c(),O=p("pre"),Ks=c(),W=p("h3"),_n=u("TypeScript with Next.js"),Gs=c(),as=p("p"),Un=u("Next.js also works well with TypeScript, especially for typing API routes and pages:"),$s=c(),K=p("pre"),Js=c(),G=p("h2"),xn=u("Conclusion"),Ys=c(),ts=p("p"),Hn=u("TypeScript offers a wealth of features that can help you write safer, more maintainable code. By leveraging utility types, type narrowing, discriminated unions, and other advanced patterns, you can catch errors at compile time rather than runtime and create more self-documenting code."),Vs=c(),ps=p("p"),In=u("Remember that TypeScript is a tool to help you, not a goal in itself. Use these techniques where they add value, but don’t overcomplicate your code just to satisfy the type system. The best TypeScript code is both type-safe and readable."),this.h()},l(s){y=o(s,"H1",{id:!0});var a=e(y);Zs=i(a,"TypeScript Tips for Writing Better, Safer Code"),a.forEach(n),os=l(s),d=o(s,"H2",{id:!0});var Rn=e(d);zs=i(Rn,"Introduction"),Rn.forEach(n),es=l(s),$=o(s,"P",{});var Cn=e($);Qs=i(Cn,"TypeScript has become an essential tool in modern web development, offering type safety and improved developer experience on top of JavaScript. While many developers are familiar with the basics, TypeScript has a wealth of advanced features that can help you write more robust, maintainable code. In this article, I’ll share some practical TypeScript tips that I’ve found valuable in my own projects."),Cn.forEach(n),cs=l(s),f=o(s,"H2",{id:!0});var Mn=e(f);Xs=i(Mn,"Beyond Basic Types"),Mn.forEach(n),ls=l(s),m=o(s,"H3",{id:!0});var jn=e(m);sn=i(jn,"Leveraging Utility Types"),jn.forEach(n),us=l(s),J=o(s,"P",{});var Dn=e(J);nn=i(Dn,"TypeScript comes with built-in utility types that can save you time and make your code more expressive:"),Dn.forEach(n),is=l(s),w=o(s,"PRE",{class:!0});var Sa=e(w);Sa.forEach(n),rs=l(s),v=o(s,"H3",{id:!0});var Nn=e(v);an=i(Nn,"Creating Custom Utility Types"),Nn.forEach(n),ks=l(s),Y=o(s,"P",{});var Ln=e(Y);tn=i(Ln,"You can also create your own utility types for common patterns in your codebase:"),Ln.forEach(n),ys=l(s),b=o(s,"PRE",{class:!0});var Pa=e(b);Pa.forEach(n),ds=l(s),T=o(s,"H2",{id:!0});var Bn=e(T);pn=i(Bn,"Type Narrowing Techniques"),Bn.forEach(n),fs=l(s),V=o(s,"P",{});var Fn=e(V);on=i(Fn,"Type narrowing is the process of refining types to more specific ones within conditional blocks. Here are some effective techniques:"),Fn.forEach(n),ms=l(s),g=o(s,"H3",{id:!0});var qn=e(g);en=i(qn,"User-Defined Type Guards"),qn.forEach(n),ws=l(s),h=o(s,"PRE",{class:!0});var _a=e(h);_a.forEach(n),vs=l(s),E=o(s,"H3",{id:!0});var On=e(E);cn=i(On,"Discriminated Unions"),On.forEach(n),bs=l(s),Z=o(s,"P",{});var Wn=e(Z);ln=i(Wn,"Discriminated unions are a pattern where you include a common property with literal types to differentiate between union members:"),Wn.forEach(n),Ts=l(s),S=o(s,"PRE",{class:!0});var Ua=e(S);Ua.forEach(n),gs=l(s),P=o(s,"H2",{id:!0});var Kn=e(P);un=i(Kn,"Working with Functions"),Kn.forEach(n),hs=l(s),_=o(s,"H3",{id:!0});var Gn=e(_);rn=i(Gn,"Function Overloads"),Gn.forEach(n),Es=l(s),z=o(s,"P",{});var $n=e(z);kn=i($n,"Function overloads allow you to define multiple function signatures for different parameter types:"),$n.forEach(n),Ss=l(s),U=o(s,"PRE",{class:!0});var xa=e(U);xa.forEach(n),Ps=l(s),x=o(s,"H3",{id:!0});var Jn=e(x);yn=i(Jn,"Generic Constraints and Defaults"),Jn.forEach(n),_s=l(s),Q=o(s,"P",{});var Yn=e(Q);dn=i(Yn,"Use generic constraints to limit the types that can be used with your generic functions:"),Yn.forEach(n),Us=l(s),H=o(s,"PRE",{class:!0});var Ha=e(H);Ha.forEach(n),xs=l(s),I=o(s,"H2",{id:!0});var Vn=e(I);fn=i(Vn,"Advanced Type Patterns"),Vn.forEach(n),Hs=l(s),A=o(s,"H3",{id:!0});var Zn=e(A);mn=i(Zn,"Conditional Types"),Zn.forEach(n),Is=l(s),X=o(s,"P",{});var zn=e(X);wn=i(zn,"Conditional types allow you to create types that depend on conditions:"),zn.forEach(n),As=l(s),R=o(s,"PRE",{class:!0});var Ia=e(R);Ia.forEach(n),Rs=l(s),C=o(s,"H3",{id:!0});var Qn=e(C);vn=i(Qn,"Template Literal Types"),Qn.forEach(n),Cs=l(s),ss=o(s,"P",{});var Xn=e(ss);bn=i(Xn,"Template literal types allow you to create new string types by concatenating other types:"),Xn.forEach(n),Ms=l(s),M=o(s,"PRE",{class:!0});var Aa=e(M);Aa.forEach(n),js=l(s),j=o(s,"H2",{id:!0});var sa=e(j);Tn=i(sa,"Practical Patterns for Real-World TypeScript"),sa.forEach(n),Ds=l(s),D=o(s,"H3",{id:!0});var na=e(D);gn=i(na,"Safe API Response Handling"),na.forEach(n),Ns=l(s),N=o(s,"PRE",{class:!0});var Ra=e(N);Ra.forEach(n),Ls=l(s),L=o(s,"H3",{id:!0});var aa=e(L);hn=i(aa,"Type-Safe Event Handling"),aa.forEach(n),Bs=l(s),B=o(s,"PRE",{class:!0});var Ca=e(B);Ca.forEach(n),Fs=l(s),F=o(s,"H2",{id:!0});var ta=e(F);En=i(ta,"TypeScript in Svelte and Next.js Projects"),ta.forEach(n),qs=l(s),q=o(s,"H3",{id:!0});var pa=e(q);Sn=i(pa,"TypeScript with Svelte"),pa.forEach(n),Os=l(s),ns=o(s,"P",{});var oa=e(ns);Pn=i(oa,"Svelte has excellent TypeScript support. Here’s how to type your props and events:"),oa.forEach(n),Ws=l(s),O=o(s,"PRE",{class:!0});var Ma=e(O);Ma.forEach(n),Ks=l(s),W=o(s,"H3",{id:!0});var ea=e(W);_n=i(ea,"TypeScript with Next.js"),ea.forEach(n),Gs=l(s),as=o(s,"P",{});var ca=e(as);Un=i(ca,"Next.js also works well with TypeScript, especially for typing API routes and pages:"),ca.forEach(n),$s=l(s),K=o(s,"PRE",{class:!0});var ja=e(K);ja.forEach(n),Js=l(s),G=o(s,"H2",{id:!0});var la=e(G);xn=i(la,"Conclusion"),la.forEach(n),Ys=l(s),ts=o(s,"P",{});var ua=e(ts);Hn=i(ua,"TypeScript offers a wealth of features that can help you write safer, more maintainable code. By leveraging utility types, type narrowing, discriminated unions, and other advanced patterns, you can catch errors at compile time rather than runtime and create more self-documenting code."),ua.forEach(n),Vs=l(s),ps=o(s,"P",{});var ia=e(ps);In=i(ia,"Remember that TypeScript is a tool to help you, not a goal in itself. Use these techniques where they add value, but don’t overcomplicate your code just to satisfy the type system. The best TypeScript code is both type-safe and readable."),ia.forEach(n),this.h()},h(){k(y,"id","typescript-tips-for-writing-better-safer-code"),k(d,"id","introduction"),k(f,"id","beyond-basic-types"),k(m,"id","leveraging-utility-types"),k(w,"class","language-typescript"),k(v,"id","creating-custom-utility-types"),k(b,"class","language-typescript"),k(T,"id","type-narrowing-techniques"),k(g,"id","user-defined-type-guards"),k(h,"class","language-typescript"),k(E,"id","discriminated-unions"),k(S,"class","language-typescript"),k(P,"id","working-with-functions"),k(_,"id","function-overloads"),k(U,"class","language-typescript"),k(x,"id","generic-constraints-and-defaults"),k(H,"class","language-typescript"),k(I,"id","advanced-type-patterns"),k(A,"id","conditional-types"),k(R,"class","language-typescript"),k(C,"id","template-literal-types"),k(M,"class","language-typescript"),k(j,"id","practical-patterns-for-real-world-typescript"),k(D,"id","safe-api-response-handling"),k(N,"class","language-typescript"),k(L,"id","type-safe-event-handling"),k(B,"class","language-typescript"),k(F,"id","typescript-in-svelte-and-nextjs-projects"),k(q,"id","typescript-with-svelte"),k(O,"class","language-svelte"),k(W,"id","typescript-with-nextjs"),k(K,"class","language-typescript"),k(G,"id","conclusion")},m(s,a){t(s,y,a),r(y,Zs),t(s,os,a),t(s,d,a),r(d,zs),t(s,es,a),t(s,$,a),r($,Qs),t(s,cs,a),t(s,f,a),r(f,Xs),t(s,ls,a),t(s,m,a),r(m,sn),t(s,us,a),t(s,J,a),r(J,nn),t(s,is,a),t(s,w,a),w.innerHTML=ka,t(s,rs,a),t(s,v,a),r(v,an),t(s,ks,a),t(s,Y,a),r(Y,tn),t(s,ys,a),t(s,b,a),b.innerHTML=ya,t(s,ds,a),t(s,T,a),r(T,pn),t(s,fs,a),t(s,V,a),r(V,on),t(s,ms,a),t(s,g,a),r(g,en),t(s,ws,a),t(s,h,a),h.innerHTML=da,t(s,vs,a),t(s,E,a),r(E,cn),t(s,bs,a),t(s,Z,a),r(Z,ln),t(s,Ts,a),t(s,S,a),S.innerHTML=fa,t(s,gs,a),t(s,P,a),r(P,un),t(s,hs,a),t(s,_,a),r(_,rn),t(s,Es,a),t(s,z,a),r(z,kn),t(s,Ss,a),t(s,U,a),U.innerHTML=ma,t(s,Ps,a),t(s,x,a),r(x,yn),t(s,_s,a),t(s,Q,a),r(Q,dn),t(s,Us,a),t(s,H,a),H.innerHTML=wa,t(s,xs,a),t(s,I,a),r(I,fn),t(s,Hs,a),t(s,A,a),r(A,mn),t(s,Is,a),t(s,X,a),r(X,wn),t(s,As,a),t(s,R,a),R.innerHTML=va,t(s,Rs,a),t(s,C,a),r(C,vn),t(s,Cs,a),t(s,ss,a),r(ss,bn),t(s,Ms,a),t(s,M,a),M.innerHTML=ba,t(s,js,a),t(s,j,a),r(j,Tn),t(s,Ds,a),t(s,D,a),r(D,gn),t(s,Ns,a),t(s,N,a),N.innerHTML=Ta,t(s,Ls,a),t(s,L,a),r(L,hn),t(s,Bs,a),t(s,B,a),B.innerHTML=ga,t(s,Fs,a),t(s,F,a),r(F,En),t(s,qs,a),t(s,q,a),r(q,Sn),t(s,Os,a),t(s,ns,a),r(ns,Pn),t(s,Ws,a),t(s,O,a),O.innerHTML=ha,t(s,Ks,a),t(s,W,a),r(W,_n),t(s,Gs,a),t(s,as,a),r(as,Un),t(s,$s,a),t(s,K,a),K.innerHTML=Ea,t(s,Js,a),t(s,G,a),r(G,xn),t(s,Ys,a),t(s,ts,a),r(ts,Hn),t(s,Vs,a),t(s,ps,a),r(ps,In)},p:An,i:An,o:An,d(s){s&&n(y),s&&n(os),s&&n(d),s&&n(es),s&&n($),s&&n(cs),s&&n(f),s&&n(ls),s&&n(m),s&&n(us),s&&n(J),s&&n(is),s&&n(w),s&&n(rs),s&&n(v),s&&n(ks),s&&n(Y),s&&n(ys),s&&n(b),s&&n(ds),s&&n(T),s&&n(fs),s&&n(V),s&&n(ms),s&&n(g),s&&n(ws),s&&n(h),s&&n(vs),s&&n(E),s&&n(bs),s&&n(Z),s&&n(Ts),s&&n(S),s&&n(gs),s&&n(P),s&&n(hs),s&&n(_),s&&n(Es),s&&n(z),s&&n(Ss),s&&n(U),s&&n(Ps),s&&n(x),s&&n(_s),s&&n(Q),s&&n(Us),s&&n(H),s&&n(xs),s&&n(I),s&&n(Hs),s&&n(A),s&&n(Is),s&&n(X),s&&n(As),s&&n(R),s&&n(Rs),s&&n(C),s&&n(Cs),s&&n(ss),s&&n(Ms),s&&n(M),s&&n(js),s&&n(j),s&&n(Ds),s&&n(D),s&&n(Ns),s&&n(N),s&&n(Ls),s&&n(L),s&&n(Bs),s&&n(B),s&&n(Fs),s&&n(F),s&&n(qs),s&&n(q),s&&n(Os),s&&n(ns),s&&n(Ws),s&&n(O),s&&n(Ks),s&&n(W),s&&n(Gs),s&&n(as),s&&n($s),s&&n(K),s&&n(Js),s&&n(G),s&&n(Ys),s&&n(ts),s&&n(Vs),s&&n(ps)}}}const qa={title:"TypeScript Tips for Writing Better, Safer Code",description:"Discover practical TypeScript techniques that go beyond the basics to help you write more maintainable, type-safe code. Learn about utility types, type narrowing, discriminated unions, and more advanced patterns that will level up your TypeScript skills.",date:"2023-10-15T00:00:00.000Z",published:!0};class Oa extends Da{constructor(y){super(),Na(this,y,null,Ba,La,{})}}export{Oa as default,qa as metadata};
