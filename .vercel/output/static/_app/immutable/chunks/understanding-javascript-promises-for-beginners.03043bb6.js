import{S as Up,i as xp,s as Lp,k as e,q as l,a as i,l as o,m as c,r as u,h as s,c as r,n as k,b as p,C as t,K as ft}from"./index.8762ca70.js";function Rp(up){let h,Bs,Wn,D,Fs,qn,pn,Ns,Bn,I,Gs,Fn,en,$s,Nn,on,Ys,Gn,g,ip=`<code class="language-javascript"><span class="token function">getData</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">getMoreData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">moreData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">getEvenMoreData</span><span class="token punctuation">(</span>moreData<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evenMoreData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// This nesting gets out of hand quickly</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evenMoreData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,$n,cn,zs,Yn,j,rp=`<code class="language-javascript"><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token function">getMoreData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">moreData</span> <span class="token operator">=></span> <span class="token function">getEvenMoreData</span><span class="token punctuation">(</span>moreData<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">evenMoreData</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evenMoreData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Something went wrong:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,zn,A,Ks,Kn,ln,Zs,Zn,M,kp=`<code class="language-javascript"><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token parameter">milliseconds</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">I waited for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>milliseconds<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> milliseconds</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> milliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Using the Promise</span>
<span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">message</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "I waited for 2000 milliseconds"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Something went wrong:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Qn,un,Qs,Vn,m,S,Vs,_n,Xs,na,sa,v,aa,bn,ta,pa,Dn,ea,oa,C,ca,In,la,ua,ia,H,ra,gn,ka,fa,Xn,T,ma,ns,U,da,ss,rn,ha,as,x,fp=`<code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fetchUserData</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">https://api.example.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">HTTP error! Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Using the function</span>
<span class="token function">fetchUserData</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">userData</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"User data:"</span><span class="token punctuation">,</span> userData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to fetch user data:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ts,L,wa,ps,kn,va,es,R,mp=`<code class="language-javascript"><span class="token comment">// Fetch data for multiple users simultaneously</span>
<span class="token keyword">const</span> userIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> userPromises <span class="token operator">=</span> userIds<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">id</span> <span class="token operator">=></span> <span class="token function">fetchUserData</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>userPromises<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">usersData</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"All users data:"</span><span class="token punctuation">,</span> usersData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// usersData is an array containing the results of each Promise</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"At least one request failed:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,os,J,jn,ya,Pa,cs,O,Ea,ls,fn,_a,us,W,dp=`<code class="language-javascript"><span class="token comment">// Try to get data from multiple APIs and use whichever responds first</span>
<span class="token keyword">const</span> primaryApi <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://primary-api.example.com/data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> backupApi <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://backup-api.example.com/data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>primaryApi<span class="token punctuation">,</span> backupApi<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Got data from the faster API:"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Both APIs failed:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,is,q,ba,rs,mn,Da,ks,B,hp=`<code class="language-javascript"><span class="token comment">// ❌ Sequential execution (slower)</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getDataSequentially</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchUserData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> productData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchProductData</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> userData<span class="token punctuation">,</span> productData <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ✅ Parallel execution (faster)</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getDataInParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> userPromise <span class="token operator">=</span> <span class="token function">fetchUserData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> productPromise <span class="token operator">=</span> <span class="token function">fetchProductData</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token keyword">await</span> userPromise<span class="token punctuation">;</span>
  <span class="token keyword">const</span> productData <span class="token operator">=</span> <span class="token keyword">await</span> productPromise<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> userData<span class="token punctuation">,</span> productData <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,fs,F,Ia,ms,dn,ga,ds,N,wp=`<code class="language-javascript"><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// This might throw an error</span>
    <span class="token keyword">return</span> <span class="token function">processData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">processedData</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">displayData</span><span class="token punctuation">(</span>processedData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// This will catch errors from fetchData, processData, and displayData</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"An error occurred:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">showErrorMessage</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// This will run regardless of success or failure</span>
    <span class="token function">hideLoadingSpinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,hs,y,ja,An,Aa,Ma,ws,G,Sa,vs,P,Ca,Mn,Ha,Ta,ys,$,vp=`<code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUserDetails</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchUserData</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> userPosts <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchUserPosts</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">user</span><span class="token operator">:</span> userData<span class="token punctuation">,</span>
      <span class="token literal-property property">posts</span><span class="token operator">:</span> userPosts
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to get user details:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> error<span class="token punctuation">;</span> <span class="token comment">// Re-throw the error if you want callers to handle it</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Using the async function</span>
<span class="token function">getUserDetails</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">details</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"User details:"</span><span class="token punctuation">,</span> details<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">showErrorToUser</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ps,E,Ua,Sn,xa,La,Es,Y,Ra,_s,z,Ja,bs,K,yp=`<code class="language-javascript"><span class="token comment">// ❌ Incorrect - not returning the promise</span>
<span class="token keyword">function</span> <span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">/api/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// No return statement!</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ✅ Correct - returning the promise chain</span>
<span class="token keyword">function</span> <span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">/api/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ds,Z,Oa,Is,Q,Pp=`<code class="language-javascript"><span class="token comment">// ❌ Incorrect - no error handling</span>
<span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">processData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ✅ Correct - with error handling</span>
<span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">processData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Handle the error appropriately</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,gs,V,Wa,js,X,Ep=`<code class="language-javascript"><span class="token comment">// ❌ Incorrect - wrapping a Promise in another Promise unnecessarily</span>
<span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/data'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ✅ Correct - just return the Promise</span>
<span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/data'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,As,nn,qa,Ms,hn,Ba,Ss,wn,Fa,Cs,f,Cn,Na,Ga,w,$a,Hn,Ya,za,Tn,Ka,Za,Qa,vn,Un,Va,Xa,nt,yn,xn,st,at,tt,Ln,pt,Hs,Pn,et,Ts,sn,ot,Us,_,Rn,an,ct,lt,Jn,tn,ut;return{c(){h=e("h1"),Bs=l("Understanding JavaScript Promises for Beginners: A Practical Guide"),Wn=i(),D=e("h2"),Fs=l("Introduction"),qn=i(),pn=e("p"),Ns=l("When you’re new to JavaScript, one of the most confusing concepts to grasp is asynchronous programming. At the heart of modern JavaScript’s async capabilities are Promises - a powerful feature that helps manage operations that take time to complete. In this guide, I’ll break down Promises in a way that’s easy to understand, with practical examples you can start using right away."),Bn=i(),I=e("h2"),Gs=l("What Are Promises and Why Do We Need Them?"),Fn=i(),en=e("p"),$s=l("A Promise in JavaScript represents a value that might not be available yet. Think of it as an IOU note - a promise that you’ll eventually get a result from an operation, whether that operation succeeds or fails."),Nn=i(),on=e("p"),Ys=l("Before Promises, we had to use callbacks, which often led to deeply nested code (callback hell):"),Gn=i(),g=e("pre"),$n=i(),cn=e("p"),zs=l("Promises help us write cleaner, more maintainable code:"),Yn=i(),j=e("pre"),zn=i(),A=e("h2"),Ks=l("Creating Your First Promise"),Kn=i(),ln=e("p"),Zs=l("Let’s start with a simple example - creating a Promise that resolves after a delay:"),Zn=i(),M=e("pre"),Qn=i(),un=e("p"),Qs=l("Breaking this down:"),Vn=i(),m=e("ol"),S=e("li"),Vs=l("We create a new Promise using the "),_n=e("code"),Xs=l("Promise"),na=l(" constructor"),sa=i(),v=e("li"),aa=l("The constructor takes a function with two parameters: "),bn=e("code"),ta=l("resolve"),pa=l(" and "),Dn=e("code"),ea=l("reject"),oa=i(),C=e("li"),ca=l("When our operation succeeds, we call "),In=e("code"),la=l("resolve"),ua=l(" with the result"),ia=i(),H=e("li"),ra=l("If something goes wrong, we would call "),gn=e("code"),ka=l("reject"),fa=l(" with an error"),Xn=i(),T=e("h2"),ma=l("Common Promise Patterns and Solutions"),ns=i(),U=e("h3"),da=l("Problem 1: Making API Calls"),ss=i(),rn=e("p"),ha=l("One of the most common uses for Promises is fetching data from an API:"),as=i(),x=e("pre"),ts=i(),L=e("h3"),wa=l("Problem 2: Running Multiple Promises in Parallel"),ps=i(),kn=e("p"),va=l("Sometimes you need to run multiple async operations at once and wait for all of them to complete:"),es=i(),R=e("pre"),os=i(),J=e("p"),jn=e("code"),ya=l("Promise.all()"),Pa=l(" is perfect when you need all promises to succeed, but it will reject if any promise fails."),cs=i(),O=e("h3"),Ea=l("Problem 3: Racing Promises"),ls=i(),fn=e("p"),_a=l("Sometimes you want to get the result of whichever promise resolves first:"),us=i(),W=e("pre"),is=i(),q=e("h3"),ba=l("Problem 4: Sequential vs. Parallel Execution"),rs=i(),mn=e("p"),Da=l("A common mistake is accidentally running promises sequentially when they could run in parallel:"),ks=i(),B=e("pre"),fs=i(),F=e("h2"),Ia=l("Error Handling with Promises"),ms=i(),dn=e("p"),ga=l("Proper error handling is crucial when working with Promises:"),ds=i(),N=e("pre"),hs=i(),y=e("p"),ja=l("The "),An=e("code"),Aa=l(".finally()"),Ma=l(" method is perfect for cleanup operations that should happen regardless of success or failure."),ws=i(),G=e("h2"),Sa=l("Async/Await: A More Readable Syntax"),vs=i(),P=e("p"),Ca=l("Modern JavaScript gives us the "),Mn=e("code"),Ha=l("async/await"),Ta=l(" syntax, which makes working with Promises even easier:"),ys=i(),$=e("pre"),Ps=i(),E=e("p"),Ua=l("Remember that "),Sn=e("code"),xa=l("async"),La=l(" functions always return a Promise, even if you don’t explicitly return one."),Es=i(),Y=e("h2"),Ra=l("Common Promise Mistakes to Avoid"),_s=i(),z=e("h3"),Ja=l("Mistake 1: Forgetting to Return Promises in Chains"),bs=i(),K=e("pre"),Ds=i(),Z=e("h3"),Oa=l("Mistake 2: Not Handling Errors"),Is=i(),Q=e("pre"),gs=i(),V=e("h3"),Wa=l("Mistake 3: Promise Constructor Anti-pattern"),js=i(),X=e("pre"),As=i(),nn=e("h2"),qa=l("Conclusion"),Ms=i(),hn=e("p"),Ba=l("Promises are a fundamental part of modern JavaScript that every developer needs to understand. They help us write cleaner, more maintainable asynchronous code. By mastering the basics of creating, chaining, and handling errors with Promises, you’ll be well on your way to becoming a more effective JavaScript developer."),Ss=i(),wn=e("p"),Fa=l("Remember these key points:"),Cs=i(),f=e("ul"),Cn=e("li"),Na=l("Promises represent values that might not be available yet"),Ga=i(),w=e("li"),$a=l("Use "),Hn=e("code"),Ya=l(".then()"),za=l(" to handle successful results and "),Tn=e("code"),Ka=l(".catch()"),Za=l(" for errors"),Qa=i(),vn=e("li"),Un=e("code"),Va=l("Promise.all()"),Xa=l(" runs multiple promises in parallel"),nt=i(),yn=e("li"),xn=e("code"),st=l("async/await"),at=l(" provides a cleaner syntax for working with promises"),tt=i(),Ln=e("li"),pt=l("Always handle errors in your Promise chains"),Hs=i(),Pn=e("p"),et=l("With these fundamentals, you’ll be able to tackle more complex asynchronous programming challenges with confidence."),Ts=i(),sn=e("h2"),ot=l("Further Resources"),Us=i(),_=e("ul"),Rn=e("li"),an=e("a"),ct=l("MDN Web Docs: Using Promises"),lt=i(),Jn=e("li"),tn=e("a"),ut=l("JavaScript.info: Promises, async/await"),this.h()},l(n){h=o(n,"H1",{id:!0});var a=c(h);Bs=u(a,"Understanding JavaScript Promises for Beginners: A Practical Guide"),a.forEach(s),Wn=r(n),D=o(n,"H2",{id:!0});var mt=c(D);Fs=u(mt,"Introduction"),mt.forEach(s),qn=r(n),pn=o(n,"P",{});var dt=c(pn);Ns=u(dt,"When you’re new to JavaScript, one of the most confusing concepts to grasp is asynchronous programming. At the heart of modern JavaScript’s async capabilities are Promises - a powerful feature that helps manage operations that take time to complete. In this guide, I’ll break down Promises in a way that’s easy to understand, with practical examples you can start using right away."),dt.forEach(s),Bn=r(n),I=o(n,"H2",{id:!0});var ht=c(I);Gs=u(ht,"What Are Promises and Why Do We Need Them?"),ht.forEach(s),Fn=r(n),en=o(n,"P",{});var wt=c(en);$s=u(wt,"A Promise in JavaScript represents a value that might not be available yet. Think of it as an IOU note - a promise that you’ll eventually get a result from an operation, whether that operation succeeds or fails."),wt.forEach(s),Nn=r(n),on=o(n,"P",{});var vt=c(on);Ys=u(vt,"Before Promises, we had to use callbacks, which often led to deeply nested code (callback hell):"),vt.forEach(s),Gn=r(n),g=o(n,"PRE",{class:!0});var _p=c(g);_p.forEach(s),$n=r(n),cn=o(n,"P",{});var yt=c(cn);zs=u(yt,"Promises help us write cleaner, more maintainable code:"),yt.forEach(s),Yn=r(n),j=o(n,"PRE",{class:!0});var bp=c(j);bp.forEach(s),zn=r(n),A=o(n,"H2",{id:!0});var Pt=c(A);Ks=u(Pt,"Creating Your First Promise"),Pt.forEach(s),Kn=r(n),ln=o(n,"P",{});var Et=c(ln);Zs=u(Et,"Let’s start with a simple example - creating a Promise that resolves after a delay:"),Et.forEach(s),Zn=r(n),M=o(n,"PRE",{class:!0});var Dp=c(M);Dp.forEach(s),Qn=r(n),un=o(n,"P",{});var _t=c(un);Qs=u(_t,"Breaking this down:"),_t.forEach(s),Vn=r(n),m=o(n,"OL",{});var b=c(m);S=o(b,"LI",{});var xs=c(S);Vs=u(xs,"We create a new Promise using the "),_n=o(xs,"CODE",{});var bt=c(_n);Xs=u(bt,"Promise"),bt.forEach(s),na=u(xs," constructor"),xs.forEach(s),sa=r(b),v=o(b,"LI",{});var On=c(v);aa=u(On,"The constructor takes a function with two parameters: "),bn=o(On,"CODE",{});var Dt=c(bn);ta=u(Dt,"resolve"),Dt.forEach(s),pa=u(On," and "),Dn=o(On,"CODE",{});var It=c(Dn);ea=u(It,"reject"),It.forEach(s),On.forEach(s),oa=r(b),C=o(b,"LI",{});var Ls=c(C);ca=u(Ls,"When our operation succeeds, we call "),In=o(Ls,"CODE",{});var gt=c(In);la=u(gt,"resolve"),gt.forEach(s),ua=u(Ls," with the result"),Ls.forEach(s),ia=r(b),H=o(b,"LI",{});var Rs=c(H);ra=u(Rs,"If something goes wrong, we would call "),gn=o(Rs,"CODE",{});var jt=c(gn);ka=u(jt,"reject"),jt.forEach(s),fa=u(Rs," with an error"),Rs.forEach(s),b.forEach(s),Xn=r(n),T=o(n,"H2",{id:!0});var At=c(T);ma=u(At,"Common Promise Patterns and Solutions"),At.forEach(s),ns=r(n),U=o(n,"H3",{id:!0});var Mt=c(U);da=u(Mt,"Problem 1: Making API Calls"),Mt.forEach(s),ss=r(n),rn=o(n,"P",{});var St=c(rn);ha=u(St,"One of the most common uses for Promises is fetching data from an API:"),St.forEach(s),as=r(n),x=o(n,"PRE",{class:!0});var Ip=c(x);Ip.forEach(s),ts=r(n),L=o(n,"H3",{id:!0});var Ct=c(L);wa=u(Ct,"Problem 2: Running Multiple Promises in Parallel"),Ct.forEach(s),ps=r(n),kn=o(n,"P",{});var Ht=c(kn);va=u(Ht,"Sometimes you need to run multiple async operations at once and wait for all of them to complete:"),Ht.forEach(s),es=r(n),R=o(n,"PRE",{class:!0});var gp=c(R);gp.forEach(s),os=r(n),J=o(n,"P",{});var it=c(J);jn=o(it,"CODE",{});var Tt=c(jn);ya=u(Tt,"Promise.all()"),Tt.forEach(s),Pa=u(it," is perfect when you need all promises to succeed, but it will reject if any promise fails."),it.forEach(s),cs=r(n),O=o(n,"H3",{id:!0});var Ut=c(O);Ea=u(Ut,"Problem 3: Racing Promises"),Ut.forEach(s),ls=r(n),fn=o(n,"P",{});var xt=c(fn);_a=u(xt,"Sometimes you want to get the result of whichever promise resolves first:"),xt.forEach(s),us=r(n),W=o(n,"PRE",{class:!0});var jp=c(W);jp.forEach(s),is=r(n),q=o(n,"H3",{id:!0});var Lt=c(q);ba=u(Lt,"Problem 4: Sequential vs. Parallel Execution"),Lt.forEach(s),rs=r(n),mn=o(n,"P",{});var Rt=c(mn);Da=u(Rt,"A common mistake is accidentally running promises sequentially when they could run in parallel:"),Rt.forEach(s),ks=r(n),B=o(n,"PRE",{class:!0});var Ap=c(B);Ap.forEach(s),fs=r(n),F=o(n,"H2",{id:!0});var Jt=c(F);Ia=u(Jt,"Error Handling with Promises"),Jt.forEach(s),ms=r(n),dn=o(n,"P",{});var Ot=c(dn);ga=u(Ot,"Proper error handling is crucial when working with Promises:"),Ot.forEach(s),ds=r(n),N=o(n,"PRE",{class:!0});var Mp=c(N);Mp.forEach(s),hs=r(n),y=o(n,"P",{});var Js=c(y);ja=u(Js,"The "),An=o(Js,"CODE",{});var Wt=c(An);Aa=u(Wt,".finally()"),Wt.forEach(s),Ma=u(Js," method is perfect for cleanup operations that should happen regardless of success or failure."),Js.forEach(s),ws=r(n),G=o(n,"H2",{id:!0});var qt=c(G);Sa=u(qt,"Async/Await: A More Readable Syntax"),qt.forEach(s),vs=r(n),P=o(n,"P",{});var Os=c(P);Ca=u(Os,"Modern JavaScript gives us the "),Mn=o(Os,"CODE",{});var Bt=c(Mn);Ha=u(Bt,"async/await"),Bt.forEach(s),Ta=u(Os," syntax, which makes working with Promises even easier:"),Os.forEach(s),ys=r(n),$=o(n,"PRE",{class:!0});var Sp=c($);Sp.forEach(s),Ps=r(n),E=o(n,"P",{});var Ws=c(E);Ua=u(Ws,"Remember that "),Sn=o(Ws,"CODE",{});var Ft=c(Sn);xa=u(Ft,"async"),Ft.forEach(s),La=u(Ws," functions always return a Promise, even if you don’t explicitly return one."),Ws.forEach(s),Es=r(n),Y=o(n,"H2",{id:!0});var Nt=c(Y);Ra=u(Nt,"Common Promise Mistakes to Avoid"),Nt.forEach(s),_s=r(n),z=o(n,"H3",{id:!0});var Gt=c(z);Ja=u(Gt,"Mistake 1: Forgetting to Return Promises in Chains"),Gt.forEach(s),bs=r(n),K=o(n,"PRE",{class:!0});var Cp=c(K);Cp.forEach(s),Ds=r(n),Z=o(n,"H3",{id:!0});var $t=c(Z);Oa=u($t,"Mistake 2: Not Handling Errors"),$t.forEach(s),Is=r(n),Q=o(n,"PRE",{class:!0});var Hp=c(Q);Hp.forEach(s),gs=r(n),V=o(n,"H3",{id:!0});var Yt=c(V);Wa=u(Yt,"Mistake 3: Promise Constructor Anti-pattern"),Yt.forEach(s),js=r(n),X=o(n,"PRE",{class:!0});var Tp=c(X);Tp.forEach(s),As=r(n),nn=o(n,"H2",{id:!0});var zt=c(nn);qa=u(zt,"Conclusion"),zt.forEach(s),Ms=r(n),hn=o(n,"P",{});var Kt=c(hn);Ba=u(Kt,"Promises are a fundamental part of modern JavaScript that every developer needs to understand. They help us write cleaner, more maintainable asynchronous code. By mastering the basics of creating, chaining, and handling errors with Promises, you’ll be well on your way to becoming a more effective JavaScript developer."),Kt.forEach(s),Ss=r(n),wn=o(n,"P",{});var Zt=c(wn);Fa=u(Zt,"Remember these key points:"),Zt.forEach(s),Cs=r(n),f=o(n,"UL",{});var d=c(f);Cn=o(d,"LI",{});var Qt=c(Cn);Na=u(Qt,"Promises represent values that might not be available yet"),Qt.forEach(s),Ga=r(d),w=o(d,"LI",{});var En=c(w);$a=u(En,"Use "),Hn=o(En,"CODE",{});var Vt=c(Hn);Ya=u(Vt,".then()"),Vt.forEach(s),za=u(En," to handle successful results and "),Tn=o(En,"CODE",{});var Xt=c(Tn);Ka=u(Xt,".catch()"),Xt.forEach(s),Za=u(En," for errors"),En.forEach(s),Qa=r(d),vn=o(d,"LI",{});var rt=c(vn);Un=o(rt,"CODE",{});var np=c(Un);Va=u(np,"Promise.all()"),np.forEach(s),Xa=u(rt," runs multiple promises in parallel"),rt.forEach(s),nt=r(d),yn=o(d,"LI",{});var kt=c(yn);xn=o(kt,"CODE",{});var sp=c(xn);st=u(sp,"async/await"),sp.forEach(s),at=u(kt," provides a cleaner syntax for working with promises"),kt.forEach(s),tt=r(d),Ln=o(d,"LI",{});var ap=c(Ln);pt=u(ap,"Always handle errors in your Promise chains"),ap.forEach(s),d.forEach(s),Hs=r(n),Pn=o(n,"P",{});var tp=c(Pn);et=u(tp,"With these fundamentals, you’ll be able to tackle more complex asynchronous programming challenges with confidence."),tp.forEach(s),Ts=r(n),sn=o(n,"H2",{id:!0});var pp=c(sn);ot=u(pp,"Further Resources"),pp.forEach(s),Us=r(n),_=o(n,"UL",{});var qs=c(_);Rn=o(qs,"LI",{});var ep=c(Rn);an=o(ep,"A",{href:!0,rel:!0});var op=c(an);ct=u(op,"MDN Web Docs: Using Promises"),op.forEach(s),ep.forEach(s),lt=r(qs),Jn=o(qs,"LI",{});var cp=c(Jn);tn=o(cp,"A",{href:!0,rel:!0});var lp=c(tn);ut=u(lp,"JavaScript.info: Promises, async/await"),lp.forEach(s),cp.forEach(s),qs.forEach(s),this.h()},h(){k(h,"id","understanding-javascript-promises-for-beginners-a-practical-guide"),k(D,"id","introduction"),k(I,"id","what-are-promises-and-why-do-we-need-them"),k(g,"class","language-javascript"),k(j,"class","language-javascript"),k(A,"id","creating-your-first-promise"),k(M,"class","language-javascript"),k(T,"id","common-promise-patterns-and-solutions"),k(U,"id","problem-1-making-api-calls"),k(x,"class","language-javascript"),k(L,"id","problem-2-running-multiple-promises-in-parallel"),k(R,"class","language-javascript"),k(O,"id","problem-3-racing-promises"),k(W,"class","language-javascript"),k(q,"id","problem-4-sequential-vs-parallel-execution"),k(B,"class","language-javascript"),k(F,"id","error-handling-with-promises"),k(N,"class","language-javascript"),k(G,"id","asyncawait-a-more-readable-syntax"),k($,"class","language-javascript"),k(Y,"id","common-promise-mistakes-to-avoid"),k(z,"id","mistake-1-forgetting-to-return-promises-in-chains"),k(K,"class","language-javascript"),k(Z,"id","mistake-2-not-handling-errors"),k(Q,"class","language-javascript"),k(V,"id","mistake-3-promise-constructor-anti-pattern"),k(X,"class","language-javascript"),k(nn,"id","conclusion"),k(sn,"id","further-resources"),k(an,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"),k(an,"rel","nofollow"),k(tn,"href","https://javascript.info/async"),k(tn,"rel","nofollow")},m(n,a){p(n,h,a),t(h,Bs),p(n,Wn,a),p(n,D,a),t(D,Fs),p(n,qn,a),p(n,pn,a),t(pn,Ns),p(n,Bn,a),p(n,I,a),t(I,Gs),p(n,Fn,a),p(n,en,a),t(en,$s),p(n,Nn,a),p(n,on,a),t(on,Ys),p(n,Gn,a),p(n,g,a),g.innerHTML=ip,p(n,$n,a),p(n,cn,a),t(cn,zs),p(n,Yn,a),p(n,j,a),j.innerHTML=rp,p(n,zn,a),p(n,A,a),t(A,Ks),p(n,Kn,a),p(n,ln,a),t(ln,Zs),p(n,Zn,a),p(n,M,a),M.innerHTML=kp,p(n,Qn,a),p(n,un,a),t(un,Qs),p(n,Vn,a),p(n,m,a),t(m,S),t(S,Vs),t(S,_n),t(_n,Xs),t(S,na),t(m,sa),t(m,v),t(v,aa),t(v,bn),t(bn,ta),t(v,pa),t(v,Dn),t(Dn,ea),t(m,oa),t(m,C),t(C,ca),t(C,In),t(In,la),t(C,ua),t(m,ia),t(m,H),t(H,ra),t(H,gn),t(gn,ka),t(H,fa),p(n,Xn,a),p(n,T,a),t(T,ma),p(n,ns,a),p(n,U,a),t(U,da),p(n,ss,a),p(n,rn,a),t(rn,ha),p(n,as,a),p(n,x,a),x.innerHTML=fp,p(n,ts,a),p(n,L,a),t(L,wa),p(n,ps,a),p(n,kn,a),t(kn,va),p(n,es,a),p(n,R,a),R.innerHTML=mp,p(n,os,a),p(n,J,a),t(J,jn),t(jn,ya),t(J,Pa),p(n,cs,a),p(n,O,a),t(O,Ea),p(n,ls,a),p(n,fn,a),t(fn,_a),p(n,us,a),p(n,W,a),W.innerHTML=dp,p(n,is,a),p(n,q,a),t(q,ba),p(n,rs,a),p(n,mn,a),t(mn,Da),p(n,ks,a),p(n,B,a),B.innerHTML=hp,p(n,fs,a),p(n,F,a),t(F,Ia),p(n,ms,a),p(n,dn,a),t(dn,ga),p(n,ds,a),p(n,N,a),N.innerHTML=wp,p(n,hs,a),p(n,y,a),t(y,ja),t(y,An),t(An,Aa),t(y,Ma),p(n,ws,a),p(n,G,a),t(G,Sa),p(n,vs,a),p(n,P,a),t(P,Ca),t(P,Mn),t(Mn,Ha),t(P,Ta),p(n,ys,a),p(n,$,a),$.innerHTML=vp,p(n,Ps,a),p(n,E,a),t(E,Ua),t(E,Sn),t(Sn,xa),t(E,La),p(n,Es,a),p(n,Y,a),t(Y,Ra),p(n,_s,a),p(n,z,a),t(z,Ja),p(n,bs,a),p(n,K,a),K.innerHTML=yp,p(n,Ds,a),p(n,Z,a),t(Z,Oa),p(n,Is,a),p(n,Q,a),Q.innerHTML=Pp,p(n,gs,a),p(n,V,a),t(V,Wa),p(n,js,a),p(n,X,a),X.innerHTML=Ep,p(n,As,a),p(n,nn,a),t(nn,qa),p(n,Ms,a),p(n,hn,a),t(hn,Ba),p(n,Ss,a),p(n,wn,a),t(wn,Fa),p(n,Cs,a),p(n,f,a),t(f,Cn),t(Cn,Na),t(f,Ga),t(f,w),t(w,$a),t(w,Hn),t(Hn,Ya),t(w,za),t(w,Tn),t(Tn,Ka),t(w,Za),t(f,Qa),t(f,vn),t(vn,Un),t(Un,Va),t(vn,Xa),t(f,nt),t(f,yn),t(yn,xn),t(xn,st),t(yn,at),t(f,tt),t(f,Ln),t(Ln,pt),p(n,Hs,a),p(n,Pn,a),t(Pn,et),p(n,Ts,a),p(n,sn,a),t(sn,ot),p(n,Us,a),p(n,_,a),t(_,Rn),t(Rn,an),t(an,ct),t(_,lt),t(_,Jn),t(Jn,tn),t(tn,ut)},p:ft,i:ft,o:ft,d(n){n&&s(h),n&&s(Wn),n&&s(D),n&&s(qn),n&&s(pn),n&&s(Bn),n&&s(I),n&&s(Fn),n&&s(en),n&&s(Nn),n&&s(on),n&&s(Gn),n&&s(g),n&&s($n),n&&s(cn),n&&s(Yn),n&&s(j),n&&s(zn),n&&s(A),n&&s(Kn),n&&s(ln),n&&s(Zn),n&&s(M),n&&s(Qn),n&&s(un),n&&s(Vn),n&&s(m),n&&s(Xn),n&&s(T),n&&s(ns),n&&s(U),n&&s(ss),n&&s(rn),n&&s(as),n&&s(x),n&&s(ts),n&&s(L),n&&s(ps),n&&s(kn),n&&s(es),n&&s(R),n&&s(os),n&&s(J),n&&s(cs),n&&s(O),n&&s(ls),n&&s(fn),n&&s(us),n&&s(W),n&&s(is),n&&s(q),n&&s(rs),n&&s(mn),n&&s(ks),n&&s(B),n&&s(fs),n&&s(F),n&&s(ms),n&&s(dn),n&&s(ds),n&&s(N),n&&s(hs),n&&s(y),n&&s(ws),n&&s(G),n&&s(vs),n&&s(P),n&&s(ys),n&&s($),n&&s(Ps),n&&s(E),n&&s(Es),n&&s(Y),n&&s(_s),n&&s(z),n&&s(bs),n&&s(K),n&&s(Ds),n&&s(Z),n&&s(Is),n&&s(Q),n&&s(gs),n&&s(V),n&&s(js),n&&s(X),n&&s(As),n&&s(nn),n&&s(Ms),n&&s(hn),n&&s(Ss),n&&s(wn),n&&s(Cs),n&&s(f),n&&s(Hs),n&&s(Pn),n&&s(Ts),n&&s(sn),n&&s(Us),n&&s(_)}}}const Op={title:"Understanding JavaScript Promises for Beginners: A Practical Guide",description:"Learn how to work with JavaScript Promises to handle asynchronous operations effectively. This beginner-friendly guide explains Promises with practical examples, common patterns, and solutions to typical problems new developers face.",date:"2023-11-10T00:00:00.000Z",published:!0};class Wp extends Up{constructor(h){super(),xp(this,h,null,Rp,Lp,{})}}export{Wp as default,Op as metadata};
