import{S as ju,i as Fu,s as Uu,k as i,q as n,a as c,l as a,m as r,r as f,h as t,c as p,n as u,b as o,C as l,K as yf}from"./index.8762ca70.js";function Yu(Fp){let M,fi,ss,j,ci,os,at,pi,is,F,ui,as,rt,mi,rs,d,nt,el,hi,vi,di,ft,tl,Ei,bi,yi,ct,ll,_i,wi,ki,pt,sl,gi,Ci,Gi,ut,ol,Li,Pi,ns,U,Hi,fs,Y,Ri,cs,mt,Ti,ps,I,il,Mi,Ii,V,Ai,us,q,al,Si,Di,ms,z,Up=`<code class="language-bash"><span class="token comment"># Using Homebrew</span>
brew <span class="token function">install</span> <span class="token function">git</span>

<span class="token comment"># Or using the installer from git-scm.com</span></code>`,hs,K,rl,Oi,Bi,vs,Z,Yp=`<code class="language-bash"><span class="token comment"># Ubuntu/Debian</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span>

<span class="token comment"># Fedora</span>
<span class="token function">sudo</span> dnf <span class="token function">install</span> <span class="token function">git</span></code>`,ds,J,xi,Es,ht,Wi,bs,Q,Vp=`<code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"Your Name"</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"your.email@example.com"</span></code>`,ys,vt,Ni,_s,X,ji,ws,dt,Fi,ks,$,qp=`<code class="language-bash"><span class="token comment"># Create a new directory for your project</span>
<span class="token function">mkdir</span> my-project
<span class="token builtin class-name">cd</span> my-project

<span class="token comment"># Initialize a new Git repository</span>
<span class="token function">git</span> init</code>`,gs,Et,Ui,Cs,ee,Yi,Gs,bt,Vi,Ls,_,nl,qi,zi,fl,Ki,Zi,cl,Ji,Qi,pl,Xi,Ps,yt,$i,Hs,te,ea,Rs,_t,ta,Ts,le,zp='<code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"# My Project"</span> <span class="token operator">></span> README.md</code>',Ms,se,la,Is,wt,sa,As,oe,Kp='<code class="language-bash"><span class="token function">git</span> status</code>',Ss,A,oa,ul,ia,aa,Ds,ie,ra,Os,kt,na,Bs,ae,Zp=`<code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> README.md

<span class="token comment"># To add all changed files</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></code>`,xs,re,fa,Ws,gt,ca,Ns,ne,Jp='<code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Add README file"</span></code>',js,Ct,pa,Fs,fe,ua,Us,Gt,ma,Ys,ce,Qp='<code class="language-bash"><span class="token function">git</span> log</code>',Vs,Lt,ha,qs,pe,va,zs,Pt,da,Ks,ue,Ea,Zs,w,Ht,ba,me,ya,_a,ml,wa,ka,hl,ga,Ca,vl,Ga,Js,he,La,Qs,ve,Xp='<code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/yourusername/your-repo-name.git</code>',Xs,de,Pa,$s,Ee,$p='<code class="language-bash"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main</code>',eo,P,Ha,dl,Ra,Ta,El,Ma,Ia,to,be,Aa,lo,Rt,Sa,so,ye,eu='<code class="language-bash"><span class="token function">git</span> clone https://github.com/username/repository.git</code>',oo,Tt,Da,io,_e,Oa,ao,Mt,Ba,ro,we,xa,no,ke,tu=`<code class="language-bash"><span class="token comment"># Create a new branch</span>
<span class="token function">git</span> branch feature-login

<span class="token comment"># Switch to the new branch</span>
<span class="token function">git</span> checkout feature-login

<span class="token comment"># Or do both in one command</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature-login</code>`,fo,ge,Wa,co,It,Na,po,Ce,lu=`<code class="language-bash"><span class="token comment"># Make some changes</span>
<span class="token builtin class-name">echo</span> <span class="token string">"Login functionality"</span> <span class="token operator">></span> login.js

<span class="token comment"># Stage and commit</span>
<span class="token function">git</span> <span class="token function">add</span> login.js
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Add login functionality"</span></code>`,uo,Ge,ja,mo,Le,su=`<code class="language-bash"><span class="token comment"># Switch back to the main branch</span>
<span class="token function">git</span> checkout main

<span class="token comment"># Switch to the feature branch again</span>
<span class="token function">git</span> checkout feature-login</code>`,ho,Pe,Fa,vo,At,Ua,Eo,He,ou=`<code class="language-bash"><span class="token comment"># First, switch to the branch you want to merge into</span>
<span class="token function">git</span> checkout main

<span class="token comment"># Then merge the feature branch</span>
<span class="token function">git</span> merge feature-login</code>`,bo,Re,Ya,yo,St,Va,_o,Te,iu='<code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> feature-login</code>',wo,Me,qa,ko,Dt,za,go,Ie,Ka,Co,Ot,Za,Go,Ae,au=`<code class="language-undefined">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
# My Awesome Project
=======
# My Cool Project
&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature-branch</code>`,Lo,E,Ja,bl,Qa,Xa,yl,$a,er,_l,tr,lr,wl,sr,or,Po,Se,ir,Ho,b,kl,ar,rr,gl,nr,fr,L,cr,Cl,pr,ur,Gl,mr,hr,Ll,vr,dr,Er,Pl,br,yr,Hl,_r,Ro,De,ru=`<code class="language-bash"><span class="token comment"># After resolving the conflict</span>
<span class="token function">git</span> <span class="token function">add</span> README.md
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Resolve merge conflict in README"</span></code>`,To,Oe,wr,Mo,Be,kr,Io,xe,nu=`<code class="language-bash"><span class="token comment"># Undo the last commit but keep the changes</span>
<span class="token function">git</span> reset HEAD~1

<span class="token comment"># Switch to the correct branch</span>
<span class="token function">git</span> checkout correct-branch

<span class="token comment"># Stage and commit the changes</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Your commit message"</span></code>`,Ao,We,gr,So,Ne,fu=`<code class="language-bash"><span class="token comment"># Undo the last commit but keep the changes staged</span>
<span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD~1

<span class="token comment"># Undo the last commit and unstage the changes</span>
<span class="token function">git</span> reset HEAD~1

<span class="token comment"># Undo the last commit and discard the changes (be careful!)</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~1</code>`,Do,je,Cr,Oo,Fe,cu=`<code class="language-bash"><span class="token comment"># Save changes to the stash</span>
<span class="token function">git</span> stash

<span class="token comment"># Do something else, like switch branches</span>
<span class="token function">git</span> checkout another-branch

<span class="token comment"># Apply the stashed changes later</span>
<span class="token function">git</span> stash apply</code>`,Bo,Ue,Gr,xo,Ye,pu=`<code class="language-bash"><span class="token comment"># Unstage a specific file</span>
<span class="token function">git</span> reset HEAD filename

<span class="token comment"># Unstage all files</span>
<span class="token function">git</span> reset HEAD</code>`,Wo,Ve,Lr,No,qe,uu='<code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">-m</span> <span class="token string">"New commit message"</span></code>',jo,ze,Pr,Fo,h,Bt,Rl,Hr,Rr,Tr,xt,Tl,Mr,Ir,Ar,Wt,Ml,Sr,Dr,Or,Nt,Il,Br,xr,Wr,jt,Al,Nr,jr,Fr,S,Sl,Ur,Yr,Dl,Vr,qr,Uo,Ke,zr,Yo,D,Kr,Ol,Zr,Jr,Vo,Ze,mu=`<code class="language-bash"><span class="token comment"># Create a .gitignore file</span>
<span class="token function">touch</span> .gitignore</code>`,qo,Ft,Qr,zo,Je,hu=`<code class="language-undefined"># Node.js
node_modules/
npm-debug.log

# Build directories
dist/
build/

# Environment variables
.env
.env.local

# Editor files
.vscode/
.idea/
*.swp

# OS files
.DS_Store
Thumbs.db</code>`,Ko,Qe,Xr,Zo,Xe,$r,Jo,k,Bl,en,tn,xl,ln,sn,Wl,on,an,Nl,rn,Qo,$e,nn,Xo,v,jl,fn,cn,Fl,pn,un,Ul,mn,hn,Yl,vn,dn,Vl,En,bn,ql,yn,$o,et,_n,ei,Ut,wn,ti,Yt,kn,li,m,Vt,zl,gn,Cn,Gn,qt,Kl,Ln,Pn,Hn,zt,Zl,Rn,Tn,Mn,Kt,Jl,In,An,Sn,Zt,Ql,Dn,On,Bn,Xl,xn,Wn,$l,Nn,si,Jt,jn,oi,tt,Fn,ii,g,es,lt,Un,Yn,ts,st,Vn,qn,Qt,ot,zn,Kn,Zn,Xt,it,Jn,Qn;return{c(){M=i("h1"),fi=n("Git Basics for Beginners: A Practical Guide to Version Control"),ss=c(),j=i("h2"),ci=n("Introduction"),os=c(),at=i("p"),pi=n("If you’re new to programming, you’ve probably heard that you should be using Git, but might not understand why or how to get started. Git is a version control system that helps you track changes to your code, collaborate with others, and maintain different versions of your project. In this guide, I’ll walk you through the essential Git concepts and commands with practical examples that you can start using right away."),is=c(),F=i("h2"),ui=n("Why Use Git?"),as=c(),rt=i("p"),mi=n("Before diving into commands, let’s understand why Git is so important:"),rs=c(),d=i("ol"),nt=i("li"),el=i("strong"),hi=n("Track changes"),vi=n(": Git keeps a history of all changes to your code, so you can see what changed, when, and by whom."),di=c(),ft=i("li"),tl=i("strong"),Ei=n("Experiment safely"),bi=n(": Create branches to try new ideas without affecting your main code."),yi=c(),ct=i("li"),ll=i("strong"),_i=n("Collaborate"),wi=n(": Work with others on the same project without overwriting each other’s changes."),ki=c(),pt=i("li"),sl=i("strong"),gi=n("Backup"),Ci=n(": Your code is stored both locally and remotely (if using GitHub, GitLab, etc.)."),Gi=c(),ut=i("li"),ol=i("strong"),Li=n("Revert mistakes"),Pi=n(": Made a mistake? Git makes it easy to go back to a previous working state."),ns=c(),U=i("h2"),Hi=n("Getting Started with Git"),fs=c(),Y=i("h3"),Ri=n("Installing Git"),cs=c(),mt=i("p"),Ti=n("First, you need to install Git on your computer:"),ps=c(),I=i("p"),il=i("strong"),Mi=n("For Windows"),Ii=n(`:
Download and install from `),V=i("a"),Ai=n("git-scm.com"),us=c(),q=i("p"),al=i("strong"),Si=n("For macOS"),Di=n(":"),ms=c(),z=i("pre"),hs=c(),K=i("p"),rl=i("strong"),Oi=n("For Linux"),Bi=n(":"),vs=c(),Z=i("pre"),ds=c(),J=i("h3"),xi=n("Configuring Git"),Es=c(),ht=i("p"),Wi=n("After installation, set up your identity:"),bs=c(),Q=i("pre"),ys=c(),vt=i("p"),Ni=n("This information will be included with every commit you make."),_s=c(),X=i("h2"),ji=n("Creating Your First Git Repository"),ws=c(),dt=i("p"),Fi=n("A repository (or “repo”) is a project tracked by Git. Let’s create one:"),ks=c(),$=i("pre"),gs=c(),Et=i("p"),Ui=n("You should see a message like “Initialized empty Git repository in /path/to/my-project/.git/“."),Cs=c(),ee=i("h2"),Yi=n("The Basic Git Workflow"),Gs=c(),bt=i("p"),Vi=n("The typical Git workflow involves these steps:"),Ls=c(),_=i("ol"),nl=i("li"),qi=n("Make changes to your files"),zi=c(),fl=i("li"),Ki=n("Stage the changes you want to commit"),Zi=c(),cl=i("li"),Ji=n("Commit the staged changes with a message"),Qi=c(),pl=i("li"),Xi=n("Push the commits to a remote repository (optional)"),Ps=c(),yt=i("p"),$i=n("Let’s go through each step:"),Hs=c(),te=i("h3"),ea=n("1. Making Changes"),Rs=c(),_t=i("p"),ta=n("Create a file in your project:"),Ts=c(),le=i("pre"),Ms=c(),se=i("h3"),la=n("2. Checking Status"),Is=c(),wt=i("p"),sa=n("To see what files have been changed:"),As=c(),oe=i("pre"),Ss=c(),A=i("p"),oa=n("You should see "),ul=i("code"),ia=n("README.md"),aa=n(" listed as an untracked file."),Ds=c(),ie=i("h3"),ra=n("3. Staging Changes"),Os=c(),kt=i("p"),na=n("Before committing, you need to stage the files you want to include:"),Bs=c(),ae=i("pre"),xs=c(),re=i("h3"),fa=n("4. Committing Changes"),Ws=c(),gt=i("p"),ca=n("Now commit the staged changes with a descriptive message:"),Ns=c(),ne=i("pre"),js=c(),Ct=i("p"),pa=n("A commit is like a snapshot of your project at a specific point in time."),Fs=c(),fe=i("h3"),ua=n("5. Viewing Commit History"),Us=c(),Gt=i("p"),ma=n("To see your commit history:"),Ys=c(),ce=i("pre"),Vs=c(),Lt=i("p"),ha=n("This shows all commits with their messages, authors, and timestamps."),qs=c(),pe=i("h2"),va=n("Working with Remote Repositories"),zs=c(),Pt=i("p"),da=n("To collaborate with others or back up your code, you’ll want to use a remote repository like GitHub, GitLab, or Bitbucket."),Ks=c(),ue=i("h3"),Ea=n("Creating a Remote Repository"),Zs=c(),w=i("ol"),Ht=i("li"),ba=n("Sign up for a GitHub account at "),me=i("a"),ya=n("github.com"),_a=c(),ml=i("li"),wa=n("Click the ”+” icon and select “New repository”"),ka=c(),hl=i("li"),ga=n("Name your repository and click “Create repository”"),Ca=c(),vl=i("li"),Ga=n("Follow the instructions to push your existing repository"),Js=c(),he=i("h3"),La=n("Connecting to a Remote Repository"),Qs=c(),ve=i("pre"),Xs=c(),de=i("h3"),Pa=n("Pushing to a Remote Repository"),$s=c(),Ee=i("pre"),eo=c(),P=i("p"),Ha=n("This pushes your commits to the remote repository named “origin” on the “main” branch. The "),dl=i("code"),Ra=n("-u"),Ta=n(" flag sets up tracking, so in the future you can simply use "),El=i("code"),Ma=n("git push"),Ia=n("."),to=c(),be=i("h3"),Aa=n("Cloning an Existing Repository"),lo=c(),Rt=i("p"),Sa=n("To download a copy of an existing repository:"),so=c(),ye=i("pre"),oo=c(),Tt=i("p"),Da=n("This creates a new directory with the repository name, downloads all the code, and sets up the remote connection automatically."),io=c(),_e=i("h2"),Oa=n("Branching and Merging"),ao=c(),Mt=i("p"),Ba=n("Branches allow you to work on different features or fixes in isolation."),ro=c(),we=i("h3"),xa=n("Creating a Branch"),no=c(),ke=i("pre"),fo=c(),ge=i("h3"),Wa=n("Working with Branches"),co=c(),It=i("p"),Na=n("Make changes, stage, and commit as usual:"),po=c(),Ce=i("pre"),uo=c(),Ge=i("h3"),ja=n("Switching Between Branches"),mo=c(),Le=i("pre"),ho=c(),Pe=i("h3"),Fa=n("Merging Branches"),vo=c(),At=i("p"),Ua=n("When your feature is complete, you can merge it back to the main branch:"),Eo=c(),He=i("pre"),bo=c(),Re=i("h3"),Ya=n("Deleting a Branch"),yo=c(),St=i("p"),Va=n("After merging, you can delete the feature branch:"),_o=c(),Te=i("pre"),wo=c(),Me=i("h2"),qa=n("Handling Merge Conflicts"),ko=c(),Dt=i("p"),za=n("Sometimes Git can’t automatically merge changes because the same lines were modified in different ways. This is called a merge conflict."),go=c(),Ie=i("h3"),Ka=n("Example of a Merge Conflict"),Co=c(),Ot=i("p"),Za=n("Let’s say you and a teammate both modified the same line in README.md:"),Go=c(),Ae=i("pre"),Lo=c(),E=i("p"),Ja=n("The part between "),bl=i("code"),Qa=n("<<<<<<< HEAD"),Xa=n(" and "),yl=i("code"),$a=n("======="),er=n(" is your current branch’s version. The part between "),_l=i("code"),tr=n("======="),lr=n(" and "),wl=i("code"),sr=n(">>>>>>> feature-branch"),or=n(" is the incoming branch’s version."),Po=c(),Se=i("h3"),ir=n("Resolving Merge Conflicts"),Ho=c(),b=i("ol"),kl=i("li"),ar=n("Open the file with conflicts in your editor"),rr=c(),gl=i("li"),nr=n("Decide which version to keep, or create a combination"),fr=c(),L=i("li"),cr=n("Remove the conflict markers ("),Cl=i("code"),pr=n("<<<<<<<"),ur=n(", "),Gl=i("code"),mr=n("======="),hr=n(", "),Ll=i("code"),vr=n(">>>>>>>"),dr=n(")"),Er=c(),Pl=i("li"),br=n("Save the file"),yr=c(),Hl=i("li"),_r=n("Stage and commit the resolved file"),Ro=c(),De=i("pre"),To=c(),Oe=i("h2"),wr=n("Common Git Problems and Solutions"),Mo=c(),Be=i("h3"),kr=n("Problem 1: Accidentally Committed to the Wrong Branch"),Io=c(),xe=i("pre"),Ao=c(),We=i("h3"),gr=n("Problem 2: Need to Undo a Commit"),So=c(),Ne=i("pre"),Do=c(),je=i("h3"),Cr=n("Problem 3: Want to Temporarily Save Changes Without Committing"),Oo=c(),Fe=i("pre"),Bo=c(),Ue=i("h3"),Gr=n("Problem 4: Accidentally Added a File You Don’t Want to Commit"),xo=c(),Ye=i("pre"),Wo=c(),Ve=i("h3"),Lr=n("Problem 5: Need to Change the Last Commit Message"),No=c(),qe=i("pre"),jo=c(),ze=i("h2"),Pr=n("Best Practices for Git"),Fo=c(),h=i("ol"),Bt=i("li"),Rl=i("strong"),Hr=n("Commit often"),Rr=n(": Make small, focused commits rather than large ones"),Tr=c(),xt=i("li"),Tl=i("strong"),Mr=n("Write clear commit messages"),Ir=n(": Describe what and why, not how"),Ar=c(),Wt=i("li"),Ml=i("strong"),Sr=n("Create a .gitignore file"),Dr=n(": Exclude files like build artifacts and dependencies"),Or=c(),Nt=i("li"),Il=i("strong"),Br=n("Use branches for features/fixes"),xr=n(": Keep your main branch stable"),Wr=c(),jt=i("li"),Al=i("strong"),Nr=n("Pull before pushing"),jr=n(": Always get the latest changes before pushing yours"),Fr=c(),S=i("li"),Sl=i("strong"),Ur=n("Review changes before committing"),Yr=n(": Use "),Dl=i("code"),Vr=n("git diff"),qr=n(" to see what you’re about to commit"),Uo=c(),Ke=i("h2"),zr=n("Creating a .gitignore File"),Yo=c(),D=i("p"),Kr=n("A "),Ol=i("code"),Zr=n(".gitignore"),Jr=n(" file tells Git which files to ignore:"),Vo=c(),Ze=i("pre"),qo=c(),Ft=i("p"),Qr=n("Add common patterns to ignore:"),zo=c(),Je=i("pre"),Ko=c(),Qe=i("h2"),Xr=n("Git Workflows for Beginners"),Zo=c(),Xe=i("h3"),$r=n("Solo Developer Workflow"),Jo=c(),k=i("ol"),Bl=i("li"),en=n("Create a repository"),tn=c(),xl=i("li"),ln=n("Make changes and commit regularly"),sn=c(),Wl=i("li"),on=n("Push to a remote repository for backup"),an=c(),Nl=i("li"),rn=n("Use branches for experimental features"),Qo=c(),$e=i("h3"),nn=n("Team Workflow (GitHub Flow)"),Xo=c(),v=i("ol"),jl=i("li"),fn=n("Create a branch for a feature/fix"),cn=c(),Fl=i("li"),pn=n("Make changes and commit"),un=c(),Ul=i("li"),mn=n("Push the branch to GitHub"),hn=c(),Yl=i("li"),vn=n("Create a Pull Request (PR)"),dn=c(),Vl=i("li"),En=n("Get code review and make changes if needed"),bn=c(),ql=i("li"),yn=n("Merge the PR when approved"),$o=c(),et=i("h2"),_n=n("Conclusion"),ei=c(),Ut=i("p"),wn=n("Git might seem complex at first, but starting with these basic commands will help you build a solid foundation. As you get more comfortable, you can explore more advanced features."),ti=c(),Yt=i("p"),kn=n("Remember these key points:"),li=c(),m=i("ul"),Vt=i("li"),zl=i("code"),gn=n("git init"),Cn=n(" creates a new repository"),Gn=c(),qt=i("li"),Kl=i("code"),Ln=n("git add"),Pn=n(" stages changes"),Hn=c(),zt=i("li"),Zl=i("code"),Rn=n("git commit"),Tn=n(" saves staged changes"),Mn=c(),Kt=i("li"),Jl=i("code"),In=n("git push"),An=n(" uploads commits to a remote repository"),Sn=c(),Zt=i("li"),Ql=i("code"),Dn=n("git pull"),On=n(" downloads changes from a remote repository"),Bn=c(),Xl=i("li"),xn=n("Branches let you work on features in isolation"),Wn=c(),$l=i("li"),Nn=n("Commit often with clear messages"),si=c(),Jt=i("p"),jn=n("With these Git basics, you’re well on your way to better code management and collaboration."),oi=c(),tt=i("h2"),Fn=n("Further Resources"),ii=c(),g=i("ul"),es=i("li"),lt=i("a"),Un=n("Git Documentation"),Yn=c(),ts=i("li"),st=i("a"),Vn=n("GitHub Guides"),qn=c(),Qt=i("li"),ot=i("a"),zn=n("Learn Git Branching"),Kn=n(" - An interactive tutorial"),Zn=c(),Xt=i("li"),it=i("a"),Jn=n("Oh Shit, Git!?!"),Qn=n(" - Common Git mistakes and how to fix them"),this.h()},l(e){M=a(e,"H1",{id:!0});var s=r(M);fi=f(s,"Git Basics for Beginners: A Practical Guide to Version Control"),s.forEach(t),ss=p(e),j=a(e,"H2",{id:!0});var _f=r(j);ci=f(_f,"Introduction"),_f.forEach(t),os=p(e),at=a(e,"P",{});var wf=r(at);pi=f(wf,"If you’re new to programming, you’ve probably heard that you should be using Git, but might not understand why or how to get started. Git is a version control system that helps you track changes to your code, collaborate with others, and maintain different versions of your project. In this guide, I’ll walk you through the essential Git concepts and commands with practical examples that you can start using right away."),wf.forEach(t),is=p(e),F=a(e,"H2",{id:!0});var kf=r(F);ui=f(kf,"Why Use Git?"),kf.forEach(t),as=p(e),rt=a(e,"P",{});var gf=r(rt);mi=f(gf,"Before diving into commands, let’s understand why Git is so important:"),gf.forEach(t),rs=p(e),d=a(e,"OL",{});var H=r(d);nt=a(H,"LI",{});var Xn=r(nt);el=a(Xn,"STRONG",{});var Cf=r(el);hi=f(Cf,"Track changes"),Cf.forEach(t),vi=f(Xn,": Git keeps a history of all changes to your code, so you can see what changed, when, and by whom."),Xn.forEach(t),di=p(H),ft=a(H,"LI",{});var $n=r(ft);tl=a($n,"STRONG",{});var Gf=r(tl);Ei=f(Gf,"Experiment safely"),Gf.forEach(t),bi=f($n,": Create branches to try new ideas without affecting your main code."),$n.forEach(t),yi=p(H),ct=a(H,"LI",{});var ef=r(ct);ll=a(ef,"STRONG",{});var Lf=r(ll);_i=f(Lf,"Collaborate"),Lf.forEach(t),wi=f(ef,": Work with others on the same project without overwriting each other’s changes."),ef.forEach(t),ki=p(H),pt=a(H,"LI",{});var tf=r(pt);sl=a(tf,"STRONG",{});var Pf=r(sl);gi=f(Pf,"Backup"),Pf.forEach(t),Ci=f(tf,": Your code is stored both locally and remotely (if using GitHub, GitLab, etc.)."),tf.forEach(t),Gi=p(H),ut=a(H,"LI",{});var lf=r(ut);ol=a(lf,"STRONG",{});var Hf=r(ol);Li=f(Hf,"Revert mistakes"),Hf.forEach(t),Pi=f(lf,": Made a mistake? Git makes it easy to go back to a previous working state."),lf.forEach(t),H.forEach(t),ns=p(e),U=a(e,"H2",{id:!0});var Rf=r(U);Hi=f(Rf,"Getting Started with Git"),Rf.forEach(t),fs=p(e),Y=a(e,"H3",{id:!0});var Tf=r(Y);Ri=f(Tf,"Installing Git"),Tf.forEach(t),cs=p(e),mt=a(e,"P",{});var Mf=r(mt);Ti=f(Mf,"First, you need to install Git on your computer:"),Mf.forEach(t),ps=p(e),I=a(e,"P",{});var ai=r(I);il=a(ai,"STRONG",{});var If=r(il);Mi=f(If,"For Windows"),If.forEach(t),Ii=f(ai,`:
Download and install from `),V=a(ai,"A",{href:!0,rel:!0});var Af=r(V);Ai=f(Af,"git-scm.com"),Af.forEach(t),ai.forEach(t),us=p(e),q=a(e,"P",{});var sf=r(q);al=a(sf,"STRONG",{});var Sf=r(al);Si=f(Sf,"For macOS"),Sf.forEach(t),Di=f(sf,":"),sf.forEach(t),ms=p(e),z=a(e,"PRE",{class:!0});var vu=r(z);vu.forEach(t),hs=p(e),K=a(e,"P",{});var of=r(K);rl=a(of,"STRONG",{});var Df=r(rl);Oi=f(Df,"For Linux"),Df.forEach(t),Bi=f(of,":"),of.forEach(t),vs=p(e),Z=a(e,"PRE",{class:!0});var du=r(Z);du.forEach(t),ds=p(e),J=a(e,"H3",{id:!0});var Of=r(J);xi=f(Of,"Configuring Git"),Of.forEach(t),Es=p(e),ht=a(e,"P",{});var Bf=r(ht);Wi=f(Bf,"After installation, set up your identity:"),Bf.forEach(t),bs=p(e),Q=a(e,"PRE",{class:!0});var Eu=r(Q);Eu.forEach(t),ys=p(e),vt=a(e,"P",{});var xf=r(vt);Ni=f(xf,"This information will be included with every commit you make."),xf.forEach(t),_s=p(e),X=a(e,"H2",{id:!0});var Wf=r(X);ji=f(Wf,"Creating Your First Git Repository"),Wf.forEach(t),ws=p(e),dt=a(e,"P",{});var Nf=r(dt);Fi=f(Nf,"A repository (or “repo”) is a project tracked by Git. Let’s create one:"),Nf.forEach(t),ks=p(e),$=a(e,"PRE",{class:!0});var bu=r($);bu.forEach(t),gs=p(e),Et=a(e,"P",{});var jf=r(Et);Ui=f(jf,"You should see a message like “Initialized empty Git repository in /path/to/my-project/.git/“."),jf.forEach(t),Cs=p(e),ee=a(e,"H2",{id:!0});var Ff=r(ee);Yi=f(Ff,"The Basic Git Workflow"),Ff.forEach(t),Gs=p(e),bt=a(e,"P",{});var Uf=r(bt);Vi=f(Uf,"The typical Git workflow involves these steps:"),Uf.forEach(t),Ls=p(e),_=a(e,"OL",{});var O=r(_);nl=a(O,"LI",{});var Yf=r(nl);qi=f(Yf,"Make changes to your files"),Yf.forEach(t),zi=p(O),fl=a(O,"LI",{});var Vf=r(fl);Ki=f(Vf,"Stage the changes you want to commit"),Vf.forEach(t),Zi=p(O),cl=a(O,"LI",{});var qf=r(cl);Ji=f(qf,"Commit the staged changes with a message"),qf.forEach(t),Qi=p(O),pl=a(O,"LI",{});var zf=r(pl);Xi=f(zf,"Push the commits to a remote repository (optional)"),zf.forEach(t),O.forEach(t),Ps=p(e),yt=a(e,"P",{});var Kf=r(yt);$i=f(Kf,"Let’s go through each step:"),Kf.forEach(t),Hs=p(e),te=a(e,"H3",{id:!0});var Zf=r(te);ea=f(Zf,"1. Making Changes"),Zf.forEach(t),Rs=p(e),_t=a(e,"P",{});var Jf=r(_t);ta=f(Jf,"Create a file in your project:"),Jf.forEach(t),Ts=p(e),le=a(e,"PRE",{class:!0});var yu=r(le);yu.forEach(t),Ms=p(e),se=a(e,"H3",{id:!0});var Qf=r(se);la=f(Qf,"2. Checking Status"),Qf.forEach(t),Is=p(e),wt=a(e,"P",{});var Xf=r(wt);sa=f(Xf,"To see what files have been changed:"),Xf.forEach(t),As=p(e),oe=a(e,"PRE",{class:!0});var _u=r(oe);_u.forEach(t),Ss=p(e),A=a(e,"P",{});var ri=r(A);oa=f(ri,"You should see "),ul=a(ri,"CODE",{});var $f=r(ul);ia=f($f,"README.md"),$f.forEach(t),aa=f(ri," listed as an untracked file."),ri.forEach(t),Ds=p(e),ie=a(e,"H3",{id:!0});var ec=r(ie);ra=f(ec,"3. Staging Changes"),ec.forEach(t),Os=p(e),kt=a(e,"P",{});var tc=r(kt);na=f(tc,"Before committing, you need to stage the files you want to include:"),tc.forEach(t),Bs=p(e),ae=a(e,"PRE",{class:!0});var wu=r(ae);wu.forEach(t),xs=p(e),re=a(e,"H3",{id:!0});var lc=r(re);fa=f(lc,"4. Committing Changes"),lc.forEach(t),Ws=p(e),gt=a(e,"P",{});var sc=r(gt);ca=f(sc,"Now commit the staged changes with a descriptive message:"),sc.forEach(t),Ns=p(e),ne=a(e,"PRE",{class:!0});var ku=r(ne);ku.forEach(t),js=p(e),Ct=a(e,"P",{});var oc=r(Ct);pa=f(oc,"A commit is like a snapshot of your project at a specific point in time."),oc.forEach(t),Fs=p(e),fe=a(e,"H3",{id:!0});var ic=r(fe);ua=f(ic,"5. Viewing Commit History"),ic.forEach(t),Us=p(e),Gt=a(e,"P",{});var ac=r(Gt);ma=f(ac,"To see your commit history:"),ac.forEach(t),Ys=p(e),ce=a(e,"PRE",{class:!0});var gu=r(ce);gu.forEach(t),Vs=p(e),Lt=a(e,"P",{});var rc=r(Lt);ha=f(rc,"This shows all commits with their messages, authors, and timestamps."),rc.forEach(t),qs=p(e),pe=a(e,"H2",{id:!0});var nc=r(pe);va=f(nc,"Working with Remote Repositories"),nc.forEach(t),zs=p(e),Pt=a(e,"P",{});var fc=r(Pt);da=f(fc,"To collaborate with others or back up your code, you’ll want to use a remote repository like GitHub, GitLab, or Bitbucket."),fc.forEach(t),Ks=p(e),ue=a(e,"H3",{id:!0});var cc=r(ue);Ea=f(cc,"Creating a Remote Repository"),cc.forEach(t),Zs=p(e),w=a(e,"OL",{});var B=r(w);Ht=a(B,"LI",{});var af=r(Ht);ba=f(af,"Sign up for a GitHub account at "),me=a(af,"A",{href:!0,rel:!0});var pc=r(me);ya=f(pc,"github.com"),pc.forEach(t),af.forEach(t),_a=p(B),ml=a(B,"LI",{});var uc=r(ml);wa=f(uc,"Click the ”+” icon and select “New repository”"),uc.forEach(t),ka=p(B),hl=a(B,"LI",{});var mc=r(hl);ga=f(mc,"Name your repository and click “Create repository”"),mc.forEach(t),Ca=p(B),vl=a(B,"LI",{});var hc=r(vl);Ga=f(hc,"Follow the instructions to push your existing repository"),hc.forEach(t),B.forEach(t),Js=p(e),he=a(e,"H3",{id:!0});var vc=r(he);La=f(vc,"Connecting to a Remote Repository"),vc.forEach(t),Qs=p(e),ve=a(e,"PRE",{class:!0});var Cu=r(ve);Cu.forEach(t),Xs=p(e),de=a(e,"H3",{id:!0});var dc=r(de);Pa=f(dc,"Pushing to a Remote Repository"),dc.forEach(t),$s=p(e),Ee=a(e,"PRE",{class:!0});var Gu=r(Ee);Gu.forEach(t),eo=p(e),P=a(e,"P",{});var $t=r(P);Ha=f($t,"This pushes your commits to the remote repository named “origin” on the “main” branch. The "),dl=a($t,"CODE",{});var Ec=r(dl);Ra=f(Ec,"-u"),Ec.forEach(t),Ta=f($t," flag sets up tracking, so in the future you can simply use "),El=a($t,"CODE",{});var bc=r(El);Ma=f(bc,"git push"),bc.forEach(t),Ia=f($t,"."),$t.forEach(t),to=p(e),be=a(e,"H3",{id:!0});var yc=r(be);Aa=f(yc,"Cloning an Existing Repository"),yc.forEach(t),lo=p(e),Rt=a(e,"P",{});var _c=r(Rt);Sa=f(_c,"To download a copy of an existing repository:"),_c.forEach(t),so=p(e),ye=a(e,"PRE",{class:!0});var Lu=r(ye);Lu.forEach(t),oo=p(e),Tt=a(e,"P",{});var wc=r(Tt);Da=f(wc,"This creates a new directory with the repository name, downloads all the code, and sets up the remote connection automatically."),wc.forEach(t),io=p(e),_e=a(e,"H2",{id:!0});var kc=r(_e);Oa=f(kc,"Branching and Merging"),kc.forEach(t),ao=p(e),Mt=a(e,"P",{});var gc=r(Mt);Ba=f(gc,"Branches allow you to work on different features or fixes in isolation."),gc.forEach(t),ro=p(e),we=a(e,"H3",{id:!0});var Cc=r(we);xa=f(Cc,"Creating a Branch"),Cc.forEach(t),no=p(e),ke=a(e,"PRE",{class:!0});var Pu=r(ke);Pu.forEach(t),fo=p(e),ge=a(e,"H3",{id:!0});var Gc=r(ge);Wa=f(Gc,"Working with Branches"),Gc.forEach(t),co=p(e),It=a(e,"P",{});var Lc=r(It);Na=f(Lc,"Make changes, stage, and commit as usual:"),Lc.forEach(t),po=p(e),Ce=a(e,"PRE",{class:!0});var Hu=r(Ce);Hu.forEach(t),uo=p(e),Ge=a(e,"H3",{id:!0});var Pc=r(Ge);ja=f(Pc,"Switching Between Branches"),Pc.forEach(t),mo=p(e),Le=a(e,"PRE",{class:!0});var Ru=r(Le);Ru.forEach(t),ho=p(e),Pe=a(e,"H3",{id:!0});var Hc=r(Pe);Fa=f(Hc,"Merging Branches"),Hc.forEach(t),vo=p(e),At=a(e,"P",{});var Rc=r(At);Ua=f(Rc,"When your feature is complete, you can merge it back to the main branch:"),Rc.forEach(t),Eo=p(e),He=a(e,"PRE",{class:!0});var Tu=r(He);Tu.forEach(t),bo=p(e),Re=a(e,"H3",{id:!0});var Tc=r(Re);Ya=f(Tc,"Deleting a Branch"),Tc.forEach(t),yo=p(e),St=a(e,"P",{});var Mc=r(St);Va=f(Mc,"After merging, you can delete the feature branch:"),Mc.forEach(t),_o=p(e),Te=a(e,"PRE",{class:!0});var Mu=r(Te);Mu.forEach(t),wo=p(e),Me=a(e,"H2",{id:!0});var Ic=r(Me);qa=f(Ic,"Handling Merge Conflicts"),Ic.forEach(t),ko=p(e),Dt=a(e,"P",{});var Ac=r(Dt);za=f(Ac,"Sometimes Git can’t automatically merge changes because the same lines were modified in different ways. This is called a merge conflict."),Ac.forEach(t),go=p(e),Ie=a(e,"H3",{id:!0});var Sc=r(Ie);Ka=f(Sc,"Example of a Merge Conflict"),Sc.forEach(t),Co=p(e),Ot=a(e,"P",{});var Dc=r(Ot);Za=f(Dc,"Let’s say you and a teammate both modified the same line in README.md:"),Dc.forEach(t),Go=p(e),Ae=a(e,"PRE",{class:!0});var Iu=r(Ae);Iu.forEach(t),Lo=p(e),E=a(e,"P",{});var R=r(E);Ja=f(R,"The part between "),bl=a(R,"CODE",{});var Oc=r(bl);Qa=f(Oc,"<<<<<<< HEAD"),Oc.forEach(t),Xa=f(R," and "),yl=a(R,"CODE",{});var Bc=r(yl);$a=f(Bc,"======="),Bc.forEach(t),er=f(R," is your current branch’s version. The part between "),_l=a(R,"CODE",{});var xc=r(_l);tr=f(xc,"======="),xc.forEach(t),lr=f(R," and "),wl=a(R,"CODE",{});var Wc=r(wl);sr=f(Wc,">>>>>>> feature-branch"),Wc.forEach(t),or=f(R," is the incoming branch’s version."),R.forEach(t),Po=p(e),Se=a(e,"H3",{id:!0});var Nc=r(Se);ir=f(Nc,"Resolving Merge Conflicts"),Nc.forEach(t),Ho=p(e),b=a(e,"OL",{});var T=r(b);kl=a(T,"LI",{});var jc=r(kl);ar=f(jc,"Open the file with conflicts in your editor"),jc.forEach(t),rr=p(T),gl=a(T,"LI",{});var Fc=r(gl);nr=f(Fc,"Decide which version to keep, or create a combination"),Fc.forEach(t),fr=p(T),L=a(T,"LI",{});var x=r(L);cr=f(x,"Remove the conflict markers ("),Cl=a(x,"CODE",{});var Uc=r(Cl);pr=f(Uc,"<<<<<<<"),Uc.forEach(t),ur=f(x,", "),Gl=a(x,"CODE",{});var Yc=r(Gl);mr=f(Yc,"======="),Yc.forEach(t),hr=f(x,", "),Ll=a(x,"CODE",{});var Vc=r(Ll);vr=f(Vc,">>>>>>>"),Vc.forEach(t),dr=f(x,")"),x.forEach(t),Er=p(T),Pl=a(T,"LI",{});var qc=r(Pl);br=f(qc,"Save the file"),qc.forEach(t),yr=p(T),Hl=a(T,"LI",{});var zc=r(Hl);_r=f(zc,"Stage and commit the resolved file"),zc.forEach(t),T.forEach(t),Ro=p(e),De=a(e,"PRE",{class:!0});var Au=r(De);Au.forEach(t),To=p(e),Oe=a(e,"H2",{id:!0});var Kc=r(Oe);wr=f(Kc,"Common Git Problems and Solutions"),Kc.forEach(t),Mo=p(e),Be=a(e,"H3",{id:!0});var Zc=r(Be);kr=f(Zc,"Problem 1: Accidentally Committed to the Wrong Branch"),Zc.forEach(t),Io=p(e),xe=a(e,"PRE",{class:!0});var Su=r(xe);Su.forEach(t),Ao=p(e),We=a(e,"H3",{id:!0});var Jc=r(We);gr=f(Jc,"Problem 2: Need to Undo a Commit"),Jc.forEach(t),So=p(e),Ne=a(e,"PRE",{class:!0});var Du=r(Ne);Du.forEach(t),Do=p(e),je=a(e,"H3",{id:!0});var Qc=r(je);Cr=f(Qc,"Problem 3: Want to Temporarily Save Changes Without Committing"),Qc.forEach(t),Oo=p(e),Fe=a(e,"PRE",{class:!0});var Ou=r(Fe);Ou.forEach(t),Bo=p(e),Ue=a(e,"H3",{id:!0});var Xc=r(Ue);Gr=f(Xc,"Problem 4: Accidentally Added a File You Don’t Want to Commit"),Xc.forEach(t),xo=p(e),Ye=a(e,"PRE",{class:!0});var Bu=r(Ye);Bu.forEach(t),Wo=p(e),Ve=a(e,"H3",{id:!0});var $c=r(Ve);Lr=f($c,"Problem 5: Need to Change the Last Commit Message"),$c.forEach(t),No=p(e),qe=a(e,"PRE",{class:!0});var xu=r(qe);xu.forEach(t),jo=p(e),ze=a(e,"H2",{id:!0});var ep=r(ze);Pr=f(ep,"Best Practices for Git"),ep.forEach(t),Fo=p(e),h=a(e,"OL",{});var C=r(h);Bt=a(C,"LI",{});var rf=r(Bt);Rl=a(rf,"STRONG",{});var tp=r(Rl);Hr=f(tp,"Commit often"),tp.forEach(t),Rr=f(rf,": Make small, focused commits rather than large ones"),rf.forEach(t),Tr=p(C),xt=a(C,"LI",{});var nf=r(xt);Tl=a(nf,"STRONG",{});var lp=r(Tl);Mr=f(lp,"Write clear commit messages"),lp.forEach(t),Ir=f(nf,": Describe what and why, not how"),nf.forEach(t),Ar=p(C),Wt=a(C,"LI",{});var ff=r(Wt);Ml=a(ff,"STRONG",{});var sp=r(Ml);Sr=f(sp,"Create a .gitignore file"),sp.forEach(t),Dr=f(ff,": Exclude files like build artifacts and dependencies"),ff.forEach(t),Or=p(C),Nt=a(C,"LI",{});var cf=r(Nt);Il=a(cf,"STRONG",{});var op=r(Il);Br=f(op,"Use branches for features/fixes"),op.forEach(t),xr=f(cf,": Keep your main branch stable"),cf.forEach(t),Wr=p(C),jt=a(C,"LI",{});var pf=r(jt);Al=a(pf,"STRONG",{});var ip=r(Al);Nr=f(ip,"Pull before pushing"),ip.forEach(t),jr=f(pf,": Always get the latest changes before pushing yours"),pf.forEach(t),Fr=p(C),S=a(C,"LI",{});var ls=r(S);Sl=a(ls,"STRONG",{});var ap=r(Sl);Ur=f(ap,"Review changes before committing"),ap.forEach(t),Yr=f(ls,": Use "),Dl=a(ls,"CODE",{});var rp=r(Dl);Vr=f(rp,"git diff"),rp.forEach(t),qr=f(ls," to see what you’re about to commit"),ls.forEach(t),C.forEach(t),Uo=p(e),Ke=a(e,"H2",{id:!0});var np=r(Ke);zr=f(np,"Creating a .gitignore File"),np.forEach(t),Yo=p(e),D=a(e,"P",{});var ni=r(D);Kr=f(ni,"A "),Ol=a(ni,"CODE",{});var fp=r(Ol);Zr=f(fp,".gitignore"),fp.forEach(t),Jr=f(ni," file tells Git which files to ignore:"),ni.forEach(t),Vo=p(e),Ze=a(e,"PRE",{class:!0});var Wu=r(Ze);Wu.forEach(t),qo=p(e),Ft=a(e,"P",{});var cp=r(Ft);Qr=f(cp,"Add common patterns to ignore:"),cp.forEach(t),zo=p(e),Je=a(e,"PRE",{class:!0});var Nu=r(Je);Nu.forEach(t),Ko=p(e),Qe=a(e,"H2",{id:!0});var pp=r(Qe);Xr=f(pp,"Git Workflows for Beginners"),pp.forEach(t),Zo=p(e),Xe=a(e,"H3",{id:!0});var up=r(Xe);$r=f(up,"Solo Developer Workflow"),up.forEach(t),Jo=p(e),k=a(e,"OL",{});var W=r(k);Bl=a(W,"LI",{});var mp=r(Bl);en=f(mp,"Create a repository"),mp.forEach(t),tn=p(W),xl=a(W,"LI",{});var hp=r(xl);ln=f(hp,"Make changes and commit regularly"),hp.forEach(t),sn=p(W),Wl=a(W,"LI",{});var vp=r(Wl);on=f(vp,"Push to a remote repository for backup"),vp.forEach(t),an=p(W),Nl=a(W,"LI",{});var dp=r(Nl);rn=f(dp,"Use branches for experimental features"),dp.forEach(t),W.forEach(t),Qo=p(e),$e=a(e,"H3",{id:!0});var Ep=r($e);nn=f(Ep,"Team Workflow (GitHub Flow)"),Ep.forEach(t),Xo=p(e),v=a(e,"OL",{});var G=r(v);jl=a(G,"LI",{});var bp=r(jl);fn=f(bp,"Create a branch for a feature/fix"),bp.forEach(t),cn=p(G),Fl=a(G,"LI",{});var yp=r(Fl);pn=f(yp,"Make changes and commit"),yp.forEach(t),un=p(G),Ul=a(G,"LI",{});var _p=r(Ul);mn=f(_p,"Push the branch to GitHub"),_p.forEach(t),hn=p(G),Yl=a(G,"LI",{});var wp=r(Yl);vn=f(wp,"Create a Pull Request (PR)"),wp.forEach(t),dn=p(G),Vl=a(G,"LI",{});var kp=r(Vl);En=f(kp,"Get code review and make changes if needed"),kp.forEach(t),bn=p(G),ql=a(G,"LI",{});var gp=r(ql);yn=f(gp,"Merge the PR when approved"),gp.forEach(t),G.forEach(t),$o=p(e),et=a(e,"H2",{id:!0});var Cp=r(et);_n=f(Cp,"Conclusion"),Cp.forEach(t),ei=p(e),Ut=a(e,"P",{});var Gp=r(Ut);wn=f(Gp,"Git might seem complex at first, but starting with these basic commands will help you build a solid foundation. As you get more comfortable, you can explore more advanced features."),Gp.forEach(t),ti=p(e),Yt=a(e,"P",{});var Lp=r(Yt);kn=f(Lp,"Remember these key points:"),Lp.forEach(t),li=p(e),m=a(e,"UL",{});var y=r(m);Vt=a(y,"LI",{});var uf=r(Vt);zl=a(uf,"CODE",{});var Pp=r(zl);gn=f(Pp,"git init"),Pp.forEach(t),Cn=f(uf," creates a new repository"),uf.forEach(t),Gn=p(y),qt=a(y,"LI",{});var mf=r(qt);Kl=a(mf,"CODE",{});var Hp=r(Kl);Ln=f(Hp,"git add"),Hp.forEach(t),Pn=f(mf," stages changes"),mf.forEach(t),Hn=p(y),zt=a(y,"LI",{});var hf=r(zt);Zl=a(hf,"CODE",{});var Rp=r(Zl);Rn=f(Rp,"git commit"),Rp.forEach(t),Tn=f(hf," saves staged changes"),hf.forEach(t),Mn=p(y),Kt=a(y,"LI",{});var vf=r(Kt);Jl=a(vf,"CODE",{});var Tp=r(Jl);In=f(Tp,"git push"),Tp.forEach(t),An=f(vf," uploads commits to a remote repository"),vf.forEach(t),Sn=p(y),Zt=a(y,"LI",{});var df=r(Zt);Ql=a(df,"CODE",{});var Mp=r(Ql);Dn=f(Mp,"git pull"),Mp.forEach(t),On=f(df," downloads changes from a remote repository"),df.forEach(t),Bn=p(y),Xl=a(y,"LI",{});var Ip=r(Xl);xn=f(Ip,"Branches let you work on features in isolation"),Ip.forEach(t),Wn=p(y),$l=a(y,"LI",{});var Ap=r($l);Nn=f(Ap,"Commit often with clear messages"),Ap.forEach(t),y.forEach(t),si=p(e),Jt=a(e,"P",{});var Sp=r(Jt);jn=f(Sp,"With these Git basics, you’re well on your way to better code management and collaboration."),Sp.forEach(t),oi=p(e),tt=a(e,"H2",{id:!0});var Dp=r(tt);Fn=f(Dp,"Further Resources"),Dp.forEach(t),ii=p(e),g=a(e,"UL",{});var N=r(g);es=a(N,"LI",{});var Op=r(es);lt=a(Op,"A",{href:!0,rel:!0});var Bp=r(lt);Un=f(Bp,"Git Documentation"),Bp.forEach(t),Op.forEach(t),Yn=p(N),ts=a(N,"LI",{});var xp=r(ts);st=a(xp,"A",{href:!0,rel:!0});var Wp=r(st);Vn=f(Wp,"GitHub Guides"),Wp.forEach(t),xp.forEach(t),qn=p(N),Qt=a(N,"LI",{});var Ef=r(Qt);ot=a(Ef,"A",{href:!0,rel:!0});var Np=r(ot);zn=f(Np,"Learn Git Branching"),Np.forEach(t),Kn=f(Ef," - An interactive tutorial"),Ef.forEach(t),Zn=p(N),Xt=a(N,"LI",{});var bf=r(Xt);it=a(bf,"A",{href:!0,rel:!0});var jp=r(it);Jn=f(jp,"Oh Shit, Git!?!"),jp.forEach(t),Qn=f(bf," - Common Git mistakes and how to fix them"),bf.forEach(t),N.forEach(t),this.h()},h(){u(M,"id","git-basics-for-beginners-a-practical-guide-to-version-control"),u(j,"id","introduction"),u(F,"id","why-use-git"),u(U,"id","getting-started-with-git"),u(Y,"id","installing-git"),u(V,"href","https://git-scm.com/download/win"),u(V,"rel","nofollow"),u(z,"class","language-bash"),u(Z,"class","language-bash"),u(J,"id","configuring-git"),u(Q,"class","language-bash"),u(X,"id","creating-your-first-git-repository"),u($,"class","language-bash"),u(ee,"id","the-basic-git-workflow"),u(te,"id","1-making-changes"),u(le,"class","language-bash"),u(se,"id","2-checking-status"),u(oe,"class","language-bash"),u(ie,"id","3-staging-changes"),u(ae,"class","language-bash"),u(re,"id","4-committing-changes"),u(ne,"class","language-bash"),u(fe,"id","5-viewing-commit-history"),u(ce,"class","language-bash"),u(pe,"id","working-with-remote-repositories"),u(ue,"id","creating-a-remote-repository"),u(me,"href","https://github.com"),u(me,"rel","nofollow"),u(he,"id","connecting-to-a-remote-repository"),u(ve,"class","language-bash"),u(de,"id","pushing-to-a-remote-repository"),u(Ee,"class","language-bash"),u(be,"id","cloning-an-existing-repository"),u(ye,"class","language-bash"),u(_e,"id","branching-and-merging"),u(we,"id","creating-a-branch"),u(ke,"class","language-bash"),u(ge,"id","working-with-branches"),u(Ce,"class","language-bash"),u(Ge,"id","switching-between-branches"),u(Le,"class","language-bash"),u(Pe,"id","merging-branches"),u(He,"class","language-bash"),u(Re,"id","deleting-a-branch"),u(Te,"class","language-bash"),u(Me,"id","handling-merge-conflicts"),u(Ie,"id","example-of-a-merge-conflict"),u(Ae,"class","language-undefined"),u(Se,"id","resolving-merge-conflicts"),u(De,"class","language-bash"),u(Oe,"id","common-git-problems-and-solutions"),u(Be,"id","problem-1-accidentally-committed-to-the-wrong-branch"),u(xe,"class","language-bash"),u(We,"id","problem-2-need-to-undo-a-commit"),u(Ne,"class","language-bash"),u(je,"id","problem-3-want-to-temporarily-save-changes-without-committing"),u(Fe,"class","language-bash"),u(Ue,"id","problem-4-accidentally-added-a-file-you-dont-want-to-commit"),u(Ye,"class","language-bash"),u(Ve,"id","problem-5-need-to-change-the-last-commit-message"),u(qe,"class","language-bash"),u(ze,"id","best-practices-for-git"),u(Ke,"id","creating-a-gitignore-file"),u(Ze,"class","language-bash"),u(Je,"class","language-undefined"),u(Qe,"id","git-workflows-for-beginners"),u(Xe,"id","solo-developer-workflow"),u($e,"id","team-workflow-github-flow"),u(et,"id","conclusion"),u(tt,"id","further-resources"),u(lt,"href","https://git-scm.com/doc"),u(lt,"rel","nofollow"),u(st,"href","https://guides.github.com/"),u(st,"rel","nofollow"),u(ot,"href","https://learngitbranching.js.org/"),u(ot,"rel","nofollow"),u(it,"href","https://ohshitgit.com/"),u(it,"rel","nofollow")},m(e,s){o(e,M,s),l(M,fi),o(e,ss,s),o(e,j,s),l(j,ci),o(e,os,s),o(e,at,s),l(at,pi),o(e,is,s),o(e,F,s),l(F,ui),o(e,as,s),o(e,rt,s),l(rt,mi),o(e,rs,s),o(e,d,s),l(d,nt),l(nt,el),l(el,hi),l(nt,vi),l(d,di),l(d,ft),l(ft,tl),l(tl,Ei),l(ft,bi),l(d,yi),l(d,ct),l(ct,ll),l(ll,_i),l(ct,wi),l(d,ki),l(d,pt),l(pt,sl),l(sl,gi),l(pt,Ci),l(d,Gi),l(d,ut),l(ut,ol),l(ol,Li),l(ut,Pi),o(e,ns,s),o(e,U,s),l(U,Hi),o(e,fs,s),o(e,Y,s),l(Y,Ri),o(e,cs,s),o(e,mt,s),l(mt,Ti),o(e,ps,s),o(e,I,s),l(I,il),l(il,Mi),l(I,Ii),l(I,V),l(V,Ai),o(e,us,s),o(e,q,s),l(q,al),l(al,Si),l(q,Di),o(e,ms,s),o(e,z,s),z.innerHTML=Up,o(e,hs,s),o(e,K,s),l(K,rl),l(rl,Oi),l(K,Bi),o(e,vs,s),o(e,Z,s),Z.innerHTML=Yp,o(e,ds,s),o(e,J,s),l(J,xi),o(e,Es,s),o(e,ht,s),l(ht,Wi),o(e,bs,s),o(e,Q,s),Q.innerHTML=Vp,o(e,ys,s),o(e,vt,s),l(vt,Ni),o(e,_s,s),o(e,X,s),l(X,ji),o(e,ws,s),o(e,dt,s),l(dt,Fi),o(e,ks,s),o(e,$,s),$.innerHTML=qp,o(e,gs,s),o(e,Et,s),l(Et,Ui),o(e,Cs,s),o(e,ee,s),l(ee,Yi),o(e,Gs,s),o(e,bt,s),l(bt,Vi),o(e,Ls,s),o(e,_,s),l(_,nl),l(nl,qi),l(_,zi),l(_,fl),l(fl,Ki),l(_,Zi),l(_,cl),l(cl,Ji),l(_,Qi),l(_,pl),l(pl,Xi),o(e,Ps,s),o(e,yt,s),l(yt,$i),o(e,Hs,s),o(e,te,s),l(te,ea),o(e,Rs,s),o(e,_t,s),l(_t,ta),o(e,Ts,s),o(e,le,s),le.innerHTML=zp,o(e,Ms,s),o(e,se,s),l(se,la),o(e,Is,s),o(e,wt,s),l(wt,sa),o(e,As,s),o(e,oe,s),oe.innerHTML=Kp,o(e,Ss,s),o(e,A,s),l(A,oa),l(A,ul),l(ul,ia),l(A,aa),o(e,Ds,s),o(e,ie,s),l(ie,ra),o(e,Os,s),o(e,kt,s),l(kt,na),o(e,Bs,s),o(e,ae,s),ae.innerHTML=Zp,o(e,xs,s),o(e,re,s),l(re,fa),o(e,Ws,s),o(e,gt,s),l(gt,ca),o(e,Ns,s),o(e,ne,s),ne.innerHTML=Jp,o(e,js,s),o(e,Ct,s),l(Ct,pa),o(e,Fs,s),o(e,fe,s),l(fe,ua),o(e,Us,s),o(e,Gt,s),l(Gt,ma),o(e,Ys,s),o(e,ce,s),ce.innerHTML=Qp,o(e,Vs,s),o(e,Lt,s),l(Lt,ha),o(e,qs,s),o(e,pe,s),l(pe,va),o(e,zs,s),o(e,Pt,s),l(Pt,da),o(e,Ks,s),o(e,ue,s),l(ue,Ea),o(e,Zs,s),o(e,w,s),l(w,Ht),l(Ht,ba),l(Ht,me),l(me,ya),l(w,_a),l(w,ml),l(ml,wa),l(w,ka),l(w,hl),l(hl,ga),l(w,Ca),l(w,vl),l(vl,Ga),o(e,Js,s),o(e,he,s),l(he,La),o(e,Qs,s),o(e,ve,s),ve.innerHTML=Xp,o(e,Xs,s),o(e,de,s),l(de,Pa),o(e,$s,s),o(e,Ee,s),Ee.innerHTML=$p,o(e,eo,s),o(e,P,s),l(P,Ha),l(P,dl),l(dl,Ra),l(P,Ta),l(P,El),l(El,Ma),l(P,Ia),o(e,to,s),o(e,be,s),l(be,Aa),o(e,lo,s),o(e,Rt,s),l(Rt,Sa),o(e,so,s),o(e,ye,s),ye.innerHTML=eu,o(e,oo,s),o(e,Tt,s),l(Tt,Da),o(e,io,s),o(e,_e,s),l(_e,Oa),o(e,ao,s),o(e,Mt,s),l(Mt,Ba),o(e,ro,s),o(e,we,s),l(we,xa),o(e,no,s),o(e,ke,s),ke.innerHTML=tu,o(e,fo,s),o(e,ge,s),l(ge,Wa),o(e,co,s),o(e,It,s),l(It,Na),o(e,po,s),o(e,Ce,s),Ce.innerHTML=lu,o(e,uo,s),o(e,Ge,s),l(Ge,ja),o(e,mo,s),o(e,Le,s),Le.innerHTML=su,o(e,ho,s),o(e,Pe,s),l(Pe,Fa),o(e,vo,s),o(e,At,s),l(At,Ua),o(e,Eo,s),o(e,He,s),He.innerHTML=ou,o(e,bo,s),o(e,Re,s),l(Re,Ya),o(e,yo,s),o(e,St,s),l(St,Va),o(e,_o,s),o(e,Te,s),Te.innerHTML=iu,o(e,wo,s),o(e,Me,s),l(Me,qa),o(e,ko,s),o(e,Dt,s),l(Dt,za),o(e,go,s),o(e,Ie,s),l(Ie,Ka),o(e,Co,s),o(e,Ot,s),l(Ot,Za),o(e,Go,s),o(e,Ae,s),Ae.innerHTML=au,o(e,Lo,s),o(e,E,s),l(E,Ja),l(E,bl),l(bl,Qa),l(E,Xa),l(E,yl),l(yl,$a),l(E,er),l(E,_l),l(_l,tr),l(E,lr),l(E,wl),l(wl,sr),l(E,or),o(e,Po,s),o(e,Se,s),l(Se,ir),o(e,Ho,s),o(e,b,s),l(b,kl),l(kl,ar),l(b,rr),l(b,gl),l(gl,nr),l(b,fr),l(b,L),l(L,cr),l(L,Cl),l(Cl,pr),l(L,ur),l(L,Gl),l(Gl,mr),l(L,hr),l(L,Ll),l(Ll,vr),l(L,dr),l(b,Er),l(b,Pl),l(Pl,br),l(b,yr),l(b,Hl),l(Hl,_r),o(e,Ro,s),o(e,De,s),De.innerHTML=ru,o(e,To,s),o(e,Oe,s),l(Oe,wr),o(e,Mo,s),o(e,Be,s),l(Be,kr),o(e,Io,s),o(e,xe,s),xe.innerHTML=nu,o(e,Ao,s),o(e,We,s),l(We,gr),o(e,So,s),o(e,Ne,s),Ne.innerHTML=fu,o(e,Do,s),o(e,je,s),l(je,Cr),o(e,Oo,s),o(e,Fe,s),Fe.innerHTML=cu,o(e,Bo,s),o(e,Ue,s),l(Ue,Gr),o(e,xo,s),o(e,Ye,s),Ye.innerHTML=pu,o(e,Wo,s),o(e,Ve,s),l(Ve,Lr),o(e,No,s),o(e,qe,s),qe.innerHTML=uu,o(e,jo,s),o(e,ze,s),l(ze,Pr),o(e,Fo,s),o(e,h,s),l(h,Bt),l(Bt,Rl),l(Rl,Hr),l(Bt,Rr),l(h,Tr),l(h,xt),l(xt,Tl),l(Tl,Mr),l(xt,Ir),l(h,Ar),l(h,Wt),l(Wt,Ml),l(Ml,Sr),l(Wt,Dr),l(h,Or),l(h,Nt),l(Nt,Il),l(Il,Br),l(Nt,xr),l(h,Wr),l(h,jt),l(jt,Al),l(Al,Nr),l(jt,jr),l(h,Fr),l(h,S),l(S,Sl),l(Sl,Ur),l(S,Yr),l(S,Dl),l(Dl,Vr),l(S,qr),o(e,Uo,s),o(e,Ke,s),l(Ke,zr),o(e,Yo,s),o(e,D,s),l(D,Kr),l(D,Ol),l(Ol,Zr),l(D,Jr),o(e,Vo,s),o(e,Ze,s),Ze.innerHTML=mu,o(e,qo,s),o(e,Ft,s),l(Ft,Qr),o(e,zo,s),o(e,Je,s),Je.innerHTML=hu,o(e,Ko,s),o(e,Qe,s),l(Qe,Xr),o(e,Zo,s),o(e,Xe,s),l(Xe,$r),o(e,Jo,s),o(e,k,s),l(k,Bl),l(Bl,en),l(k,tn),l(k,xl),l(xl,ln),l(k,sn),l(k,Wl),l(Wl,on),l(k,an),l(k,Nl),l(Nl,rn),o(e,Qo,s),o(e,$e,s),l($e,nn),o(e,Xo,s),o(e,v,s),l(v,jl),l(jl,fn),l(v,cn),l(v,Fl),l(Fl,pn),l(v,un),l(v,Ul),l(Ul,mn),l(v,hn),l(v,Yl),l(Yl,vn),l(v,dn),l(v,Vl),l(Vl,En),l(v,bn),l(v,ql),l(ql,yn),o(e,$o,s),o(e,et,s),l(et,_n),o(e,ei,s),o(e,Ut,s),l(Ut,wn),o(e,ti,s),o(e,Yt,s),l(Yt,kn),o(e,li,s),o(e,m,s),l(m,Vt),l(Vt,zl),l(zl,gn),l(Vt,Cn),l(m,Gn),l(m,qt),l(qt,Kl),l(Kl,Ln),l(qt,Pn),l(m,Hn),l(m,zt),l(zt,Zl),l(Zl,Rn),l(zt,Tn),l(m,Mn),l(m,Kt),l(Kt,Jl),l(Jl,In),l(Kt,An),l(m,Sn),l(m,Zt),l(Zt,Ql),l(Ql,Dn),l(Zt,On),l(m,Bn),l(m,Xl),l(Xl,xn),l(m,Wn),l(m,$l),l($l,Nn),o(e,si,s),o(e,Jt,s),l(Jt,jn),o(e,oi,s),o(e,tt,s),l(tt,Fn),o(e,ii,s),o(e,g,s),l(g,es),l(es,lt),l(lt,Un),l(g,Yn),l(g,ts),l(ts,st),l(st,Vn),l(g,qn),l(g,Qt),l(Qt,ot),l(ot,zn),l(Qt,Kn),l(g,Zn),l(g,Xt),l(Xt,it),l(it,Jn),l(Xt,Qn)},p:yf,i:yf,o:yf,d(e){e&&t(M),e&&t(ss),e&&t(j),e&&t(os),e&&t(at),e&&t(is),e&&t(F),e&&t(as),e&&t(rt),e&&t(rs),e&&t(d),e&&t(ns),e&&t(U),e&&t(fs),e&&t(Y),e&&t(cs),e&&t(mt),e&&t(ps),e&&t(I),e&&t(us),e&&t(q),e&&t(ms),e&&t(z),e&&t(hs),e&&t(K),e&&t(vs),e&&t(Z),e&&t(ds),e&&t(J),e&&t(Es),e&&t(ht),e&&t(bs),e&&t(Q),e&&t(ys),e&&t(vt),e&&t(_s),e&&t(X),e&&t(ws),e&&t(dt),e&&t(ks),e&&t($),e&&t(gs),e&&t(Et),e&&t(Cs),e&&t(ee),e&&t(Gs),e&&t(bt),e&&t(Ls),e&&t(_),e&&t(Ps),e&&t(yt),e&&t(Hs),e&&t(te),e&&t(Rs),e&&t(_t),e&&t(Ts),e&&t(le),e&&t(Ms),e&&t(se),e&&t(Is),e&&t(wt),e&&t(As),e&&t(oe),e&&t(Ss),e&&t(A),e&&t(Ds),e&&t(ie),e&&t(Os),e&&t(kt),e&&t(Bs),e&&t(ae),e&&t(xs),e&&t(re),e&&t(Ws),e&&t(gt),e&&t(Ns),e&&t(ne),e&&t(js),e&&t(Ct),e&&t(Fs),e&&t(fe),e&&t(Us),e&&t(Gt),e&&t(Ys),e&&t(ce),e&&t(Vs),e&&t(Lt),e&&t(qs),e&&t(pe),e&&t(zs),e&&t(Pt),e&&t(Ks),e&&t(ue),e&&t(Zs),e&&t(w),e&&t(Js),e&&t(he),e&&t(Qs),e&&t(ve),e&&t(Xs),e&&t(de),e&&t($s),e&&t(Ee),e&&t(eo),e&&t(P),e&&t(to),e&&t(be),e&&t(lo),e&&t(Rt),e&&t(so),e&&t(ye),e&&t(oo),e&&t(Tt),e&&t(io),e&&t(_e),e&&t(ao),e&&t(Mt),e&&t(ro),e&&t(we),e&&t(no),e&&t(ke),e&&t(fo),e&&t(ge),e&&t(co),e&&t(It),e&&t(po),e&&t(Ce),e&&t(uo),e&&t(Ge),e&&t(mo),e&&t(Le),e&&t(ho),e&&t(Pe),e&&t(vo),e&&t(At),e&&t(Eo),e&&t(He),e&&t(bo),e&&t(Re),e&&t(yo),e&&t(St),e&&t(_o),e&&t(Te),e&&t(wo),e&&t(Me),e&&t(ko),e&&t(Dt),e&&t(go),e&&t(Ie),e&&t(Co),e&&t(Ot),e&&t(Go),e&&t(Ae),e&&t(Lo),e&&t(E),e&&t(Po),e&&t(Se),e&&t(Ho),e&&t(b),e&&t(Ro),e&&t(De),e&&t(To),e&&t(Oe),e&&t(Mo),e&&t(Be),e&&t(Io),e&&t(xe),e&&t(Ao),e&&t(We),e&&t(So),e&&t(Ne),e&&t(Do),e&&t(je),e&&t(Oo),e&&t(Fe),e&&t(Bo),e&&t(Ue),e&&t(xo),e&&t(Ye),e&&t(Wo),e&&t(Ve),e&&t(No),e&&t(qe),e&&t(jo),e&&t(ze),e&&t(Fo),e&&t(h),e&&t(Uo),e&&t(Ke),e&&t(Yo),e&&t(D),e&&t(Vo),e&&t(Ze),e&&t(qo),e&&t(Ft),e&&t(zo),e&&t(Je),e&&t(Ko),e&&t(Qe),e&&t(Zo),e&&t(Xe),e&&t(Jo),e&&t(k),e&&t(Qo),e&&t($e),e&&t(Xo),e&&t(v),e&&t($o),e&&t(et),e&&t(ei),e&&t(Ut),e&&t(ti),e&&t(Yt),e&&t(li),e&&t(m),e&&t(si),e&&t(Jt),e&&t(oi),e&&t(tt),e&&t(ii),e&&t(g)}}}const qu={title:"Git Basics for Beginners: A Practical Guide to Version Control",description:"Learn the essential Git commands and workflows that every new developer needs to know. This beginner-friendly guide covers installation, basic commands, branching, merging, and how to recover from common mistakes.",date:"2024-01-05T00:00:00.000Z",published:!0};class zu extends ju{constructor(M){super(),Fu(this,M,null,Yu,Uu,{})}}export{zu as default,qu as metadata};
