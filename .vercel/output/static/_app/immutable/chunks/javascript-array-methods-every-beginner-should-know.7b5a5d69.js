import{S as jr,i as Or,s as Hr,k as c,q as e,a as r,l,m as u,r as o,h as s,c as i,n as k,b as p,C as a,K as Uc}from"./index.8762ca70.js";function Dr(Du){let _,Pp,va,V,Ap,Ea,cs,jp,wa,ls,Op,_a,Y,Hp,ga,us,Dp,Ca,Z,Mp,Ta,rs,Lp,xa,$,Mu=`<code class="language-javascript"><span class="token comment">// Using array literal notation (most common)</span>
<span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Using the Array constructor</span>
<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Creating an empty array and adding elements</span>
<span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Pa,Q,Sp,Aa,is,Rp,ja,X,Lu=`<code class="language-javascript"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'apple'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'banana'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'orange'</span>

<span class="token comment">// Get the last element</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>fruits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'orange'</span></code>`,Oa,nn,Ip,Ha,sn,Bp,Da,x,Fp,ws,Up,Np,Ma,an,Su=`<code class="language-javascript"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

fruits<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['apple', 'banana', 'orange']</span>

<span class="token comment">// Add multiple elements at once</span>
fruits<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'mango'</span><span class="token punctuation">,</span> <span class="token string">'kiwi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['apple', 'banana', 'orange', 'mango', 'kiwi']</span></code>`,La,tn,Jp,Sa,P,Gp,_s,Wp,qp,Ra,pn,Ru=`<code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

numbers<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span></code>`,Ia,en,zp,Ba,A,Kp,gs,Vp,Yp,Fa,on,Iu=`<code class="language-javascript"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> lastFruit <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastFruit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'orange'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['apple', 'banana']</span></code>`,Ua,cn,Zp,Na,j,$p,Cs,Qp,Xp,Ja,ln,Bu=`<code class="language-javascript"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> firstFruit <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstFruit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'apple'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['banana', 'orange']</span></code>`,Ga,un,ne,Wa,O,se,Ts,ae,te,qa,rn,Fu=`<code class="language-javascript"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'mango'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Remove elements</span>
<span class="token comment">// splice(start, deleteCount)</span>
fruits<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Remove 2 elements starting at index 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['apple', 'mango']</span>

<span class="token comment">// Add elements</span>
<span class="token keyword">const</span> vegetables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'carrot'</span><span class="token punctuation">,</span> <span class="token string">'broccoli'</span><span class="token punctuation">,</span> <span class="token string">'celery'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// splice(start, deleteCount, ...items)</span>
vegetables<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'cucumber'</span><span class="token punctuation">,</span> <span class="token string">'pepper'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Insert at index 1, delete 0 elements</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vegetables<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['carrot', 'cucumber', 'pepper', 'broccoli', 'celery']</span>

<span class="token comment">// Replace elements</span>
<span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Replace 1 element at index 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['yellow', 'green', 'blue']</span></code>`,za,kn,pe,Ka,mn,ee,Va,H,oe,xs,ce,le,Ya,fn,Uu=`<code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Double each number</span>
<span class="token keyword">const</span> doubled <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6, 8, 10]</span>

<span class="token comment">// Convert to strings</span>
<span class="token keyword">const</span> numberStrings <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Number </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>num<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberStrings<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['Number 1', 'Number 2', 'Number 3', 'Number 4', 'Number 5']</span>

<span class="token comment">// Extract a property from an array of objects</span>
<span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Charlie'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">35</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> names <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['Alice', 'Bob', 'Charlie']</span></code>`,Za,dn,ue,$a,D,re,Ps,ie,ke,Qa,yn,Nu=`<code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Get even numbers</span>
<span class="token keyword">const</span> evenNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evenNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6, 8, 10]</span>

<span class="token comment">// Get numbers greater than 5</span>
<span class="token keyword">const</span> largeNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>largeNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [6, 7, 8, 9, 10]</span>

<span class="token comment">// Filter objects based on a property</span>
<span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Charlie'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">35</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> olderUsers <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> user<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>olderUsers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&#123; id: 2, name: 'Bob', age: 30 &#125;, &#123; id: 3, name: 'Charlie', age: 35 &#125;]</span></code>`,Xa,bn,me,nt,M,fe,As,de,ye,st,hn,Ju=`<code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Sum all numbers</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 is the initial value of the accumulator</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15 (1 + 2 + 3 + 4 + 5)</span>

<span class="token comment">// Find the maximum value</span>
<span class="token keyword">const</span> max <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">max<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> current <span class="token operator">></span> max <span class="token operator">?</span> current <span class="token operator">:</span> max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>

<span class="token comment">// Count occurrences of items</span>
<span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fruitCount <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">count<span class="token punctuation">,</span> fruit</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  count<span class="token punctuation">[</span>fruit<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>fruit<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruitCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; apple: 3, banana: 2, orange: 1 &#125;</span></code>`,at,vn,be,tt,L,he,js,ve,Ee,pt,En,Gu=`<code class="language-javascript"><span class="token comment">// Sort strings alphabetically</span>
<span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'mango'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
fruits<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['apple', 'banana', 'mango', 'orange']</span>

<span class="token comment">// Sort numbers (be careful, default sort converts to strings!)</span>
<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This doesn't work as expected</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 10, 5, 7, 8] (string comparison)</span>

<span class="token comment">// Correct way to sort numbers</span>
numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ascending order</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 5, 7, 8, 10]</span>

numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Descending order</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [10, 8, 7, 5, 1]</span>

<span class="token comment">// Sort objects by a property</span>
<span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Charlie'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">35</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Sort by age (ascending)</span>
users<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>age <span class="token operator">-</span> b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Sort by name</span>
users<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,et,wn,we,ot,_n,_e,ct,S,ge,Os,Ce,Te,lt,gn,Wu=`<code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> found <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>

<span class="token comment">// Finding an object in an array</span>
<span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Charlie'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">35</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; id: 2, name: 'Bob', age: 30 &#125;</span></code>`,ut,Cn,xe,rt,R,Pe,Hs,Ae,je,it,Tn,qu=`<code class="language-javascript"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'mango'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> index <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">fruit</span> <span class="token operator">=></span> fruit <span class="token operator">===</span> <span class="token string">'orange'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>

<span class="token comment">// If no element satisfies the condition, -1 is returned</span>
<span class="token keyword">const</span> notFound <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">fruit</span> <span class="token operator">=></span> fruit <span class="token operator">===</span> <span class="token string">'grape'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>notFound<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span></code>`,kt,xn,Oe,mt,I,He,Ds,De,Me,ft,Pn,zu=`<code class="language-javascript"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'grape'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token comment">// You can also specify a starting position</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (starts searching from index 1)</span></code>`,dt,An,Le,yt,B,Se,Ms,Re,Ie,bt,jn,Ku=`<code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Check if any number is even</span>
<span class="token keyword">const</span> hasEven <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hasEven<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// Check if any number is greater than 10</span>
<span class="token keyword">const</span> hasLarge <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hasLarge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code>`,ht,On,Be,vt,F,Fe,Ls,Ue,Ne,Et,Hn,Vu=`<code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Check if all numbers are even</span>
<span class="token keyword">const</span> allEven <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allEven<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// Check if all numbers are greater than 5</span>
<span class="token keyword">const</span> allLarge <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allLarge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code>`,wt,Dn,Je,_t,Mn,Ge,gt,U,We,Ss,qe,ze,Ct,Ln,Yu=`<code class="language-javascript"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Default separator is a comma</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'apple,banana,orange'</span>

<span class="token comment">// Specify a custom separator</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' and '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'apple and banana and orange'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'applebananaorange'</span></code>`,Tt,Sn,Ke,xt,N,Ve,Rs,Ye,Ze,Pt,Rn,Zu=`<code class="language-javascript"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'mango'</span><span class="token punctuation">,</span> <span class="token string">'kiwi'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// slice(start, end) - end is not included</span>
<span class="token keyword">const</span> citrus <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>citrus<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['banana', 'orange']</span>

<span class="token comment">// Omitting the end parameter extracts through the end of the array</span>
<span class="token keyword">const</span> lastTwo <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastTwo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['mango', 'kiwi']</span>

<span class="token comment">// Negative indices count from the end</span>
<span class="token keyword">const</span> lastThree <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastThree<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['orange', 'mango', 'kiwi']</span></code>`,At,In,$e,jt,J,Qe,Is,Xe,no,Ot,Bn,$u=`<code class="language-javascript"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> vegetables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'carrot'</span><span class="token punctuation">,</span> <span class="token string">'broccoli'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> combined <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>vegetables<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>combined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['apple', 'banana', 'carrot', 'broccoli']</span>

<span class="token comment">// You can concat multiple arrays</span>
<span class="token keyword">const</span> more <span class="token operator">=</span> combined<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'strawberry'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'pepper'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>more<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ['apple', 'banana', 'carrot', 'broccoli', 'strawberry', 'pepper']</span></code>`,Ht,Fn,so,Dt,G,ao,Bs,to,po,Mt,Un,Qu=`<code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

numbers<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 4, 3, 2, 1]</span></code>`,Lt,Nn,eo,St,ks,oo,Rt,Jn,co,It,Gn,Xu=`<code class="language-javascript"><span class="token keyword">const</span> products <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Laptop'</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token literal-property property">inStock</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Phone'</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token literal-property property">inStock</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tablet'</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token literal-property property">inStock</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Monitor'</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token literal-property property">inStock</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Keyboard'</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">inStock</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Get the names of available products sorted by price (low to high)</span>
<span class="token keyword">const</span> availableProductNames <span class="token operator">=</span> products
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">product</span> <span class="token operator">=></span> product<span class="token punctuation">.</span>inStock<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>price <span class="token operator">-</span> b<span class="token punctuation">.</span>price<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">product</span> <span class="token operator">=></span> product<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>availableProductNames<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ['Keyboard', 'Monitor', 'Phone', 'Laptop']</span>

<span class="token comment">// Calculate the total value of in-stock inventory</span>
<span class="token keyword">const</span> totalInventoryValue <span class="token operator">=</span> products
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">product</span> <span class="token operator">=></span> product<span class="token punctuation">.</span>inStock<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> product</span><span class="token punctuation">)</span> <span class="token operator">=></span> total <span class="token operator">+</span> product<span class="token punctuation">.</span>price<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>totalInventoryValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2400</span></code>`,Bt,Wn,lo,Ft,qn,nr=`<code class="language-javascript"><span class="token keyword">const</span> students <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token literal-property property">grades</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">grades</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Charlie'</span><span class="token punctuation">,</span> <span class="token literal-property property">grades</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Diana'</span><span class="token punctuation">,</span> <span class="token literal-property property">grades</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Calculate average grade for each student</span>
<span class="token keyword">const</span> studentAverages <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">student</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> sum <span class="token operator">=</span> student<span class="token punctuation">.</span>grades<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> grade</span><span class="token punctuation">)</span> <span class="token operator">=></span> total <span class="token operator">+</span> grade<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> average <span class="token operator">=</span> sum <span class="token operator">/</span> student<span class="token punctuation">.</span>grades<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> student<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    <span class="token literal-property property">average</span><span class="token operator">:</span> average<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>studentAverages<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [</span>
<span class="token comment">//   &#123; name: 'Alice', average: '89.0' &#125;,</span>
<span class="token comment">//   &#123; name: 'Bob', average: '77.7' &#125;,</span>
<span class="token comment">//   &#123; name: 'Charlie', average: '90.0' &#125;,</span>
<span class="token comment">//   &#123; name: 'Diana', average: '70.7' &#125;</span>
<span class="token comment">// ]</span>

<span class="token comment">// Find students with an average grade above 85</span>
<span class="token keyword">const</span> highPerformers <span class="token operator">=</span> studentAverages
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">student</span> <span class="token operator">=></span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>average<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">85</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">student</span> <span class="token operator">=></span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>highPerformers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['Alice', 'Charlie']</span></code>`,Ut,zn,uo,Nt,Kn,ro,Jt,Vn,sr=`<code class="language-javascript"><span class="token comment">// ❌ Incorrect numeric sort</span>
<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [10, 2, 30, 5] (wrong order)</span>

<span class="token comment">// ✅ Correct numeric sort</span>
numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 5, 10, 30]</span></code>`,Gt,Yn,io,Wt,ms,ko,qt,Zn,Fs,mo,fo,zt,W,h,Us,yo,bo,Ns,ho,vo,Js,Eo,wo,Gs,_o,go,g,Ws,Co,To,qs,xo,Po,zs,Ao,Kt,$n,Ks,jo,Oo,Vt,q,C,Vs,Ho,Do,Ys,Mo,Lo,Zs,So,Ro,Qn,$s,Io,Bo,Qs,Fo,Yt,Xn,ar=`<code class="language-javascript"><span class="token comment">// ❌ Potential mistake: assuming sort doesn't modify the original</span>
<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sorted <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4] - original array is modified</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sorted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4] - reference to the same array</span>

<span class="token comment">// ✅ If you want to keep the original array unchanged</span>
<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sorted <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>numbers<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 1, 4, 2] - original array is preserved</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sorted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4] - new sorted array</span></code>`,Zt,ns,Uo,$t,T,Xs,No,Jo,na,Go,Wo,Qt,ss,tr=`<code class="language-javascript"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Alice'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> bob <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// ❌ This doesn't work as expected</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>bob<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1 (not found)</span>

<span class="token comment">// ✅ Use findIndex instead</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> bob<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></code>`,Xt,as,qo,np,fs,zo,sp,ds,Ko,ap,d,m,Vo,sa,Yo,Zo,aa,$o,Qo,ta,Xo,nc,pa,sc,ac,ea,tc,pc,ec,v,oc,oa,cc,lc,ca,uc,rc,la,ic,kc,mc,f,fc,ua,dc,yc,ra,bc,hc,ia,vc,Ec,ka,wc,_c,ma,gc,Cc,Tc,fa,xc,Pc,da,Ac,tp,ys,jc,pp,ts,Oc,ep,E,ya,ps,Hc,Dc,ba,es,Mc,Lc,bs,os,Sc,Rc;return{c(){_=c("h1"),Pp=e("JavaScript Array Methods Every Beginner Should Know"),va=r(),V=c("h2"),Ap=e("Introduction"),Ea=r(),cs=c("p"),jp=e("Arrays are one of the most commonly used data structures in JavaScript. They allow you to store and organize multiple values in a single variable. While creating and accessing arrays is straightforward, the real power comes from JavaScript’s built-in array methods that let you manipulate and transform your data efficiently."),wa=r(),ls=c("p"),Op=e("In this guide, I’ll walk you through the most useful array methods that every beginner should know, with practical examples and common use cases."),_a=r(),Y=c("h2"),Hp=e("Basic Array Operations"),ga=r(),us=c("p"),Dp=e("Let’s start with the fundamentals before diving into the more powerful methods."),Ca=r(),Z=c("h3"),Mp=e("Creating Arrays"),Ta=r(),rs=c("p"),Lp=e("There are several ways to create arrays in JavaScript:"),xa=r(),$=c("pre"),Pa=r(),Q=c("h3"),Sp=e("Accessing Array Elements"),Aa=r(),is=c("p"),Rp=e("Array elements are accessed by their index, which starts at 0:"),ja=r(),X=c("pre"),Oa=r(),nn=c("h2"),Ip=e("Methods for Adding and Removing Elements"),Ha=r(),sn=c("h3"),Bp=e("push() - Add to the End"),Da=r(),x=c("p"),Fp=e("The "),ws=c("code"),Up=e("push()"),Np=e(" method adds one or more elements to the end of an array and returns the new length:"),Ma=r(),an=c("pre"),La=r(),tn=c("h3"),Jp=e("unshift() - Add to the Beginning"),Sa=r(),P=c("p"),Gp=e("The "),_s=c("code"),Wp=e("unshift()"),qp=e(" method adds elements to the beginning of an array and returns the new length:"),Ra=r(),pn=c("pre"),Ia=r(),en=c("h3"),zp=e("pop() - Remove from the End"),Ba=r(),A=c("p"),Kp=e("The "),gs=c("code"),Vp=e("pop()"),Yp=e(" method removes the last element from an array and returns that element:"),Fa=r(),on=c("pre"),Ua=r(),cn=c("h3"),Zp=e("shift() - Remove from the Beginning"),Na=r(),j=c("p"),$p=e("The "),Cs=c("code"),Qp=e("shift()"),Xp=e(" method removes the first element from an array and returns that element:"),Ja=r(),ln=c("pre"),Ga=r(),un=c("h3"),ne=e("splice() - Add or Remove from Any Position"),Wa=r(),O=c("p"),se=e("The "),Ts=c("code"),ae=e("splice()"),te=e(" method changes the contents of an array by removing or replacing existing elements and/or adding new elements:"),qa=r(),rn=c("pre"),za=r(),kn=c("h2"),pe=e("Methods for Transforming Arrays"),Ka=r(),mn=c("h3"),ee=e("map() - Transform Each Element"),Va=r(),H=c("p"),oe=e("The "),xs=c("code"),ce=e("map()"),le=e(" method creates a new array with the results of calling a function on every element in the original array:"),Ya=r(),fn=c("pre"),Za=r(),dn=c("h3"),ue=e("filter() - Select Elements That Match a Condition"),$a=r(),D=c("p"),re=e("The "),Ps=c("code"),ie=e("filter()"),ke=e(" method creates a new array with all elements that pass a test implemented by the provided function:"),Qa=r(),yn=c("pre"),Xa=r(),bn=c("h3"),me=e("reduce() - Accumulate Values"),nt=r(),M=c("p"),fe=e("The "),As=c("code"),de=e("reduce()"),ye=e(" method executes a reducer function on each element of the array, resulting in a single output value:"),st=r(),hn=c("pre"),at=r(),vn=c("h3"),be=e("sort() - Reorder Elements"),tt=r(),L=c("p"),he=e("The "),js=c("code"),ve=e("sort()"),Ee=e(" method sorts the elements of an array in place and returns the sorted array:"),pt=r(),En=c("pre"),et=r(),wn=c("h2"),we=e("Methods for Searching and Testing"),ot=r(),_n=c("h3"),_e=e("find() - Get the First Matching Element"),ct=r(),S=c("p"),ge=e("The "),Os=c("code"),Ce=e("find()"),Te=e(" method returns the first element in the array that satisfies a provided testing function:"),lt=r(),gn=c("pre"),ut=r(),Cn=c("h3"),xe=e("findIndex() - Get the Index of the First Match"),rt=r(),R=c("p"),Pe=e("The "),Hs=c("code"),Ae=e("findIndex()"),je=e(" method returns the index of the first element in the array that satisfies a provided testing function:"),it=r(),Tn=c("pre"),kt=r(),xn=c("h3"),Oe=e("includes() - Check if an Element Exists"),mt=r(),I=c("p"),He=e("The "),Ds=c("code"),De=e("includes()"),Me=e(" method determines whether an array includes a certain value, returning true or false:"),ft=r(),Pn=c("pre"),dt=r(),An=c("h3"),Le=e("some() - Check if Any Element Passes a Test"),yt=r(),B=c("p"),Se=e("The "),Ms=c("code"),Re=e("some()"),Ie=e(" method tests whether at least one element in the array passes the test implemented by the provided function:"),bt=r(),jn=c("pre"),ht=r(),On=c("h3"),Be=e("every() - Check if All Elements Pass a Test"),vt=r(),F=c("p"),Fe=e("The "),Ls=c("code"),Ue=e("every()"),Ne=e(" method tests whether all elements in the array pass the test implemented by the provided function:"),Et=r(),Hn=c("pre"),wt=r(),Dn=c("h2"),Je=e("Other Useful Array Methods"),_t=r(),Mn=c("h3"),Ge=e("join() - Convert Array to String"),gt=r(),U=c("p"),We=e("The "),Ss=c("code"),qe=e("join()"),ze=e(" method creates and returns a new string by concatenating all of the elements in an array, separated by a specified separator:"),Ct=r(),Ln=c("pre"),Tt=r(),Sn=c("h3"),Ke=e("slice() - Extract a Portion of an Array"),xt=r(),N=c("p"),Ve=e("The "),Rs=c("code"),Ye=e("slice()"),Ze=e(" method returns a shallow copy of a portion of an array into a new array:"),Pt=r(),Rn=c("pre"),At=r(),In=c("h3"),$e=e("concat() - Combine Arrays"),jt=r(),J=c("p"),Qe=e("The "),Is=c("code"),Xe=e("concat()"),no=e(" method is used to merge two or more arrays, returning a new array:"),Ot=r(),Bn=c("pre"),Ht=r(),Fn=c("h3"),so=e("reverse() - Reverse the Order"),Dt=r(),G=c("p"),ao=e("The "),Bs=c("code"),to=e("reverse()"),po=e(" method reverses an array in place and returns the reference to the same array:"),Mt=r(),Un=c("pre"),Lt=r(),Nn=c("h2"),eo=e("Practical Examples: Combining Array Methods"),St=r(),ks=c("p"),oo=e("The real power of array methods comes when you combine them to solve complex problems:"),Rt=r(),Jn=c("h3"),co=e("Example 1: Processing a List of Products"),It=r(),Gn=c("pre"),Bt=r(),Wn=c("h3"),lo=e("Example 2: Analyzing Student Data"),Ft=r(),qn=c("pre"),Ut=r(),zn=c("h2"),uo=e("Common Mistakes and Gotchas"),Nt=r(),Kn=c("h3"),ro=e("1. Forgetting That sort() Converts to Strings"),Jt=r(),Vn=c("pre"),Gt=r(),Yn=c("h3"),io=e("2. Modifying the Original Array"),Wt=r(),ms=c("p"),ko=e("Some methods modify the original array (mutating methods), while others return a new array:"),qt=r(),Zn=c("p"),Fs=c("strong"),mo=e("Mutating methods"),fo=e(" (change the original array):"),zt=r(),W=c("ul"),h=c("li"),Us=c("code"),yo=e("push()"),bo=e(", "),Ns=c("code"),ho=e("pop()"),vo=e(", "),Js=c("code"),Eo=e("shift()"),wo=e(", "),Gs=c("code"),_o=e("unshift()"),go=r(),g=c("li"),Ws=c("code"),Co=e("splice()"),To=e(", "),qs=c("code"),xo=e("sort()"),Po=e(", "),zs=c("code"),Ao=e("reverse()"),Kt=r(),$n=c("p"),Ks=c("strong"),jo=e("Non-mutating methods"),Oo=e(" (return a new array):"),Vt=r(),q=c("ul"),C=c("li"),Vs=c("code"),Ho=e("map()"),Do=e(", "),Ys=c("code"),Mo=e("filter()"),Lo=e(", "),Zs=c("code"),So=e("reduce()"),Ro=r(),Qn=c("li"),$s=c("code"),Io=e("concat()"),Bo=e(", "),Qs=c("code"),Fo=e("slice()"),Yt=r(),Xn=c("pre"),Zt=r(),ns=c("h3"),Uo=e("3. Using indexOf() with Objects"),$t=r(),T=c("p"),Xs=c("code"),No=e("indexOf()"),Jo=e(" uses strict equality ("),na=c("code"),Go=e("==="),Wo=e("), which doesn’t work as expected with objects:"),Qt=r(),ss=c("pre"),Xt=r(),as=c("h2"),qo=e("Conclusion"),np=r(),fs=c("p"),zo=e("JavaScript array methods are powerful tools that can make your code more concise, readable, and efficient. By mastering these methods, you’ll be able to manipulate data with ease and solve complex problems with just a few lines of code."),sp=r(),ds=c("p"),Ko=e("Remember these key points:"),ap=r(),d=c("ul"),m=c("li"),Vo=e("Use "),sa=c("code"),Yo=e("push()"),Zo=e(", "),aa=c("code"),$o=e("pop()"),Qo=e(", "),ta=c("code"),Xo=e("shift()"),nc=e(", "),pa=c("code"),sc=e("unshift()"),ac=e(", and "),ea=c("code"),tc=e("splice()"),pc=e(" to add or remove elements"),ec=r(),v=c("li"),oc=e("Use "),oa=c("code"),cc=e("map()"),lc=e(", "),ca=c("code"),uc=e("filter()"),rc=e(", and "),la=c("code"),ic=e("reduce()"),kc=e(" to transform arrays"),mc=r(),f=c("li"),fc=e("Use "),ua=c("code"),dc=e("find()"),yc=e(", "),ra=c("code"),bc=e("findIndex()"),hc=e(", "),ia=c("code"),vc=e("includes()"),Ec=e(", "),ka=c("code"),wc=e("some()"),_c=e(", and "),ma=c("code"),gc=e("every()"),Cc=e(" for searching and testing"),Tc=r(),fa=c("li"),xc=e("Be aware of which methods modify the original array and which return a new one"),Pc=r(),da=c("li"),Ac=e("Combine methods to create powerful data processing pipelines"),tp=r(),ys=c("p"),jc=e("With these array methods in your toolkit, you’ll be well-equipped to handle a wide variety of programming challenges."),pp=r(),ts=c("h2"),Oc=e("Further Resources"),ep=r(),E=c("ul"),ya=c("li"),ps=c("a"),Hc=e("MDN Web Docs: Array"),Dc=r(),ba=c("li"),es=c("a"),Mc=e("JavaScript.info: Arrays"),Lc=r(),bs=c("li"),os=c("a"),Sc=e("Array Explorer"),Rc=e(" - Interactive tool to help you find the right array method"),this.h()},l(n){_=l(n,"H1",{id:!0});var t=u(_);Pp=o(t,"JavaScript Array Methods Every Beginner Should Know"),t.forEach(s),va=i(n),V=l(n,"H2",{id:!0});var Nc=u(V);Ap=o(Nc,"Introduction"),Nc.forEach(s),Ea=i(n),cs=l(n,"P",{});var Jc=u(cs);jp=o(Jc,"Arrays are one of the most commonly used data structures in JavaScript. They allow you to store and organize multiple values in a single variable. While creating and accessing arrays is straightforward, the real power comes from JavaScript’s built-in array methods that let you manipulate and transform your data efficiently."),Jc.forEach(s),wa=i(n),ls=l(n,"P",{});var Gc=u(ls);Op=o(Gc,"In this guide, I’ll walk you through the most useful array methods that every beginner should know, with practical examples and common use cases."),Gc.forEach(s),_a=i(n),Y=l(n,"H2",{id:!0});var Wc=u(Y);Hp=o(Wc,"Basic Array Operations"),Wc.forEach(s),ga=i(n),us=l(n,"P",{});var qc=u(us);Dp=o(qc,"Let’s start with the fundamentals before diving into the more powerful methods."),qc.forEach(s),Ca=i(n),Z=l(n,"H3",{id:!0});var zc=u(Z);Mp=o(zc,"Creating Arrays"),zc.forEach(s),Ta=i(n),rs=l(n,"P",{});var Kc=u(rs);Lp=o(Kc,"There are several ways to create arrays in JavaScript:"),Kc.forEach(s),xa=i(n),$=l(n,"PRE",{class:!0});var pr=u($);pr.forEach(s),Pa=i(n),Q=l(n,"H3",{id:!0});var Vc=u(Q);Sp=o(Vc,"Accessing Array Elements"),Vc.forEach(s),Aa=i(n),is=l(n,"P",{});var Yc=u(is);Rp=o(Yc,"Array elements are accessed by their index, which starts at 0:"),Yc.forEach(s),ja=i(n),X=l(n,"PRE",{class:!0});var er=u(X);er.forEach(s),Oa=i(n),nn=l(n,"H2",{id:!0});var Zc=u(nn);Ip=o(Zc,"Methods for Adding and Removing Elements"),Zc.forEach(s),Ha=i(n),sn=l(n,"H3",{id:!0});var $c=u(sn);Bp=o($c,"push() - Add to the End"),$c.forEach(s),Da=i(n),x=l(n,"P",{});var op=u(x);Fp=o(op,"The "),ws=l(op,"CODE",{});var Qc=u(ws);Up=o(Qc,"push()"),Qc.forEach(s),Np=o(op," method adds one or more elements to the end of an array and returns the new length:"),op.forEach(s),Ma=i(n),an=l(n,"PRE",{class:!0});var or=u(an);or.forEach(s),La=i(n),tn=l(n,"H3",{id:!0});var Xc=u(tn);Jp=o(Xc,"unshift() - Add to the Beginning"),Xc.forEach(s),Sa=i(n),P=l(n,"P",{});var cp=u(P);Gp=o(cp,"The "),_s=l(cp,"CODE",{});var nl=u(_s);Wp=o(nl,"unshift()"),nl.forEach(s),qp=o(cp," method adds elements to the beginning of an array and returns the new length:"),cp.forEach(s),Ra=i(n),pn=l(n,"PRE",{class:!0});var cr=u(pn);cr.forEach(s),Ia=i(n),en=l(n,"H3",{id:!0});var sl=u(en);zp=o(sl,"pop() - Remove from the End"),sl.forEach(s),Ba=i(n),A=l(n,"P",{});var lp=u(A);Kp=o(lp,"The "),gs=l(lp,"CODE",{});var al=u(gs);Vp=o(al,"pop()"),al.forEach(s),Yp=o(lp," method removes the last element from an array and returns that element:"),lp.forEach(s),Fa=i(n),on=l(n,"PRE",{class:!0});var lr=u(on);lr.forEach(s),Ua=i(n),cn=l(n,"H3",{id:!0});var tl=u(cn);Zp=o(tl,"shift() - Remove from the Beginning"),tl.forEach(s),Na=i(n),j=l(n,"P",{});var up=u(j);$p=o(up,"The "),Cs=l(up,"CODE",{});var pl=u(Cs);Qp=o(pl,"shift()"),pl.forEach(s),Xp=o(up," method removes the first element from an array and returns that element:"),up.forEach(s),Ja=i(n),ln=l(n,"PRE",{class:!0});var ur=u(ln);ur.forEach(s),Ga=i(n),un=l(n,"H3",{id:!0});var el=u(un);ne=o(el,"splice() - Add or Remove from Any Position"),el.forEach(s),Wa=i(n),O=l(n,"P",{});var rp=u(O);se=o(rp,"The "),Ts=l(rp,"CODE",{});var ol=u(Ts);ae=o(ol,"splice()"),ol.forEach(s),te=o(rp," method changes the contents of an array by removing or replacing existing elements and/or adding new elements:"),rp.forEach(s),qa=i(n),rn=l(n,"PRE",{class:!0});var rr=u(rn);rr.forEach(s),za=i(n),kn=l(n,"H2",{id:!0});var cl=u(kn);pe=o(cl,"Methods for Transforming Arrays"),cl.forEach(s),Ka=i(n),mn=l(n,"H3",{id:!0});var ll=u(mn);ee=o(ll,"map() - Transform Each Element"),ll.forEach(s),Va=i(n),H=l(n,"P",{});var ip=u(H);oe=o(ip,"The "),xs=l(ip,"CODE",{});var ul=u(xs);ce=o(ul,"map()"),ul.forEach(s),le=o(ip," method creates a new array with the results of calling a function on every element in the original array:"),ip.forEach(s),Ya=i(n),fn=l(n,"PRE",{class:!0});var ir=u(fn);ir.forEach(s),Za=i(n),dn=l(n,"H3",{id:!0});var rl=u(dn);ue=o(rl,"filter() - Select Elements That Match a Condition"),rl.forEach(s),$a=i(n),D=l(n,"P",{});var kp=u(D);re=o(kp,"The "),Ps=l(kp,"CODE",{});var il=u(Ps);ie=o(il,"filter()"),il.forEach(s),ke=o(kp," method creates a new array with all elements that pass a test implemented by the provided function:"),kp.forEach(s),Qa=i(n),yn=l(n,"PRE",{class:!0});var kr=u(yn);kr.forEach(s),Xa=i(n),bn=l(n,"H3",{id:!0});var kl=u(bn);me=o(kl,"reduce() - Accumulate Values"),kl.forEach(s),nt=i(n),M=l(n,"P",{});var mp=u(M);fe=o(mp,"The "),As=l(mp,"CODE",{});var ml=u(As);de=o(ml,"reduce()"),ml.forEach(s),ye=o(mp," method executes a reducer function on each element of the array, resulting in a single output value:"),mp.forEach(s),st=i(n),hn=l(n,"PRE",{class:!0});var mr=u(hn);mr.forEach(s),at=i(n),vn=l(n,"H3",{id:!0});var fl=u(vn);be=o(fl,"sort() - Reorder Elements"),fl.forEach(s),tt=i(n),L=l(n,"P",{});var fp=u(L);he=o(fp,"The "),js=l(fp,"CODE",{});var dl=u(js);ve=o(dl,"sort()"),dl.forEach(s),Ee=o(fp," method sorts the elements of an array in place and returns the sorted array:"),fp.forEach(s),pt=i(n),En=l(n,"PRE",{class:!0});var fr=u(En);fr.forEach(s),et=i(n),wn=l(n,"H2",{id:!0});var yl=u(wn);we=o(yl,"Methods for Searching and Testing"),yl.forEach(s),ot=i(n),_n=l(n,"H3",{id:!0});var bl=u(_n);_e=o(bl,"find() - Get the First Matching Element"),bl.forEach(s),ct=i(n),S=l(n,"P",{});var dp=u(S);ge=o(dp,"The "),Os=l(dp,"CODE",{});var hl=u(Os);Ce=o(hl,"find()"),hl.forEach(s),Te=o(dp," method returns the first element in the array that satisfies a provided testing function:"),dp.forEach(s),lt=i(n),gn=l(n,"PRE",{class:!0});var dr=u(gn);dr.forEach(s),ut=i(n),Cn=l(n,"H3",{id:!0});var vl=u(Cn);xe=o(vl,"findIndex() - Get the Index of the First Match"),vl.forEach(s),rt=i(n),R=l(n,"P",{});var yp=u(R);Pe=o(yp,"The "),Hs=l(yp,"CODE",{});var El=u(Hs);Ae=o(El,"findIndex()"),El.forEach(s),je=o(yp," method returns the index of the first element in the array that satisfies a provided testing function:"),yp.forEach(s),it=i(n),Tn=l(n,"PRE",{class:!0});var yr=u(Tn);yr.forEach(s),kt=i(n),xn=l(n,"H3",{id:!0});var wl=u(xn);Oe=o(wl,"includes() - Check if an Element Exists"),wl.forEach(s),mt=i(n),I=l(n,"P",{});var bp=u(I);He=o(bp,"The "),Ds=l(bp,"CODE",{});var _l=u(Ds);De=o(_l,"includes()"),_l.forEach(s),Me=o(bp," method determines whether an array includes a certain value, returning true or false:"),bp.forEach(s),ft=i(n),Pn=l(n,"PRE",{class:!0});var br=u(Pn);br.forEach(s),dt=i(n),An=l(n,"H3",{id:!0});var gl=u(An);Le=o(gl,"some() - Check if Any Element Passes a Test"),gl.forEach(s),yt=i(n),B=l(n,"P",{});var hp=u(B);Se=o(hp,"The "),Ms=l(hp,"CODE",{});var Cl=u(Ms);Re=o(Cl,"some()"),Cl.forEach(s),Ie=o(hp," method tests whether at least one element in the array passes the test implemented by the provided function:"),hp.forEach(s),bt=i(n),jn=l(n,"PRE",{class:!0});var hr=u(jn);hr.forEach(s),ht=i(n),On=l(n,"H3",{id:!0});var Tl=u(On);Be=o(Tl,"every() - Check if All Elements Pass a Test"),Tl.forEach(s),vt=i(n),F=l(n,"P",{});var vp=u(F);Fe=o(vp,"The "),Ls=l(vp,"CODE",{});var xl=u(Ls);Ue=o(xl,"every()"),xl.forEach(s),Ne=o(vp," method tests whether all elements in the array pass the test implemented by the provided function:"),vp.forEach(s),Et=i(n),Hn=l(n,"PRE",{class:!0});var vr=u(Hn);vr.forEach(s),wt=i(n),Dn=l(n,"H2",{id:!0});var Pl=u(Dn);Je=o(Pl,"Other Useful Array Methods"),Pl.forEach(s),_t=i(n),Mn=l(n,"H3",{id:!0});var Al=u(Mn);Ge=o(Al,"join() - Convert Array to String"),Al.forEach(s),gt=i(n),U=l(n,"P",{});var Ep=u(U);We=o(Ep,"The "),Ss=l(Ep,"CODE",{});var jl=u(Ss);qe=o(jl,"join()"),jl.forEach(s),ze=o(Ep," method creates and returns a new string by concatenating all of the elements in an array, separated by a specified separator:"),Ep.forEach(s),Ct=i(n),Ln=l(n,"PRE",{class:!0});var Er=u(Ln);Er.forEach(s),Tt=i(n),Sn=l(n,"H3",{id:!0});var Ol=u(Sn);Ke=o(Ol,"slice() - Extract a Portion of an Array"),Ol.forEach(s),xt=i(n),N=l(n,"P",{});var wp=u(N);Ve=o(wp,"The "),Rs=l(wp,"CODE",{});var Hl=u(Rs);Ye=o(Hl,"slice()"),Hl.forEach(s),Ze=o(wp," method returns a shallow copy of a portion of an array into a new array:"),wp.forEach(s),Pt=i(n),Rn=l(n,"PRE",{class:!0});var wr=u(Rn);wr.forEach(s),At=i(n),In=l(n,"H3",{id:!0});var Dl=u(In);$e=o(Dl,"concat() - Combine Arrays"),Dl.forEach(s),jt=i(n),J=l(n,"P",{});var _p=u(J);Qe=o(_p,"The "),Is=l(_p,"CODE",{});var Ml=u(Is);Xe=o(Ml,"concat()"),Ml.forEach(s),no=o(_p," method is used to merge two or more arrays, returning a new array:"),_p.forEach(s),Ot=i(n),Bn=l(n,"PRE",{class:!0});var _r=u(Bn);_r.forEach(s),Ht=i(n),Fn=l(n,"H3",{id:!0});var Ll=u(Fn);so=o(Ll,"reverse() - Reverse the Order"),Ll.forEach(s),Dt=i(n),G=l(n,"P",{});var gp=u(G);ao=o(gp,"The "),Bs=l(gp,"CODE",{});var Sl=u(Bs);to=o(Sl,"reverse()"),Sl.forEach(s),po=o(gp," method reverses an array in place and returns the reference to the same array:"),gp.forEach(s),Mt=i(n),Un=l(n,"PRE",{class:!0});var gr=u(Un);gr.forEach(s),Lt=i(n),Nn=l(n,"H2",{id:!0});var Rl=u(Nn);eo=o(Rl,"Practical Examples: Combining Array Methods"),Rl.forEach(s),St=i(n),ks=l(n,"P",{});var Il=u(ks);oo=o(Il,"The real power of array methods comes when you combine them to solve complex problems:"),Il.forEach(s),Rt=i(n),Jn=l(n,"H3",{id:!0});var Bl=u(Jn);co=o(Bl,"Example 1: Processing a List of Products"),Bl.forEach(s),It=i(n),Gn=l(n,"PRE",{class:!0});var Cr=u(Gn);Cr.forEach(s),Bt=i(n),Wn=l(n,"H3",{id:!0});var Fl=u(Wn);lo=o(Fl,"Example 2: Analyzing Student Data"),Fl.forEach(s),Ft=i(n),qn=l(n,"PRE",{class:!0});var Tr=u(qn);Tr.forEach(s),Ut=i(n),zn=l(n,"H2",{id:!0});var Ul=u(zn);uo=o(Ul,"Common Mistakes and Gotchas"),Ul.forEach(s),Nt=i(n),Kn=l(n,"H3",{id:!0});var Nl=u(Kn);ro=o(Nl,"1. Forgetting That sort() Converts to Strings"),Nl.forEach(s),Jt=i(n),Vn=l(n,"PRE",{class:!0});var xr=u(Vn);xr.forEach(s),Gt=i(n),Yn=l(n,"H3",{id:!0});var Jl=u(Yn);io=o(Jl,"2. Modifying the Original Array"),Jl.forEach(s),Wt=i(n),ms=l(n,"P",{});var Gl=u(ms);ko=o(Gl,"Some methods modify the original array (mutating methods), while others return a new array:"),Gl.forEach(s),qt=i(n),Zn=l(n,"P",{});var Ic=u(Zn);Fs=l(Ic,"STRONG",{});var Wl=u(Fs);mo=o(Wl,"Mutating methods"),Wl.forEach(s),fo=o(Ic," (change the original array):"),Ic.forEach(s),zt=i(n),W=l(n,"UL",{});var Cp=u(W);h=l(Cp,"LI",{});var z=u(h);Us=l(z,"CODE",{});var ql=u(Us);yo=o(ql,"push()"),ql.forEach(s),bo=o(z,", "),Ns=l(z,"CODE",{});var zl=u(Ns);ho=o(zl,"pop()"),zl.forEach(s),vo=o(z,", "),Js=l(z,"CODE",{});var Kl=u(Js);Eo=o(Kl,"shift()"),Kl.forEach(s),wo=o(z,", "),Gs=l(z,"CODE",{});var Vl=u(Gs);_o=o(Vl,"unshift()"),Vl.forEach(s),z.forEach(s),go=i(Cp),g=l(Cp,"LI",{});var hs=u(g);Ws=l(hs,"CODE",{});var Yl=u(Ws);Co=o(Yl,"splice()"),Yl.forEach(s),To=o(hs,", "),qs=l(hs,"CODE",{});var Zl=u(qs);xo=o(Zl,"sort()"),Zl.forEach(s),Po=o(hs,", "),zs=l(hs,"CODE",{});var $l=u(zs);Ao=o($l,"reverse()"),$l.forEach(s),hs.forEach(s),Cp.forEach(s),Kt=i(n),$n=l(n,"P",{});var Bc=u($n);Ks=l(Bc,"STRONG",{});var Ql=u(Ks);jo=o(Ql,"Non-mutating methods"),Ql.forEach(s),Oo=o(Bc," (return a new array):"),Bc.forEach(s),Vt=i(n),q=l(n,"UL",{});var Tp=u(q);C=l(Tp,"LI",{});var vs=u(C);Vs=l(vs,"CODE",{});var Xl=u(Vs);Ho=o(Xl,"map()"),Xl.forEach(s),Do=o(vs,", "),Ys=l(vs,"CODE",{});var nu=u(Ys);Mo=o(nu,"filter()"),nu.forEach(s),Lo=o(vs,", "),Zs=l(vs,"CODE",{});var su=u(Zs);So=o(su,"reduce()"),su.forEach(s),vs.forEach(s),Ro=i(Tp),Qn=l(Tp,"LI",{});var xp=u(Qn);$s=l(xp,"CODE",{});var au=u($s);Io=o(au,"concat()"),au.forEach(s),Bo=o(xp,", "),Qs=l(xp,"CODE",{});var tu=u(Qs);Fo=o(tu,"slice()"),tu.forEach(s),xp.forEach(s),Tp.forEach(s),Yt=i(n),Xn=l(n,"PRE",{class:!0});var Pr=u(Xn);Pr.forEach(s),Zt=i(n),ns=l(n,"H3",{id:!0});var pu=u(ns);Uo=o(pu,"3. Using indexOf() with Objects"),pu.forEach(s),$t=i(n),T=l(n,"P",{});var ha=u(T);Xs=l(ha,"CODE",{});var eu=u(Xs);No=o(eu,"indexOf()"),eu.forEach(s),Jo=o(ha," uses strict equality ("),na=l(ha,"CODE",{});var ou=u(na);Go=o(ou,"==="),ou.forEach(s),Wo=o(ha,"), which doesn’t work as expected with objects:"),ha.forEach(s),Qt=i(n),ss=l(n,"PRE",{class:!0});var Ar=u(ss);Ar.forEach(s),Xt=i(n),as=l(n,"H2",{id:!0});var cu=u(as);qo=o(cu,"Conclusion"),cu.forEach(s),np=i(n),fs=l(n,"P",{});var lu=u(fs);zo=o(lu,"JavaScript array methods are powerful tools that can make your code more concise, readable, and efficient. By mastering these methods, you’ll be able to manipulate data with ease and solve complex problems with just a few lines of code."),lu.forEach(s),sp=i(n),ds=l(n,"P",{});var uu=u(ds);Ko=o(uu,"Remember these key points:"),uu.forEach(s),ap=i(n),d=l(n,"UL",{});var w=u(d);m=l(w,"LI",{});var y=u(m);Vo=o(y,"Use "),sa=l(y,"CODE",{});var ru=u(sa);Yo=o(ru,"push()"),ru.forEach(s),Zo=o(y,", "),aa=l(y,"CODE",{});var iu=u(aa);$o=o(iu,"pop()"),iu.forEach(s),Qo=o(y,", "),ta=l(y,"CODE",{});var ku=u(ta);Xo=o(ku,"shift()"),ku.forEach(s),nc=o(y,", "),pa=l(y,"CODE",{});var mu=u(pa);sc=o(mu,"unshift()"),mu.forEach(s),ac=o(y,", and "),ea=l(y,"CODE",{});var fu=u(ea);tc=o(fu,"splice()"),fu.forEach(s),pc=o(y," to add or remove elements"),y.forEach(s),ec=i(w),v=l(w,"LI",{});var K=u(v);oc=o(K,"Use "),oa=l(K,"CODE",{});var du=u(oa);cc=o(du,"map()"),du.forEach(s),lc=o(K,", "),ca=l(K,"CODE",{});var yu=u(ca);uc=o(yu,"filter()"),yu.forEach(s),rc=o(K,", and "),la=l(K,"CODE",{});var bu=u(la);ic=o(bu,"reduce()"),bu.forEach(s),kc=o(K," to transform arrays"),K.forEach(s),mc=i(w),f=l(w,"LI",{});var b=u(f);fc=o(b,"Use "),ua=l(b,"CODE",{});var hu=u(ua);dc=o(hu,"find()"),hu.forEach(s),yc=o(b,", "),ra=l(b,"CODE",{});var vu=u(ra);bc=o(vu,"findIndex()"),vu.forEach(s),hc=o(b,", "),ia=l(b,"CODE",{});var Eu=u(ia);vc=o(Eu,"includes()"),Eu.forEach(s),Ec=o(b,", "),ka=l(b,"CODE",{});var wu=u(ka);wc=o(wu,"some()"),wu.forEach(s),_c=o(b,", and "),ma=l(b,"CODE",{});var _u=u(ma);gc=o(_u,"every()"),_u.forEach(s),Cc=o(b," for searching and testing"),b.forEach(s),Tc=i(w),fa=l(w,"LI",{});var gu=u(fa);xc=o(gu,"Be aware of which methods modify the original array and which return a new one"),gu.forEach(s),Pc=i(w),da=l(w,"LI",{});var Cu=u(da);Ac=o(Cu,"Combine methods to create powerful data processing pipelines"),Cu.forEach(s),w.forEach(s),tp=i(n),ys=l(n,"P",{});var Tu=u(ys);jc=o(Tu,"With these array methods in your toolkit, you’ll be well-equipped to handle a wide variety of programming challenges."),Tu.forEach(s),pp=i(n),ts=l(n,"H2",{id:!0});var xu=u(ts);Oc=o(xu,"Further Resources"),xu.forEach(s),ep=i(n),E=l(n,"UL",{});var Es=u(E);ya=l(Es,"LI",{});var Pu=u(ya);ps=l(Pu,"A",{href:!0,rel:!0});var Au=u(ps);Hc=o(Au,"MDN Web Docs: Array"),Au.forEach(s),Pu.forEach(s),Dc=i(Es),ba=l(Es,"LI",{});var ju=u(ba);es=l(ju,"A",{href:!0,rel:!0});var Ou=u(es);Mc=o(Ou,"JavaScript.info: Arrays"),Ou.forEach(s),ju.forEach(s),Lc=i(Es),bs=l(Es,"LI",{});var Fc=u(bs);os=l(Fc,"A",{href:!0,rel:!0});var Hu=u(os);Sc=o(Hu,"Array Explorer"),Hu.forEach(s),Rc=o(Fc," - Interactive tool to help you find the right array method"),Fc.forEach(s),Es.forEach(s),this.h()},h(){k(_,"id","javascript-array-methods-every-beginner-should-know"),k(V,"id","introduction"),k(Y,"id","basic-array-operations"),k(Z,"id","creating-arrays"),k($,"class","language-javascript"),k(Q,"id","accessing-array-elements"),k(X,"class","language-javascript"),k(nn,"id","methods-for-adding-and-removing-elements"),k(sn,"id","push---add-to-the-end"),k(an,"class","language-javascript"),k(tn,"id","unshift---add-to-the-beginning"),k(pn,"class","language-javascript"),k(en,"id","pop---remove-from-the-end"),k(on,"class","language-javascript"),k(cn,"id","shift---remove-from-the-beginning"),k(ln,"class","language-javascript"),k(un,"id","splice---add-or-remove-from-any-position"),k(rn,"class","language-javascript"),k(kn,"id","methods-for-transforming-arrays"),k(mn,"id","map---transform-each-element"),k(fn,"class","language-javascript"),k(dn,"id","filter---select-elements-that-match-a-condition"),k(yn,"class","language-javascript"),k(bn,"id","reduce---accumulate-values"),k(hn,"class","language-javascript"),k(vn,"id","sort---reorder-elements"),k(En,"class","language-javascript"),k(wn,"id","methods-for-searching-and-testing"),k(_n,"id","find---get-the-first-matching-element"),k(gn,"class","language-javascript"),k(Cn,"id","findindex---get-the-index-of-the-first-match"),k(Tn,"class","language-javascript"),k(xn,"id","includes---check-if-an-element-exists"),k(Pn,"class","language-javascript"),k(An,"id","some---check-if-any-element-passes-a-test"),k(jn,"class","language-javascript"),k(On,"id","every---check-if-all-elements-pass-a-test"),k(Hn,"class","language-javascript"),k(Dn,"id","other-useful-array-methods"),k(Mn,"id","join---convert-array-to-string"),k(Ln,"class","language-javascript"),k(Sn,"id","slice---extract-a-portion-of-an-array"),k(Rn,"class","language-javascript"),k(In,"id","concat---combine-arrays"),k(Bn,"class","language-javascript"),k(Fn,"id","reverse---reverse-the-order"),k(Un,"class","language-javascript"),k(Nn,"id","practical-examples-combining-array-methods"),k(Jn,"id","example-1-processing-a-list-of-products"),k(Gn,"class","language-javascript"),k(Wn,"id","example-2-analyzing-student-data"),k(qn,"class","language-javascript"),k(zn,"id","common-mistakes-and-gotchas"),k(Kn,"id","1-forgetting-that-sort-converts-to-strings"),k(Vn,"class","language-javascript"),k(Yn,"id","2-modifying-the-original-array"),k(Xn,"class","language-javascript"),k(ns,"id","3-using-indexof-with-objects"),k(ss,"class","language-javascript"),k(as,"id","conclusion"),k(ts,"id","further-resources"),k(ps,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"),k(ps,"rel","nofollow"),k(es,"href","https://javascript.info/array"),k(es,"rel","nofollow"),k(os,"href","https://arrayexplorer.netlify.app/"),k(os,"rel","nofollow")},m(n,t){p(n,_,t),a(_,Pp),p(n,va,t),p(n,V,t),a(V,Ap),p(n,Ea,t),p(n,cs,t),a(cs,jp),p(n,wa,t),p(n,ls,t),a(ls,Op),p(n,_a,t),p(n,Y,t),a(Y,Hp),p(n,ga,t),p(n,us,t),a(us,Dp),p(n,Ca,t),p(n,Z,t),a(Z,Mp),p(n,Ta,t),p(n,rs,t),a(rs,Lp),p(n,xa,t),p(n,$,t),$.innerHTML=Mu,p(n,Pa,t),p(n,Q,t),a(Q,Sp),p(n,Aa,t),p(n,is,t),a(is,Rp),p(n,ja,t),p(n,X,t),X.innerHTML=Lu,p(n,Oa,t),p(n,nn,t),a(nn,Ip),p(n,Ha,t),p(n,sn,t),a(sn,Bp),p(n,Da,t),p(n,x,t),a(x,Fp),a(x,ws),a(ws,Up),a(x,Np),p(n,Ma,t),p(n,an,t),an.innerHTML=Su,p(n,La,t),p(n,tn,t),a(tn,Jp),p(n,Sa,t),p(n,P,t),a(P,Gp),a(P,_s),a(_s,Wp),a(P,qp),p(n,Ra,t),p(n,pn,t),pn.innerHTML=Ru,p(n,Ia,t),p(n,en,t),a(en,zp),p(n,Ba,t),p(n,A,t),a(A,Kp),a(A,gs),a(gs,Vp),a(A,Yp),p(n,Fa,t),p(n,on,t),on.innerHTML=Iu,p(n,Ua,t),p(n,cn,t),a(cn,Zp),p(n,Na,t),p(n,j,t),a(j,$p),a(j,Cs),a(Cs,Qp),a(j,Xp),p(n,Ja,t),p(n,ln,t),ln.innerHTML=Bu,p(n,Ga,t),p(n,un,t),a(un,ne),p(n,Wa,t),p(n,O,t),a(O,se),a(O,Ts),a(Ts,ae),a(O,te),p(n,qa,t),p(n,rn,t),rn.innerHTML=Fu,p(n,za,t),p(n,kn,t),a(kn,pe),p(n,Ka,t),p(n,mn,t),a(mn,ee),p(n,Va,t),p(n,H,t),a(H,oe),a(H,xs),a(xs,ce),a(H,le),p(n,Ya,t),p(n,fn,t),fn.innerHTML=Uu,p(n,Za,t),p(n,dn,t),a(dn,ue),p(n,$a,t),p(n,D,t),a(D,re),a(D,Ps),a(Ps,ie),a(D,ke),p(n,Qa,t),p(n,yn,t),yn.innerHTML=Nu,p(n,Xa,t),p(n,bn,t),a(bn,me),p(n,nt,t),p(n,M,t),a(M,fe),a(M,As),a(As,de),a(M,ye),p(n,st,t),p(n,hn,t),hn.innerHTML=Ju,p(n,at,t),p(n,vn,t),a(vn,be),p(n,tt,t),p(n,L,t),a(L,he),a(L,js),a(js,ve),a(L,Ee),p(n,pt,t),p(n,En,t),En.innerHTML=Gu,p(n,et,t),p(n,wn,t),a(wn,we),p(n,ot,t),p(n,_n,t),a(_n,_e),p(n,ct,t),p(n,S,t),a(S,ge),a(S,Os),a(Os,Ce),a(S,Te),p(n,lt,t),p(n,gn,t),gn.innerHTML=Wu,p(n,ut,t),p(n,Cn,t),a(Cn,xe),p(n,rt,t),p(n,R,t),a(R,Pe),a(R,Hs),a(Hs,Ae),a(R,je),p(n,it,t),p(n,Tn,t),Tn.innerHTML=qu,p(n,kt,t),p(n,xn,t),a(xn,Oe),p(n,mt,t),p(n,I,t),a(I,He),a(I,Ds),a(Ds,De),a(I,Me),p(n,ft,t),p(n,Pn,t),Pn.innerHTML=zu,p(n,dt,t),p(n,An,t),a(An,Le),p(n,yt,t),p(n,B,t),a(B,Se),a(B,Ms),a(Ms,Re),a(B,Ie),p(n,bt,t),p(n,jn,t),jn.innerHTML=Ku,p(n,ht,t),p(n,On,t),a(On,Be),p(n,vt,t),p(n,F,t),a(F,Fe),a(F,Ls),a(Ls,Ue),a(F,Ne),p(n,Et,t),p(n,Hn,t),Hn.innerHTML=Vu,p(n,wt,t),p(n,Dn,t),a(Dn,Je),p(n,_t,t),p(n,Mn,t),a(Mn,Ge),p(n,gt,t),p(n,U,t),a(U,We),a(U,Ss),a(Ss,qe),a(U,ze),p(n,Ct,t),p(n,Ln,t),Ln.innerHTML=Yu,p(n,Tt,t),p(n,Sn,t),a(Sn,Ke),p(n,xt,t),p(n,N,t),a(N,Ve),a(N,Rs),a(Rs,Ye),a(N,Ze),p(n,Pt,t),p(n,Rn,t),Rn.innerHTML=Zu,p(n,At,t),p(n,In,t),a(In,$e),p(n,jt,t),p(n,J,t),a(J,Qe),a(J,Is),a(Is,Xe),a(J,no),p(n,Ot,t),p(n,Bn,t),Bn.innerHTML=$u,p(n,Ht,t),p(n,Fn,t),a(Fn,so),p(n,Dt,t),p(n,G,t),a(G,ao),a(G,Bs),a(Bs,to),a(G,po),p(n,Mt,t),p(n,Un,t),Un.innerHTML=Qu,p(n,Lt,t),p(n,Nn,t),a(Nn,eo),p(n,St,t),p(n,ks,t),a(ks,oo),p(n,Rt,t),p(n,Jn,t),a(Jn,co),p(n,It,t),p(n,Gn,t),Gn.innerHTML=Xu,p(n,Bt,t),p(n,Wn,t),a(Wn,lo),p(n,Ft,t),p(n,qn,t),qn.innerHTML=nr,p(n,Ut,t),p(n,zn,t),a(zn,uo),p(n,Nt,t),p(n,Kn,t),a(Kn,ro),p(n,Jt,t),p(n,Vn,t),Vn.innerHTML=sr,p(n,Gt,t),p(n,Yn,t),a(Yn,io),p(n,Wt,t),p(n,ms,t),a(ms,ko),p(n,qt,t),p(n,Zn,t),a(Zn,Fs),a(Fs,mo),a(Zn,fo),p(n,zt,t),p(n,W,t),a(W,h),a(h,Us),a(Us,yo),a(h,bo),a(h,Ns),a(Ns,ho),a(h,vo),a(h,Js),a(Js,Eo),a(h,wo),a(h,Gs),a(Gs,_o),a(W,go),a(W,g),a(g,Ws),a(Ws,Co),a(g,To),a(g,qs),a(qs,xo),a(g,Po),a(g,zs),a(zs,Ao),p(n,Kt,t),p(n,$n,t),a($n,Ks),a(Ks,jo),a($n,Oo),p(n,Vt,t),p(n,q,t),a(q,C),a(C,Vs),a(Vs,Ho),a(C,Do),a(C,Ys),a(Ys,Mo),a(C,Lo),a(C,Zs),a(Zs,So),a(q,Ro),a(q,Qn),a(Qn,$s),a($s,Io),a(Qn,Bo),a(Qn,Qs),a(Qs,Fo),p(n,Yt,t),p(n,Xn,t),Xn.innerHTML=ar,p(n,Zt,t),p(n,ns,t),a(ns,Uo),p(n,$t,t),p(n,T,t),a(T,Xs),a(Xs,No),a(T,Jo),a(T,na),a(na,Go),a(T,Wo),p(n,Qt,t),p(n,ss,t),ss.innerHTML=tr,p(n,Xt,t),p(n,as,t),a(as,qo),p(n,np,t),p(n,fs,t),a(fs,zo),p(n,sp,t),p(n,ds,t),a(ds,Ko),p(n,ap,t),p(n,d,t),a(d,m),a(m,Vo),a(m,sa),a(sa,Yo),a(m,Zo),a(m,aa),a(aa,$o),a(m,Qo),a(m,ta),a(ta,Xo),a(m,nc),a(m,pa),a(pa,sc),a(m,ac),a(m,ea),a(ea,tc),a(m,pc),a(d,ec),a(d,v),a(v,oc),a(v,oa),a(oa,cc),a(v,lc),a(v,ca),a(ca,uc),a(v,rc),a(v,la),a(la,ic),a(v,kc),a(d,mc),a(d,f),a(f,fc),a(f,ua),a(ua,dc),a(f,yc),a(f,ra),a(ra,bc),a(f,hc),a(f,ia),a(ia,vc),a(f,Ec),a(f,ka),a(ka,wc),a(f,_c),a(f,ma),a(ma,gc),a(f,Cc),a(d,Tc),a(d,fa),a(fa,xc),a(d,Pc),a(d,da),a(da,Ac),p(n,tp,t),p(n,ys,t),a(ys,jc),p(n,pp,t),p(n,ts,t),a(ts,Oc),p(n,ep,t),p(n,E,t),a(E,ya),a(ya,ps),a(ps,Hc),a(E,Dc),a(E,ba),a(ba,es),a(es,Mc),a(E,Lc),a(E,bs),a(bs,os),a(os,Sc),a(bs,Rc)},p:Uc,i:Uc,o:Uc,d(n){n&&s(_),n&&s(va),n&&s(V),n&&s(Ea),n&&s(cs),n&&s(wa),n&&s(ls),n&&s(_a),n&&s(Y),n&&s(ga),n&&s(us),n&&s(Ca),n&&s(Z),n&&s(Ta),n&&s(rs),n&&s(xa),n&&s($),n&&s(Pa),n&&s(Q),n&&s(Aa),n&&s(is),n&&s(ja),n&&s(X),n&&s(Oa),n&&s(nn),n&&s(Ha),n&&s(sn),n&&s(Da),n&&s(x),n&&s(Ma),n&&s(an),n&&s(La),n&&s(tn),n&&s(Sa),n&&s(P),n&&s(Ra),n&&s(pn),n&&s(Ia),n&&s(en),n&&s(Ba),n&&s(A),n&&s(Fa),n&&s(on),n&&s(Ua),n&&s(cn),n&&s(Na),n&&s(j),n&&s(Ja),n&&s(ln),n&&s(Ga),n&&s(un),n&&s(Wa),n&&s(O),n&&s(qa),n&&s(rn),n&&s(za),n&&s(kn),n&&s(Ka),n&&s(mn),n&&s(Va),n&&s(H),n&&s(Ya),n&&s(fn),n&&s(Za),n&&s(dn),n&&s($a),n&&s(D),n&&s(Qa),n&&s(yn),n&&s(Xa),n&&s(bn),n&&s(nt),n&&s(M),n&&s(st),n&&s(hn),n&&s(at),n&&s(vn),n&&s(tt),n&&s(L),n&&s(pt),n&&s(En),n&&s(et),n&&s(wn),n&&s(ot),n&&s(_n),n&&s(ct),n&&s(S),n&&s(lt),n&&s(gn),n&&s(ut),n&&s(Cn),n&&s(rt),n&&s(R),n&&s(it),n&&s(Tn),n&&s(kt),n&&s(xn),n&&s(mt),n&&s(I),n&&s(ft),n&&s(Pn),n&&s(dt),n&&s(An),n&&s(yt),n&&s(B),n&&s(bt),n&&s(jn),n&&s(ht),n&&s(On),n&&s(vt),n&&s(F),n&&s(Et),n&&s(Hn),n&&s(wt),n&&s(Dn),n&&s(_t),n&&s(Mn),n&&s(gt),n&&s(U),n&&s(Ct),n&&s(Ln),n&&s(Tt),n&&s(Sn),n&&s(xt),n&&s(N),n&&s(Pt),n&&s(Rn),n&&s(At),n&&s(In),n&&s(jt),n&&s(J),n&&s(Ot),n&&s(Bn),n&&s(Ht),n&&s(Fn),n&&s(Dt),n&&s(G),n&&s(Mt),n&&s(Un),n&&s(Lt),n&&s(Nn),n&&s(St),n&&s(ks),n&&s(Rt),n&&s(Jn),n&&s(It),n&&s(Gn),n&&s(Bt),n&&s(Wn),n&&s(Ft),n&&s(qn),n&&s(Ut),n&&s(zn),n&&s(Nt),n&&s(Kn),n&&s(Jt),n&&s(Vn),n&&s(Gt),n&&s(Yn),n&&s(Wt),n&&s(ms),n&&s(qt),n&&s(Zn),n&&s(zt),n&&s(W),n&&s(Kt),n&&s($n),n&&s(Vt),n&&s(q),n&&s(Yt),n&&s(Xn),n&&s(Zt),n&&s(ns),n&&s($t),n&&s(T),n&&s(Qt),n&&s(ss),n&&s(Xt),n&&s(as),n&&s(np),n&&s(fs),n&&s(sp),n&&s(ds),n&&s(ap),n&&s(d),n&&s(tp),n&&s(ys),n&&s(pp),n&&s(ts),n&&s(ep),n&&s(E)}}}const Lr={title:"JavaScript Array Methods Every Beginner Should Know",description:"Master the essential JavaScript array methods that will make your code cleaner and more efficient. This beginner-friendly guide covers methods for adding, removing, transforming, and searching through arrays with practical examples and common use cases.",date:"2024-02-20T00:00:00.000Z",published:!0};class Sr extends jr{constructor(_){super(),Or(this,_,null,Dr,Hr,{})}}export{Sr as default,Lr as metadata};
