import{S as su,i as au,s as tu,k as o,q as u,a as i,l as e,m as c,r as l,h as s,c as k,n as r,b as p,C as a,K as Go}from"./index.8762ca70.js";function pu(xc){let x,dt,Ns,U,vt,qs,In,yt,Bs,O,wt,Fs,Pn,ht,Ws,Un,gt,As,d,ts,Et,xt,ps,_t,Ct,os,Ht,bt,D,St,es,Rt,Tt,Vs,M,jt,Ys,On,Lt,Gs,N,It,Js,C,Pt,cs,Ut,Ot,zs,q,Dt,$s,B,_c=`<code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Declare a state variable called "count" with initial value of 0</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">You clicked </span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token plain-text"> times</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        Click me
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ks,Dn,Mt,Zs,f,F,Nt,us,qt,Bt,Ft,_,Wt,ls,At,Vt,is,Yt,Gt,Jt,Mn,ks,zt,$t,Kt,Nn,Zt,rs,Qt,Xt,W,np,fs,sp,ap,Qs,A,tp,Xs,H,pp,ms,op,ep,na,V,Cc=`<code class="language-jsx"><span class="token keyword">function</span> <span class="token function">UserForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>firstName<span class="token punctuation">,</span> setFirstName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>lastName<span class="token punctuation">,</span> setLastName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>email<span class="token punctuation">,</span> setEmail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>firstName<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setFirstName</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>First name<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>lastName<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setLastName</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Last name<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>email<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setEmail</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,sa,Y,cp,aa,qn,up,ta,G,Hc=`<code class="language-jsx"><span class="token keyword">function</span> <span class="token function">UserForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> setUser<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">''</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> value <span class="token punctuation">&#125;</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
    <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token operator">...</span>user<span class="token punctuation">,</span> <span class="token comment">// Important: spread the existing user properties</span>
      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> value <span class="token comment">// Update only the changed field</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>firstName<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleChange<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>First name<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>lastName<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleChange<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Last name<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span>
        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>email<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleChange<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,pa,v,lp,ds,ip,kp,vs,rp,fp,ys,mp,dp,oa,J,vp,ea,b,yp,ws,wp,hp,ca,z,gp,ua,$,bc=`<code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">DocumentTitleUpdater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// This runs after every render</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">You clicked </span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token plain-text"> times</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        Click me
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,la,S,Ep,hs,xp,_p,ia,K,Cp,ka,Bn,Hp,ra,Z,Sc=`<code class="language-jsx"><span class="token keyword">function</span> <span class="token function">UserProfile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> userId <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> setUser<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// This effect runs when the component mounts</span>
    <span class="token comment">// and whenever userId changes</span>
    <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">https://api.example.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">setUser</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error fetching user:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Only re-run if userId changes</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">User not found</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Email: </span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>email<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,fa,h,bp,gs,Sp,Rp,Es,Tp,jp,ma,Q,Lp,da,Fn,Ip,va,X,Rc=`<code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>seconds<span class="token punctuation">,</span> setSeconds<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">setSeconds</span><span class="token punctuation">(</span><span class="token parameter">prevSeconds</span> <span class="token operator">=></span> prevSeconds <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Return a cleanup function</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Empty array means "run only on mount and unmount"</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Seconds: </span><span class="token punctuation">&#123;</span>seconds<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ya,Wn,Pp,wa,nn,Up,ha,R,Op,xs,Dp,Mp,ga,sn,Np,Ea,an,Tc=`<code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> createContext<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token comment">// Create a context</span>
<span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create a provider component</span>
<span class="token keyword">function</span> <span class="token function">ThemeProvider</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>theme<span class="token punctuation">,</span> setTheme<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'light'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">toggleTheme</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTheme</span><span class="token punctuation">(</span><span class="token parameter">prevTheme</span> <span class="token operator">=></span> prevTheme <span class="token operator">===</span> <span class="token string">'light'</span> <span class="token operator">?</span> <span class="token string">'dark'</span> <span class="token operator">:</span> <span class="token string">'light'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// The value prop contains what we want to expose to consumers</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> theme<span class="token punctuation">,</span> toggleTheme <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeContext.Provider</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,xa,tn,qp,_a,pn,jc=`<code class="language-jsx"><span class="token keyword">function</span> <span class="token function">ThemedButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Get values from context</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> theme<span class="token punctuation">,</span> toggleTheme <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
      <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>toggleTheme<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> theme <span class="token operator">===</span> <span class="token string">'light'</span> <span class="token operator">?</span> <span class="token string">'#fff'</span> <span class="token operator">:</span> <span class="token string">'#333'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> theme <span class="token operator">===</span> <span class="token string">'light'</span> <span class="token operator">?</span> <span class="token string">'#333'</span> <span class="token operator">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token string">'1px solid'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">'8px 16px'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>
    <span class="token punctuation">></span></span><span class="token plain-text">
      Toggle Theme
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Using the provider in your app</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Context Example</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemedButton</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ca,T,Bp,_s,Fp,Wp,Ha,on,Ap,ba,An,Vp,Sa,en,Yp,Ra,Vn,Gp,Ta,cn,Lc=`<code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">useLocalStorage</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> initialValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Initialize state with value from localStorage or initialValue</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>storedValue<span class="token punctuation">,</span> setStoredValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> item <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> item <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> initialValue<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> initialValue<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Update localStorage when state changes</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>storedValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> storedValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>storedValue<span class="token punctuation">,</span> setStoredValue<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ja,Yn,Jp,La,un,Ic=`<code class="language-jsx"><span class="token keyword">function</span> <span class="token function">SavedNotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>notes<span class="token punctuation">,</span> setNotes<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useLocalStorage</span><span class="token punctuation">(</span><span class="token string">'notes'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>currentNote<span class="token punctuation">,</span> setCurrentNote<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useLocalStorage</span><span class="token punctuation">(</span><span class="token string">'currentNote'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">addNote</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNote<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">setNotes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>notes<span class="token punctuation">,</span> currentNote<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setCurrentNote</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Saved Notes</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>currentNote<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCurrentNote</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Write a note...<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>addNote<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Save Note</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">

      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">&#123;</span>notes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">note<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>note<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ia,Gn,zp,Pa,ln,$p,Ua,Jn,Kp,Oa,kn,Pc=`<code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> setError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> abortController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">signal</span><span class="token operator">:</span> abortController<span class="token punctuation">.</span>signal <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">HTTP error! Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setData</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setError</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">'AbortError'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Cleanup: abort fetch if component unmounts or url changes</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> abortController<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> error <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Da,zn,Zp,Ma,rn,Uc=`<code class="language-jsx"><span class="token keyword">function</span> <span class="token function">UserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> error <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">'https://api.example.com/users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Error: </span><span class="token punctuation">&#123;</span>error<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">No data</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Na,fn,Qp,qa,mn,Xp,Ba,dn,Oc=`<code class="language-jsx"><span class="token comment">// ❌ Incorrect: missing dependency</span>
<span class="token keyword">function</span> <span class="token function">SearchResults</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> query <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>results<span class="token punctuation">,</span> setResults<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">fetchResults</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token function">setResults</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Missing 'query' in dependencies</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ✅ Correct: include all dependencies</span>
<span class="token keyword">function</span> <span class="token function">SearchResults</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> query <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>results<span class="token punctuation">,</span> setResults<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">fetchResults</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token function">setResults</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>query<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'query' included in dependencies</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span></code>`,Fa,vn,no,Wa,yn,Dc=`<code class="language-jsx"><span class="token comment">// ❌ Inefficient: creates a new function on every render</span>
<span class="token keyword">function</span> <span class="token function">UserProfile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> userId <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// This function is recreated on every render</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fetchUser</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">/api/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ✅ Better: use useCallback for functions needed in effects</span>
<span class="token keyword">function</span> <span class="token function">UserProfile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> userId <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> fetchUser <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">/api/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fetchUser<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fetchUser is stable between renders if userId doesn't change</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span></code>`,Aa,wn,so,Va,hn,Mc=`<code class="language-jsx"><span class="token comment">// ❌ Potential issue: uses stale state</span>
<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// This might use a stale value of count</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ✅ Better: use functional updates</span>
<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// This always uses the latest state</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">prevCount</span> <span class="token operator">=></span> prevCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span></code>`,Ya,gn,ao,Ga,$n,to,Ja,Kn,Zn,Cs,po,oo,za,En,Nc=`<code class="language-jsx"><span class="token comment">// ❌ Wrong: Hook inside a condition</span>
<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// This breaks the rules</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ✅ Correct: Condition inside the Hook</span>
<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// This is fine</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,$a,xn,Qn,Hs,eo,co,Ka,_n,uo,Za,y,lo,bs,io,ko,Ss,ro,fo,Rs,mo,vo,Qa,Xn,yo,Xa,m,Cn,wo,Ts,ho,go,Eo,Hn,xo,js,_o,Co,Ho,bn,bo,Ls,So,Ro,To,Is,jo,Lo,Ps,Io,nt,ns,Po,st,Sn,Uo,at,w,Us,Rn,Oo,Do,Os,Tn,Mo,No,Ds,jn,qo,Bo,Ms,Ln,Fo;return{c(){x=o("h1"),dt=u("React Hooks Explained for Beginners: A Practical Guide"),Ns=i(),U=o("h2"),vt=u("Introduction"),qs=i(),In=o("p"),yt=u("If you’re learning React, you’ve probably heard about Hooks. Introduced in React 16.8, Hooks revolutionized how we write React components by allowing us to use state and other React features without writing classes. In this guide, I’ll explain React Hooks in a beginner-friendly way with practical examples you can start using in your projects right away."),Bs=i(),O=o("h2"),wt=u("What Are React Hooks and Why Should You Use Them?"),Fs=i(),Pn=o("p"),ht=u("React Hooks are functions that let you “hook into” React state and lifecycle features from function components. Before Hooks, you had to use class components for these features."),Ws=i(),Un=o("p"),gt=u("Benefits of using Hooks:"),As=i(),d=o("ul"),ts=o("li"),Et=u("Write cleaner, more concise code"),xt=i(),ps=o("li"),_t=u("Reuse stateful logic between components"),Ct=i(),os=o("li"),Ht=u("Organize related code together (instead of splitting it across lifecycle methods)"),bt=i(),D=o("li"),St=u("Avoid the confusion of "),es=o("code"),Rt=u("this"),Tt=u(" keyword in JavaScript classes"),Vs=i(),M=o("h2"),jt=u("The Most Important Hooks"),Ys=i(),On=o("p"),Lt=u("Let’s explore the most commonly used Hooks with practical examples."),Gs=i(),N=o("h3"),It=u("useState: Managing Component State"),Js=i(),C=o("p"),Pt=u("The "),cs=o("code"),Ut=u("useState"),Ot=u(" Hook lets you add state to function components."),zs=i(),q=o("h4"),Dt=u("Basic Example"),$s=i(),B=o("pre"),Ks=i(),Dn=o("p"),Mt=u("Breaking this down:"),Zs=i(),f=o("ol"),F=o("li"),Nt=u("We import the "),us=o("code"),qt=u("useState"),Bt=u(" Hook from React"),Ft=i(),_=o("li"),Wt=u("Inside our component, we call "),ls=o("code"),At=u("useState(0)"),Vt=u(" to create a state variable ("),is=o("code"),Yt=u("count"),Gt=u(") with an initial value of 0"),Jt=i(),Mn=o("li"),ks=o("code"),zt=u("useState"),$t=u(" returns an array with two items: the current state value and a function to update it"),Kt=i(),Nn=o("li"),Zt=u("We use array destructuring to assign names to these items: "),rs=o("code"),Qt=u("[count, setCount]"),Xt=i(),W=o("li"),np=u("When the button is clicked, we call "),fs=o("code"),sp=u("setCount"),ap=u(" with the new value"),Qs=i(),A=o("h4"),tp=u("Managing Multiple State Values"),Xs=i(),H=o("p"),pp=u("You can call "),ms=o("code"),op=u("useState"),ep=u(" multiple times in a component:"),na=i(),V=o("pre"),sa=i(),Y=o("h4"),cp=u("Using Objects with useState"),aa=i(),qn=o("p"),up=u("For related state values, you can use an object:"),ta=i(),G=o("pre"),pa=i(),v=o("p"),lp=u("Note: When updating an object with "),ds=o("code"),ip=u("useState"),kp=u(", you must create a new object that includes all existing properties (using the spread operator "),vs=o("code"),rp=u("..."),fp=u(") plus your changes. React won’t automatically merge objects like it does with "),ys=o("code"),mp=u("this.setState()"),dp=u(" in class components."),oa=i(),J=o("h3"),vp=u("useEffect: Performing Side Effects"),ea=i(),b=o("p"),yp=u("The "),ws=o("code"),wp=u("useEffect"),hp=u(" Hook lets you perform side effects in function components. Side effects include data fetching, subscriptions, manual DOM manipulations, and more."),ca=i(),z=o("h4"),gp=u("Basic Example"),ua=i(),$=o("pre"),la=i(),S=o("p"),Ep=u("In this example, "),hs=o("code"),xp=u("useEffect"),_p=u(" updates the document title after every render, reflecting the current count."),ia=i(),K=o("h4"),Cp=u("Controlling When Effects Run"),ka=i(),Bn=o("p"),Hp=u("You can control when effects run by providing a dependency array:"),ra=i(),Z=o("pre"),fa=i(),h=o("p"),bp=u("The dependency array "),gs=o("code"),Sp=u("[userId]"),Rp=u(" tells React to only re-run the effect when "),Es=o("code"),Tp=u("userId"),jp=u(" changes."),ma=i(),Q=o("h4"),Lp=u("Cleaning Up Effects"),da=i(),Fn=o("p"),Ip=u("Some effects need cleanup, like subscriptions or timers:"),va=i(),X=o("pre"),ya=i(),Wn=o("p"),Pp=u("The cleanup function runs when the component unmounts or before the effect runs again."),wa=i(),nn=o("h3"),Up=u("useContext: Accessing Context"),ha=i(),R=o("p"),Op=u("The "),xs=o("code"),Dp=u("useContext"),Mp=u(" Hook provides a way to pass data through the component tree without manually passing props down at every level."),ga=i(),sn=o("h4"),Np=u("Setting Up Context"),Ea=i(),an=o("pre"),xa=i(),tn=o("h4"),qp=u("Using Context with useContext"),_a=i(),pn=o("pre"),Ca=i(),T=o("p"),Bp=u("This allows "),_s=o("code"),Fp=u("ThemedButton"),Wp=u(" to access the theme context without passing props through intermediate components."),Ha=i(),on=o("h2"),Ap=u("Creating Custom Hooks"),ba=i(),An=o("p"),Vp=u("One of the most powerful features of Hooks is the ability to create your own custom Hooks to extract and reuse stateful logic."),Sa=i(),en=o("h3"),Yp=u("Example: useLocalStorage"),Ra=i(),Vn=o("p"),Gp=u("Let’s create a custom Hook that syncs state with localStorage:"),Ta=i(),cn=o("pre"),ja=i(),Yn=o("p"),Jp=u("Using the custom Hook:"),La=i(),un=o("pre"),Ia=i(),Gn=o("p"),zp=u("This custom Hook encapsulates all the logic for reading from and writing to localStorage, making it reusable across components."),Pa=i(),ln=o("h3"),$p=u("Example: useFetch"),Ua=i(),Jn=o("p"),Kp=u("Here’s another custom Hook for data fetching:"),Oa=i(),kn=o("pre"),Da=i(),zn=o("p"),Zp=u("Using the custom Hook:"),Ma=i(),rn=o("pre"),Na=i(),fn=o("h2"),Qp=u("Common Hooks Mistakes and How to Avoid Them"),qa=i(),mn=o("h3"),Xp=u("Mistake 1: Missing Dependencies in useEffect"),Ba=i(),dn=o("pre"),Fa=i(),vn=o("h3"),no=u("Mistake 2: Creating Functions Inside useEffect"),Wa=i(),yn=o("pre"),Aa=i(),wn=o("h3"),so=u("Mistake 3: Not Using Functional Updates"),Va=i(),hn=o("pre"),Ya=i(),gn=o("h2"),ao=u("Rules of Hooks"),Ga=i(),$n=o("p"),to=u("To use Hooks correctly, follow these two rules:"),Ja=i(),Kn=o("ol"),Zn=o("li"),Cs=o("strong"),po=u("Only call Hooks at the top level"),oo=u(" - Don’t call Hooks inside loops, conditions, or nested functions."),za=i(),En=o("pre"),$a=i(),xn=o("ol"),Qn=o("li"),Hs=o("strong"),eo=u("Only call Hooks from React function components or custom Hooks"),co=u(" - Don’t call Hooks from regular JavaScript functions."),Ka=i(),_n=o("h2"),uo=u("Conclusion"),Za=i(),y=o("p"),lo=u("React Hooks provide a more intuitive way to work with state and side effects in function components. By understanding "),bs=o("code"),io=u("useState"),ko=u(", "),Ss=o("code"),ro=u("useEffect"),fo=u(", and "),Rs=o("code"),mo=u("useContext"),vo=u(", you have the foundation to build powerful React applications. Custom Hooks allow you to extract and reuse logic, making your code more modular and maintainable."),Qa=i(),Xn=o("p"),yo=u("Remember these key points:"),Xa=i(),m=o("ul"),Cn=o("li"),wo=u("Use "),Ts=o("code"),ho=u("useState"),go=u(" to add state to function components"),Eo=i(),Hn=o("li"),xo=u("Use "),js=o("code"),_o=u("useEffect"),Co=u(" for side effects like data fetching and DOM manipulation"),Ho=i(),bn=o("li"),bo=u("Use "),Ls=o("code"),So=u("useContext"),Ro=u(" to consume context without prop drilling"),To=i(),Is=o("li"),jo=u("Create custom Hooks to reuse stateful logic across components"),Lo=i(),Ps=o("li"),Io=u("Follow the Rules of Hooks for correct behavior"),nt=i(),ns=o("p"),Po=u("With these fundamentals, you’re well on your way to mastering React Hooks and building more efficient React applications."),st=i(),Sn=o("h2"),Uo=u("Further Resources"),at=i(),w=o("ul"),Us=o("li"),Rn=o("a"),Oo=u("React Hooks Documentation"),Do=i(),Os=o("li"),Tn=o("a"),Mo=u("Thinking in React Hooks"),No=i(),Ds=o("li"),jn=o("a"),qo=u("Collection of React Hooks"),Bo=i(),Ms=o("li"),Ln=o("a"),Fo=u("Rules of Hooks Linter Plugin"),this.h()},l(n){x=e(n,"H1",{id:!0});var t=c(x);dt=l(t,"React Hooks Explained for Beginners: A Practical Guide"),t.forEach(s),Ns=k(n),U=e(n,"H2",{id:!0});var Jo=c(U);vt=l(Jo,"Introduction"),Jo.forEach(s),qs=k(n),In=e(n,"P",{});var zo=c(In);yt=l(zo,"If you’re learning React, you’ve probably heard about Hooks. Introduced in React 16.8, Hooks revolutionized how we write React components by allowing us to use state and other React features without writing classes. In this guide, I’ll explain React Hooks in a beginner-friendly way with practical examples you can start using in your projects right away."),zo.forEach(s),Bs=k(n),O=e(n,"H2",{id:!0});var $o=c(O);wt=l($o,"What Are React Hooks and Why Should You Use Them?"),$o.forEach(s),Fs=k(n),Pn=e(n,"P",{});var Ko=c(Pn);ht=l(Ko,"React Hooks are functions that let you “hook into” React state and lifecycle features from function components. Before Hooks, you had to use class components for these features."),Ko.forEach(s),Ws=k(n),Un=e(n,"P",{});var Zo=c(Un);gt=l(Zo,"Benefits of using Hooks:"),Zo.forEach(s),As=k(n),d=e(n,"UL",{});var j=c(d);ts=e(j,"LI",{});var Qo=c(ts);Et=l(Qo,"Write cleaner, more concise code"),Qo.forEach(s),xt=k(j),ps=e(j,"LI",{});var Xo=c(ps);_t=l(Xo,"Reuse stateful logic between components"),Xo.forEach(s),Ct=k(j),os=e(j,"LI",{});var ne=c(os);Ht=l(ne,"Organize related code together (instead of splitting it across lifecycle methods)"),ne.forEach(s),bt=k(j),D=e(j,"LI",{});var tt=c(D);St=l(tt,"Avoid the confusion of "),es=e(tt,"CODE",{});var se=c(es);Rt=l(se,"this"),se.forEach(s),Tt=l(tt," keyword in JavaScript classes"),tt.forEach(s),j.forEach(s),Vs=k(n),M=e(n,"H2",{id:!0});var ae=c(M);jt=l(ae,"The Most Important Hooks"),ae.forEach(s),Ys=k(n),On=e(n,"P",{});var te=c(On);Lt=l(te,"Let’s explore the most commonly used Hooks with practical examples."),te.forEach(s),Gs=k(n),N=e(n,"H3",{id:!0});var pe=c(N);It=l(pe,"useState: Managing Component State"),pe.forEach(s),Js=k(n),C=e(n,"P",{});var pt=c(C);Pt=l(pt,"The "),cs=e(pt,"CODE",{});var oe=c(cs);Ut=l(oe,"useState"),oe.forEach(s),Ot=l(pt," Hook lets you add state to function components."),pt.forEach(s),zs=k(n),q=e(n,"H4",{id:!0});var ee=c(q);Dt=l(ee,"Basic Example"),ee.forEach(s),$s=k(n),B=e(n,"PRE",{class:!0});var qc=c(B);qc.forEach(s),Ks=k(n),Dn=e(n,"P",{});var ce=c(Dn);Mt=l(ce,"Breaking this down:"),ce.forEach(s),Zs=k(n),f=e(n,"OL",{});var g=c(f);F=e(g,"LI",{});var ot=c(F);Nt=l(ot,"We import the "),us=e(ot,"CODE",{});var ue=c(us);qt=l(ue,"useState"),ue.forEach(s),Bt=l(ot," Hook from React"),ot.forEach(s),Ft=k(g),_=e(g,"LI",{});var ss=c(_);Wt=l(ss,"Inside our component, we call "),ls=e(ss,"CODE",{});var le=c(ls);At=l(le,"useState(0)"),le.forEach(s),Vt=l(ss," to create a state variable ("),is=e(ss,"CODE",{});var ie=c(is);Yt=l(ie,"count"),ie.forEach(s),Gt=l(ss,") with an initial value of 0"),ss.forEach(s),Jt=k(g),Mn=e(g,"LI",{});var Wo=c(Mn);ks=e(Wo,"CODE",{});var ke=c(ks);zt=l(ke,"useState"),ke.forEach(s),$t=l(Wo," returns an array with two items: the current state value and a function to update it"),Wo.forEach(s),Kt=k(g),Nn=e(g,"LI",{});var Ao=c(Nn);Zt=l(Ao,"We use array destructuring to assign names to these items: "),rs=e(Ao,"CODE",{});var re=c(rs);Qt=l(re,"[count, setCount]"),re.forEach(s),Ao.forEach(s),Xt=k(g),W=e(g,"LI",{});var et=c(W);np=l(et,"When the button is clicked, we call "),fs=e(et,"CODE",{});var fe=c(fs);sp=l(fe,"setCount"),fe.forEach(s),ap=l(et," with the new value"),et.forEach(s),g.forEach(s),Qs=k(n),A=e(n,"H4",{id:!0});var me=c(A);tp=l(me,"Managing Multiple State Values"),me.forEach(s),Xs=k(n),H=e(n,"P",{});var ct=c(H);pp=l(ct,"You can call "),ms=e(ct,"CODE",{});var de=c(ms);op=l(de,"useState"),de.forEach(s),ep=l(ct," multiple times in a component:"),ct.forEach(s),na=k(n),V=e(n,"PRE",{class:!0});var Bc=c(V);Bc.forEach(s),sa=k(n),Y=e(n,"H4",{id:!0});var ve=c(Y);cp=l(ve,"Using Objects with useState"),ve.forEach(s),aa=k(n),qn=e(n,"P",{});var ye=c(qn);up=l(ye,"For related state values, you can use an object:"),ye.forEach(s),ta=k(n),G=e(n,"PRE",{class:!0});var Fc=c(G);Fc.forEach(s),pa=k(n),v=e(n,"P",{});var L=c(v);lp=l(L,"Note: When updating an object with "),ds=e(L,"CODE",{});var we=c(ds);ip=l(we,"useState"),we.forEach(s),kp=l(L,", you must create a new object that includes all existing properties (using the spread operator "),vs=e(L,"CODE",{});var he=c(vs);rp=l(he,"..."),he.forEach(s),fp=l(L,") plus your changes. React won’t automatically merge objects like it does with "),ys=e(L,"CODE",{});var ge=c(ys);mp=l(ge,"this.setState()"),ge.forEach(s),dp=l(L," in class components."),L.forEach(s),oa=k(n),J=e(n,"H3",{id:!0});var Ee=c(J);vp=l(Ee,"useEffect: Performing Side Effects"),Ee.forEach(s),ea=k(n),b=e(n,"P",{});var ut=c(b);yp=l(ut,"The "),ws=e(ut,"CODE",{});var xe=c(ws);wp=l(xe,"useEffect"),xe.forEach(s),hp=l(ut," Hook lets you perform side effects in function components. Side effects include data fetching, subscriptions, manual DOM manipulations, and more."),ut.forEach(s),ca=k(n),z=e(n,"H4",{id:!0});var _e=c(z);gp=l(_e,"Basic Example"),_e.forEach(s),ua=k(n),$=e(n,"PRE",{class:!0});var Wc=c($);Wc.forEach(s),la=k(n),S=e(n,"P",{});var lt=c(S);Ep=l(lt,"In this example, "),hs=e(lt,"CODE",{});var Ce=c(hs);xp=l(Ce,"useEffect"),Ce.forEach(s),_p=l(lt," updates the document title after every render, reflecting the current count."),lt.forEach(s),ia=k(n),K=e(n,"H4",{id:!0});var He=c(K);Cp=l(He,"Controlling When Effects Run"),He.forEach(s),ka=k(n),Bn=e(n,"P",{});var be=c(Bn);Hp=l(be,"You can control when effects run by providing a dependency array:"),be.forEach(s),ra=k(n),Z=e(n,"PRE",{class:!0});var Ac=c(Z);Ac.forEach(s),fa=k(n),h=e(n,"P",{});var as=c(h);bp=l(as,"The dependency array "),gs=e(as,"CODE",{});var Se=c(gs);Sp=l(Se,"[userId]"),Se.forEach(s),Rp=l(as," tells React to only re-run the effect when "),Es=e(as,"CODE",{});var Re=c(Es);Tp=l(Re,"userId"),Re.forEach(s),jp=l(as," changes."),as.forEach(s),ma=k(n),Q=e(n,"H4",{id:!0});var Te=c(Q);Lp=l(Te,"Cleaning Up Effects"),Te.forEach(s),da=k(n),Fn=e(n,"P",{});var je=c(Fn);Ip=l(je,"Some effects need cleanup, like subscriptions or timers:"),je.forEach(s),va=k(n),X=e(n,"PRE",{class:!0});var Vc=c(X);Vc.forEach(s),ya=k(n),Wn=e(n,"P",{});var Le=c(Wn);Pp=l(Le,"The cleanup function runs when the component unmounts or before the effect runs again."),Le.forEach(s),wa=k(n),nn=e(n,"H3",{id:!0});var Ie=c(nn);Up=l(Ie,"useContext: Accessing Context"),Ie.forEach(s),ha=k(n),R=e(n,"P",{});var it=c(R);Op=l(it,"The "),xs=e(it,"CODE",{});var Pe=c(xs);Dp=l(Pe,"useContext"),Pe.forEach(s),Mp=l(it," Hook provides a way to pass data through the component tree without manually passing props down at every level."),it.forEach(s),ga=k(n),sn=e(n,"H4",{id:!0});var Ue=c(sn);Np=l(Ue,"Setting Up Context"),Ue.forEach(s),Ea=k(n),an=e(n,"PRE",{class:!0});var Yc=c(an);Yc.forEach(s),xa=k(n),tn=e(n,"H4",{id:!0});var Oe=c(tn);qp=l(Oe,"Using Context with useContext"),Oe.forEach(s),_a=k(n),pn=e(n,"PRE",{class:!0});var Gc=c(pn);Gc.forEach(s),Ca=k(n),T=e(n,"P",{});var kt=c(T);Bp=l(kt,"This allows "),_s=e(kt,"CODE",{});var De=c(_s);Fp=l(De,"ThemedButton"),De.forEach(s),Wp=l(kt," to access the theme context without passing props through intermediate components."),kt.forEach(s),Ha=k(n),on=e(n,"H2",{id:!0});var Me=c(on);Ap=l(Me,"Creating Custom Hooks"),Me.forEach(s),ba=k(n),An=e(n,"P",{});var Ne=c(An);Vp=l(Ne,"One of the most powerful features of Hooks is the ability to create your own custom Hooks to extract and reuse stateful logic."),Ne.forEach(s),Sa=k(n),en=e(n,"H3",{id:!0});var qe=c(en);Yp=l(qe,"Example: useLocalStorage"),qe.forEach(s),Ra=k(n),Vn=e(n,"P",{});var Be=c(Vn);Gp=l(Be,"Let’s create a custom Hook that syncs state with localStorage:"),Be.forEach(s),Ta=k(n),cn=e(n,"PRE",{class:!0});var Jc=c(cn);Jc.forEach(s),ja=k(n),Yn=e(n,"P",{});var Fe=c(Yn);Jp=l(Fe,"Using the custom Hook:"),Fe.forEach(s),La=k(n),un=e(n,"PRE",{class:!0});var zc=c(un);zc.forEach(s),Ia=k(n),Gn=e(n,"P",{});var We=c(Gn);zp=l(We,"This custom Hook encapsulates all the logic for reading from and writing to localStorage, making it reusable across components."),We.forEach(s),Pa=k(n),ln=e(n,"H3",{id:!0});var Ae=c(ln);$p=l(Ae,"Example: useFetch"),Ae.forEach(s),Ua=k(n),Jn=e(n,"P",{});var Ve=c(Jn);Kp=l(Ve,"Here’s another custom Hook for data fetching:"),Ve.forEach(s),Oa=k(n),kn=e(n,"PRE",{class:!0});var $c=c(kn);$c.forEach(s),Da=k(n),zn=e(n,"P",{});var Ye=c(zn);Zp=l(Ye,"Using the custom Hook:"),Ye.forEach(s),Ma=k(n),rn=e(n,"PRE",{class:!0});var Kc=c(rn);Kc.forEach(s),Na=k(n),fn=e(n,"H2",{id:!0});var Ge=c(fn);Qp=l(Ge,"Common Hooks Mistakes and How to Avoid Them"),Ge.forEach(s),qa=k(n),mn=e(n,"H3",{id:!0});var Je=c(mn);Xp=l(Je,"Mistake 1: Missing Dependencies in useEffect"),Je.forEach(s),Ba=k(n),dn=e(n,"PRE",{class:!0});var Zc=c(dn);Zc.forEach(s),Fa=k(n),vn=e(n,"H3",{id:!0});var ze=c(vn);no=l(ze,"Mistake 2: Creating Functions Inside useEffect"),ze.forEach(s),Wa=k(n),yn=e(n,"PRE",{class:!0});var Qc=c(yn);Qc.forEach(s),Aa=k(n),wn=e(n,"H3",{id:!0});var $e=c(wn);so=l($e,"Mistake 3: Not Using Functional Updates"),$e.forEach(s),Va=k(n),hn=e(n,"PRE",{class:!0});var Xc=c(hn);Xc.forEach(s),Ya=k(n),gn=e(n,"H2",{id:!0});var Ke=c(gn);ao=l(Ke,"Rules of Hooks"),Ke.forEach(s),Ga=k(n),$n=e(n,"P",{});var Ze=c($n);to=l(Ze,"To use Hooks correctly, follow these two rules:"),Ze.forEach(s),Ja=k(n),Kn=e(n,"OL",{});var Qe=c(Kn);Zn=e(Qe,"LI",{});var Vo=c(Zn);Cs=e(Vo,"STRONG",{});var Xe=c(Cs);po=l(Xe,"Only call Hooks at the top level"),Xe.forEach(s),oo=l(Vo," - Don’t call Hooks inside loops, conditions, or nested functions."),Vo.forEach(s),Qe.forEach(s),za=k(n),En=e(n,"PRE",{class:!0});var nu=c(En);nu.forEach(s),$a=k(n),xn=e(n,"OL",{start:!0});var nc=c(xn);Qn=e(nc,"LI",{});var Yo=c(Qn);Hs=e(Yo,"STRONG",{});var sc=c(Hs);eo=l(sc,"Only call Hooks from React function components or custom Hooks"),sc.forEach(s),co=l(Yo," - Don’t call Hooks from regular JavaScript functions."),Yo.forEach(s),nc.forEach(s),Ka=k(n),_n=e(n,"H2",{id:!0});var ac=c(_n);uo=l(ac,"Conclusion"),ac.forEach(s),Za=k(n),y=e(n,"P",{});var I=c(y);lo=l(I,"React Hooks provide a more intuitive way to work with state and side effects in function components. By understanding "),bs=e(I,"CODE",{});var tc=c(bs);io=l(tc,"useState"),tc.forEach(s),ko=l(I,", "),Ss=e(I,"CODE",{});var pc=c(Ss);ro=l(pc,"useEffect"),pc.forEach(s),fo=l(I,", and "),Rs=e(I,"CODE",{});var oc=c(Rs);mo=l(oc,"useContext"),oc.forEach(s),vo=l(I,", you have the foundation to build powerful React applications. Custom Hooks allow you to extract and reuse logic, making your code more modular and maintainable."),I.forEach(s),Qa=k(n),Xn=e(n,"P",{});var ec=c(Xn);yo=l(ec,"Remember these key points:"),ec.forEach(s),Xa=k(n),m=e(n,"UL",{});var E=c(m);Cn=e(E,"LI",{});var rt=c(Cn);wo=l(rt,"Use "),Ts=e(rt,"CODE",{});var cc=c(Ts);ho=l(cc,"useState"),cc.forEach(s),go=l(rt," to add state to function components"),rt.forEach(s),Eo=k(E),Hn=e(E,"LI",{});var ft=c(Hn);xo=l(ft,"Use "),js=e(ft,"CODE",{});var uc=c(js);_o=l(uc,"useEffect"),uc.forEach(s),Co=l(ft," for side effects like data fetching and DOM manipulation"),ft.forEach(s),Ho=k(E),bn=e(E,"LI",{});var mt=c(bn);bo=l(mt,"Use "),Ls=e(mt,"CODE",{});var lc=c(Ls);So=l(lc,"useContext"),lc.forEach(s),Ro=l(mt," to consume context without prop drilling"),mt.forEach(s),To=k(E),Is=e(E,"LI",{});var ic=c(Is);jo=l(ic,"Create custom Hooks to reuse stateful logic across components"),ic.forEach(s),Lo=k(E),Ps=e(E,"LI",{});var kc=c(Ps);Io=l(kc,"Follow the Rules of Hooks for correct behavior"),kc.forEach(s),E.forEach(s),nt=k(n),ns=e(n,"P",{});var rc=c(ns);Po=l(rc,"With these fundamentals, you’re well on your way to mastering React Hooks and building more efficient React applications."),rc.forEach(s),st=k(n),Sn=e(n,"H2",{id:!0});var fc=c(Sn);Uo=l(fc,"Further Resources"),fc.forEach(s),at=k(n),w=e(n,"UL",{});var P=c(w);Us=e(P,"LI",{});var mc=c(Us);Rn=e(mc,"A",{href:!0,rel:!0});var dc=c(Rn);Oo=l(dc,"React Hooks Documentation"),dc.forEach(s),mc.forEach(s),Do=k(P),Os=e(P,"LI",{});var vc=c(Os);Tn=e(vc,"A",{href:!0,rel:!0});var yc=c(Tn);Mo=l(yc,"Thinking in React Hooks"),yc.forEach(s),vc.forEach(s),No=k(P),Ds=e(P,"LI",{});var wc=c(Ds);jn=e(wc,"A",{href:!0,rel:!0});var hc=c(jn);qo=l(hc,"Collection of React Hooks"),hc.forEach(s),wc.forEach(s),Bo=k(P),Ms=e(P,"LI",{});var gc=c(Ms);Ln=e(gc,"A",{href:!0,rel:!0});var Ec=c(Ln);Fo=l(Ec,"Rules of Hooks Linter Plugin"),Ec.forEach(s),gc.forEach(s),P.forEach(s),this.h()},h(){r(x,"id","react-hooks-explained-for-beginners-a-practical-guide"),r(U,"id","introduction"),r(O,"id","what-are-react-hooks-and-why-should-you-use-them"),r(M,"id","the-most-important-hooks"),r(N,"id","usestate-managing-component-state"),r(q,"id","basic-example"),r(B,"class","language-jsx"),r(A,"id","managing-multiple-state-values"),r(V,"class","language-jsx"),r(Y,"id","using-objects-with-usestate"),r(G,"class","language-jsx"),r(J,"id","useeffect-performing-side-effects"),r(z,"id","basic-example-1"),r($,"class","language-jsx"),r(K,"id","controlling-when-effects-run"),r(Z,"class","language-jsx"),r(Q,"id","cleaning-up-effects"),r(X,"class","language-jsx"),r(nn,"id","usecontext-accessing-context"),r(sn,"id","setting-up-context"),r(an,"class","language-jsx"),r(tn,"id","using-context-with-usecontext"),r(pn,"class","language-jsx"),r(on,"id","creating-custom-hooks"),r(en,"id","example-uselocalstorage"),r(cn,"class","language-jsx"),r(un,"class","language-jsx"),r(ln,"id","example-usefetch"),r(kn,"class","language-jsx"),r(rn,"class","language-jsx"),r(fn,"id","common-hooks-mistakes-and-how-to-avoid-them"),r(mn,"id","mistake-1-missing-dependencies-in-useeffect"),r(dn,"class","language-jsx"),r(vn,"id","mistake-2-creating-functions-inside-useeffect"),r(yn,"class","language-jsx"),r(wn,"id","mistake-3-not-using-functional-updates"),r(hn,"class","language-jsx"),r(gn,"id","rules-of-hooks"),r(En,"class","language-jsx"),r(xn,"start","2"),r(_n,"id","conclusion"),r(Sn,"id","further-resources"),r(Rn,"href","https://reactjs.org/docs/hooks-intro.html"),r(Rn,"rel","nofollow"),r(Tn,"href","https://wattenberger.com/blog/react-hooks"),r(Tn,"rel","nofollow"),r(jn,"href","https://usehooks.com/"),r(jn,"rel","nofollow"),r(Ln,"href","https://www.npmjs.com/package/eslint-plugin-react-hooks"),r(Ln,"rel","nofollow")},m(n,t){p(n,x,t),a(x,dt),p(n,Ns,t),p(n,U,t),a(U,vt),p(n,qs,t),p(n,In,t),a(In,yt),p(n,Bs,t),p(n,O,t),a(O,wt),p(n,Fs,t),p(n,Pn,t),a(Pn,ht),p(n,Ws,t),p(n,Un,t),a(Un,gt),p(n,As,t),p(n,d,t),a(d,ts),a(ts,Et),a(d,xt),a(d,ps),a(ps,_t),a(d,Ct),a(d,os),a(os,Ht),a(d,bt),a(d,D),a(D,St),a(D,es),a(es,Rt),a(D,Tt),p(n,Vs,t),p(n,M,t),a(M,jt),p(n,Ys,t),p(n,On,t),a(On,Lt),p(n,Gs,t),p(n,N,t),a(N,It),p(n,Js,t),p(n,C,t),a(C,Pt),a(C,cs),a(cs,Ut),a(C,Ot),p(n,zs,t),p(n,q,t),a(q,Dt),p(n,$s,t),p(n,B,t),B.innerHTML=_c,p(n,Ks,t),p(n,Dn,t),a(Dn,Mt),p(n,Zs,t),p(n,f,t),a(f,F),a(F,Nt),a(F,us),a(us,qt),a(F,Bt),a(f,Ft),a(f,_),a(_,Wt),a(_,ls),a(ls,At),a(_,Vt),a(_,is),a(is,Yt),a(_,Gt),a(f,Jt),a(f,Mn),a(Mn,ks),a(ks,zt),a(Mn,$t),a(f,Kt),a(f,Nn),a(Nn,Zt),a(Nn,rs),a(rs,Qt),a(f,Xt),a(f,W),a(W,np),a(W,fs),a(fs,sp),a(W,ap),p(n,Qs,t),p(n,A,t),a(A,tp),p(n,Xs,t),p(n,H,t),a(H,pp),a(H,ms),a(ms,op),a(H,ep),p(n,na,t),p(n,V,t),V.innerHTML=Cc,p(n,sa,t),p(n,Y,t),a(Y,cp),p(n,aa,t),p(n,qn,t),a(qn,up),p(n,ta,t),p(n,G,t),G.innerHTML=Hc,p(n,pa,t),p(n,v,t),a(v,lp),a(v,ds),a(ds,ip),a(v,kp),a(v,vs),a(vs,rp),a(v,fp),a(v,ys),a(ys,mp),a(v,dp),p(n,oa,t),p(n,J,t),a(J,vp),p(n,ea,t),p(n,b,t),a(b,yp),a(b,ws),a(ws,wp),a(b,hp),p(n,ca,t),p(n,z,t),a(z,gp),p(n,ua,t),p(n,$,t),$.innerHTML=bc,p(n,la,t),p(n,S,t),a(S,Ep),a(S,hs),a(hs,xp),a(S,_p),p(n,ia,t),p(n,K,t),a(K,Cp),p(n,ka,t),p(n,Bn,t),a(Bn,Hp),p(n,ra,t),p(n,Z,t),Z.innerHTML=Sc,p(n,fa,t),p(n,h,t),a(h,bp),a(h,gs),a(gs,Sp),a(h,Rp),a(h,Es),a(Es,Tp),a(h,jp),p(n,ma,t),p(n,Q,t),a(Q,Lp),p(n,da,t),p(n,Fn,t),a(Fn,Ip),p(n,va,t),p(n,X,t),X.innerHTML=Rc,p(n,ya,t),p(n,Wn,t),a(Wn,Pp),p(n,wa,t),p(n,nn,t),a(nn,Up),p(n,ha,t),p(n,R,t),a(R,Op),a(R,xs),a(xs,Dp),a(R,Mp),p(n,ga,t),p(n,sn,t),a(sn,Np),p(n,Ea,t),p(n,an,t),an.innerHTML=Tc,p(n,xa,t),p(n,tn,t),a(tn,qp),p(n,_a,t),p(n,pn,t),pn.innerHTML=jc,p(n,Ca,t),p(n,T,t),a(T,Bp),a(T,_s),a(_s,Fp),a(T,Wp),p(n,Ha,t),p(n,on,t),a(on,Ap),p(n,ba,t),p(n,An,t),a(An,Vp),p(n,Sa,t),p(n,en,t),a(en,Yp),p(n,Ra,t),p(n,Vn,t),a(Vn,Gp),p(n,Ta,t),p(n,cn,t),cn.innerHTML=Lc,p(n,ja,t),p(n,Yn,t),a(Yn,Jp),p(n,La,t),p(n,un,t),un.innerHTML=Ic,p(n,Ia,t),p(n,Gn,t),a(Gn,zp),p(n,Pa,t),p(n,ln,t),a(ln,$p),p(n,Ua,t),p(n,Jn,t),a(Jn,Kp),p(n,Oa,t),p(n,kn,t),kn.innerHTML=Pc,p(n,Da,t),p(n,zn,t),a(zn,Zp),p(n,Ma,t),p(n,rn,t),rn.innerHTML=Uc,p(n,Na,t),p(n,fn,t),a(fn,Qp),p(n,qa,t),p(n,mn,t),a(mn,Xp),p(n,Ba,t),p(n,dn,t),dn.innerHTML=Oc,p(n,Fa,t),p(n,vn,t),a(vn,no),p(n,Wa,t),p(n,yn,t),yn.innerHTML=Dc,p(n,Aa,t),p(n,wn,t),a(wn,so),p(n,Va,t),p(n,hn,t),hn.innerHTML=Mc,p(n,Ya,t),p(n,gn,t),a(gn,ao),p(n,Ga,t),p(n,$n,t),a($n,to),p(n,Ja,t),p(n,Kn,t),a(Kn,Zn),a(Zn,Cs),a(Cs,po),a(Zn,oo),p(n,za,t),p(n,En,t),En.innerHTML=Nc,p(n,$a,t),p(n,xn,t),a(xn,Qn),a(Qn,Hs),a(Hs,eo),a(Qn,co),p(n,Ka,t),p(n,_n,t),a(_n,uo),p(n,Za,t),p(n,y,t),a(y,lo),a(y,bs),a(bs,io),a(y,ko),a(y,Ss),a(Ss,ro),a(y,fo),a(y,Rs),a(Rs,mo),a(y,vo),p(n,Qa,t),p(n,Xn,t),a(Xn,yo),p(n,Xa,t),p(n,m,t),a(m,Cn),a(Cn,wo),a(Cn,Ts),a(Ts,ho),a(Cn,go),a(m,Eo),a(m,Hn),a(Hn,xo),a(Hn,js),a(js,_o),a(Hn,Co),a(m,Ho),a(m,bn),a(bn,bo),a(bn,Ls),a(Ls,So),a(bn,Ro),a(m,To),a(m,Is),a(Is,jo),a(m,Lo),a(m,Ps),a(Ps,Io),p(n,nt,t),p(n,ns,t),a(ns,Po),p(n,st,t),p(n,Sn,t),a(Sn,Uo),p(n,at,t),p(n,w,t),a(w,Us),a(Us,Rn),a(Rn,Oo),a(w,Do),a(w,Os),a(Os,Tn),a(Tn,Mo),a(w,No),a(w,Ds),a(Ds,jn),a(jn,qo),a(w,Bo),a(w,Ms),a(Ms,Ln),a(Ln,Fo)},p:Go,i:Go,o:Go,d(n){n&&s(x),n&&s(Ns),n&&s(U),n&&s(qs),n&&s(In),n&&s(Bs),n&&s(O),n&&s(Fs),n&&s(Pn),n&&s(Ws),n&&s(Un),n&&s(As),n&&s(d),n&&s(Vs),n&&s(M),n&&s(Ys),n&&s(On),n&&s(Gs),n&&s(N),n&&s(Js),n&&s(C),n&&s(zs),n&&s(q),n&&s($s),n&&s(B),n&&s(Ks),n&&s(Dn),n&&s(Zs),n&&s(f),n&&s(Qs),n&&s(A),n&&s(Xs),n&&s(H),n&&s(na),n&&s(V),n&&s(sa),n&&s(Y),n&&s(aa),n&&s(qn),n&&s(ta),n&&s(G),n&&s(pa),n&&s(v),n&&s(oa),n&&s(J),n&&s(ea),n&&s(b),n&&s(ca),n&&s(z),n&&s(ua),n&&s($),n&&s(la),n&&s(S),n&&s(ia),n&&s(K),n&&s(ka),n&&s(Bn),n&&s(ra),n&&s(Z),n&&s(fa),n&&s(h),n&&s(ma),n&&s(Q),n&&s(da),n&&s(Fn),n&&s(va),n&&s(X),n&&s(ya),n&&s(Wn),n&&s(wa),n&&s(nn),n&&s(ha),n&&s(R),n&&s(ga),n&&s(sn),n&&s(Ea),n&&s(an),n&&s(xa),n&&s(tn),n&&s(_a),n&&s(pn),n&&s(Ca),n&&s(T),n&&s(Ha),n&&s(on),n&&s(ba),n&&s(An),n&&s(Sa),n&&s(en),n&&s(Ra),n&&s(Vn),n&&s(Ta),n&&s(cn),n&&s(ja),n&&s(Yn),n&&s(La),n&&s(un),n&&s(Ia),n&&s(Gn),n&&s(Pa),n&&s(ln),n&&s(Ua),n&&s(Jn),n&&s(Oa),n&&s(kn),n&&s(Da),n&&s(zn),n&&s(Ma),n&&s(rn),n&&s(Na),n&&s(fn),n&&s(qa),n&&s(mn),n&&s(Ba),n&&s(dn),n&&s(Fa),n&&s(vn),n&&s(Wa),n&&s(yn),n&&s(Aa),n&&s(wn),n&&s(Va),n&&s(hn),n&&s(Ya),n&&s(gn),n&&s(Ga),n&&s($n),n&&s(Ja),n&&s(Kn),n&&s(za),n&&s(En),n&&s($a),n&&s(xn),n&&s(Ka),n&&s(_n),n&&s(Za),n&&s(y),n&&s(Qa),n&&s(Xn),n&&s(Xa),n&&s(m),n&&s(nt),n&&s(ns),n&&s(st),n&&s(Sn),n&&s(at),n&&s(w)}}}const eu={title:"React Hooks Explained for Beginners: A Practical Guide",description:"Master React Hooks with this beginner-friendly guide. Learn how to use useState, useEffect, useContext, and custom hooks with practical examples to build more efficient and maintainable React applications.",date:"2024-01-20T00:00:00.000Z",published:!0};class cu extends su{constructor(x){super(),au(this,x,null,pu,tu,{})}}export{cu as default,eu as metadata};
